# Copyright 2023 - TODAY, Akretion - Raphael Valyi <raphael.valyi@akretion.com>
# License AGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/sped-extractor and xsdata-odoo
# flake8: noqa: B950

"""
STRUCTURE SPED ECF

<BLOCO 0>

  - 0010 PARÂMETROS DE TRIBUTAÇÃO

  - 0020 PARÂMETROS COMPLEMENTARES

  - 0021 PARÂMETROS DE IDENTIFICAÇÃO DOS TIPOS DE PROGRAMA

  - 0030 DADOS CADASTRAIS

  - 0035 IDENTIFICAÇÃO DAS SCP

  - 0930 IDENTIFICAÇÃO DOS SIGNATÁRIOS DA ECF

<BLOCO E>

  - E010 SALDOS FINAIS RECUPERADOS DA ECF ANTERIOR
    ≡ E015 Contas Contábeis Mapeadas

  - E020 SALDOS FINAIS DAS CONTAS DA PARTE B DO E-LALUR DA ECF IMEDIATAMENTE ANTERIOR

  - E030 IDENTIFICAÇÃO DO PERÍODO
    ≡ E155 Detalhes dos Saldos Contábeis Calculados com Base nas ECD
    ≡ E355 Detalhes dos Saldos das Contas de Resultado Antes do Encerramento

<BLOCO J>

  - J050 PLANO DE CONTAS DO CONTRIBUINTE
    ≡ J051 Plano de Contas Referencial
    ≡ J053 Subcontas Correlatas

  - J100 CENTRO DE CUSTOS

<BLOCO K>

  - K030 IDENTIFICAÇÃO DOS PERÍODOS E FORMAS DE APURAÇÃO DO IRPJ E DA CSLL NO ANO-CALENDÁRIO
    ≡ K155 Detalhes dos Saldos Contábeis
      ≡ K156
    ≡ K355 Saldos Finais das Contas Contábeis de Resultado Antes do Encerramento
      ≡ K356

  - K915 JUSTIFICATIVA PARA DIVERGÊNCIA NAS CONTAS PATRIMONIAIS

  - K935 JUSTIFICATIVA PARA DIVERGÊNCIA NAS CONTAS DE RESULTADO

<BLOCO L>

  - L030 IDENTIFICAÇÃO DOS PERÍODOS E FORMAS DE APURAÇÃO DO IRPJ E DA CSLL NO ANO-CALENDÁRIO
    ≡ L100 Balanço Patrimonial
    ≡ L200 Método de Avaliação do Estoque Final
    ≡ L210 Informativo da Composição de Custos
    ≡ L300 Demonstração do Resultado Líquido no Período Fiscal

<BLOCO M>

  - M010 IDENTIFICAÇÃO DA CONTA NA PARTE B E-LALUR E DO E-LACS

  - M030 IDENTIFICAÇÃO DO PERÍODO E FORMA DE APURAÇÃO DO IRPJ E DA CSLL DAS EMPRESAS TRIBUTADAS
    ≡ M300 Demonstração do Lucro Real
      ≡ M305
      ≡ M310
        ≡ M312
      ≡ M315
    ≡ M350 Demonstração da Base de Cálculo da CSLL
      ≡ M355
      ≡ M360
        ≡ M362
      ≡ M365
    ≡ M410 Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem Reflexo na Parte A
      ≡ M415
    ≡ M500 Controle de Saldos das Contas da Parte B do e-Lalur e do e-Lacs
    ≡ M510 Controle de Saldos das Contas Padrão da Parte B do e- Lalur e do e-Lacs

<BLOCO N>

  - N030 IDENTIFICAÇÃO DO PERÍODO E FORMA DE APURAÇÃO DO IRPJ E DA CSLL DAS EMPRESAS TRIBUTADAS
    ≡ N500 Base de Cálculo do IRPJ Sobre o Lucro Real Após as Compensações de Prejuízos
    ≡ N600 Demonstração do Lucro da Exploração
    ≡ N605 Contas Contábeis Envolvidas na Apuração do Lucro da Exploração
    ≡ N610 Cálculo da Isenção e Redução do Imposto sobre Lucro Real
    ≡ N615 Informações da Base de Cálculo de Incentivos Fiscais
    ≡ N620 Apuração do IRPJ Mensal por Estimativa
    ≡ N630 Apuração do IRPJ Com Base no Lucro Real
    ≡ N650 Base de Cálculo da CSLL Após Compensações das Bases de Cálculo Negativa
    ≡ N660 Apuração da CSLL Mensal por Estimativa
    ≡ N670 Apuração da CSLL Com Base no Lucro Real

<BLOCO P>

  - P030 IDENTIFICAÇÃO DOS PERÍODOS E FORMA DE APURAÇÃO DO IRPJ E DA CSLL DAS EMPRESAS TRIBUTADAS
    ≡ P100 Balanço Patrimonial
    ≡ P130 Demonstração das Receitas Incentivadas do Lucro Presumido
    ≡ P150 Demonstração do Resultado
    ≡ P200 Apuração da Base de Cálculo do Lucro Presumido
    ≡ P230 Cálculo da Isenção e Redução do Lucro Presumido
    ≡ P300 Cálculo do IRPJ com Base no Lucro Presumido
    ≡ P400 Apuração da Base de Cálculo da CSLL com Base no Lucro Presumido
    ≡ P500 Cálculo da CSLL com Base no Lucro Líquido

<BLOCO Q>

  - Q100 DEMONSTRATIVO DO LIVRO CAIXA

<BLOCO T>

  - T030 IDENTIFICAÇÃO DOS PERÍODOS E FORMA DE APURAÇÃO DO IRPJ E CSLL DAS EMPRESAS TRIBUTADAS
    ≡ T120 Apuração da Base de Cálculo do IRPJ com Base no Lucro Arbitrado
    ≡ T150 Cálculo do Imposto de Renda com Base no Lucro Arbitrado
    ≡ T170 Apuração da Base de Cálculo da CSLL com Base no Lucro Arbitrado
    ≡ T181 Cálculo da CSLL com Base no Lucro Arbitrado

<BLOCO U>

  - U030 IDENTIFICAÇÃO DOS PERÍODOS E FORMAS DE APURAÇÃO DO IPRJ E DA CSLL DAS EMPRESAS IMUNES E ISENTAS
    ≡ U100 Balanço Patrimonial
    ≡ U150 Demonstração do Resultado
    ≡ U180 Cálculo do IRPJ das Empresas Imunes ou Isentas
    ≡ U182 Cálculo da CSLL das Empresas Imunes ou Isentas

<BLOCO V>

  - V010 DEREX – INSTITUIÇÃO
    ≡ V020 DEREX
    ≡ V030 DEREX - Período – Mês
      ≡ V100

<BLOCO W>

  - W100 INFORMAÇÕES SOBRE O GRUPO MULTINACIONAL E A ENTIDADE DECLARANTE
    ≡ W200 Declaração País a País
      ≡ W250

  - W300 OBSERVAÇÕES ADICIONAIS

<BLOCO X>

  - X280 ATIVIDADES INCENTIVADAS

  - X292 OPERAÇÕES COM O EXTERIOR

  - X340 IDENTIFICAÇÃO DA PARTICIPAÇÃO NO EXTERIOR
    ≡ X350 Participações no Exterior
    ≡ X351 Demonstrativo de Resultados e de Imposto a Pagar no Exterior
    ≡ X352 Demonstrativo de Resultados no Exterior Auferidos por Intermédio de Coligada
    ≡ X353 Demonstrativo de Consolidação
    ≡ X354 Demonstrativo de Prejuízos Acumulados
    ≡ X355 Demonstrativo de Rendas Ativas e Passivas
    ≡ X356 Demonstrativo de Estrutura Societária
    ≡ X357 Investidoras Diretas

  - X360 INFORMAÇÕES GERAIS SOBRE PREÇOS DE TRANSFERÊNCIA

  - X365 INFORMAÇÕES SOBRE CONTRAPARTES NAS TRANSAÇÕES CONTROLADAS
    ≡ X366 Entidades Com as Quais Realiza Transações Controladas

  - X370 INFORMAÇÕES SOBRE AS TRANSAÇÕES CONTROLADAS
    ≡ X371 Informações Sobre Ajustes Compensatórios
    ≡ X375 Informações Relacionadas ao Método de Preços de Transferência

  - X390 ORIGEM E APLICAÇÃO DE RECURSOS

  - X400 COMÉRCIO ELETRÔNICO E TECNOLOGIA DA INFORMAÇÃO – INFORMAÇÕES DAS VENDAS

  - X410 COMÉRCIO ELETRÔNICO – INFORMAÇÃO DE HOMEPAGE/SERVIDOR

  - X420 ROYALTIES RECEBIDOS OU PAGOS A BENEFICIÁRIOS DO BRASIL E DO EXTERIOR

  - X430 RENDIMENTOS RELATIVOS A SERVIÇOS

  - X450 PAGAMENTOS OU REMESSAS RELATIVOS A SERVIÇOS

  - X451 PAGAMENTOS OU REMESSAS RELATIVOS A SERVIÇOS

  - X460 INOVAÇÃO TECNOLÓGICA E DESENVOLVIMENTO TECNOLÓGICO

  - X470 CAPACITAÇÃO DE INFORMÁTICA E INCLUSÃO DIGITAL

  - X480 BENEFÍCIOS FISCAIS – PARTE I

  - X485 BENEFÍCIOS FISCAIS – PARTE II

  - X490 POLO INDUSTRIAL DE MANAUS E AMAZÔNIA OCIDENTAL

  - X500 ZONAS DE PROCESSAMENTO DE EXPORTAÇÃO

  - X510 ÁREAS DE LIVRE COMÉRCIO (ALC)

<BLOCO Y>

  - Y520 PAGAMENTOS/RECEBIMENTOS DO EXTERIOR OU DE NÃO RESIDENTES

  - Y570 DEMONSTRATIVO DO IMPOSTO DE RENDA E CSLL RETIDOS NA FONTE

  - Y590 ATIVOS NO EXTERIOR

  - Y600 IDENTIFICAÇÃO E REMUNERAÇÃO DE SÓCIOS

  - Y612 IDENTIFICAÇÃO E RENDIMENTOS DE DIRIGENTES E CONSELHEIROS

  - Y620 PARTICIPAÇÕES AVALIADAS PELO MÉTODO DE EQUIVALÊNCIA PATRIMONIAL

  - Y630 FUNDOS/CLUBES DE INVESTIMENTO

  - Y640 PARTICIPAÇÕES EM CONSÓRCIOS DE EMPRESAS

  - Y650 PARTICIPANTES DO CONSÓRCIO

  - Y660 DADOS DE SUCESSORAS

  - Y672 OUTRAS INFORMAÇÕES

  - Y680 MÊS DAS INFORMAÇÕES DE OPTANTES PELO REFIS
    ≡ Y681 Informações de Optantes pelo Refis

  - Y682 INFORMAÇÕES DE OPTANTES PELO REFIS

  - Y720 INFORMAÇÕES DE PERÍODOS ANTERIORES

  - Y750 INFORMAÇÕES DA ECF CALCULADAS PELO PGE

  - Y800 OUTRAS INFORMAÇÕES

<BLOCO 9>

  - 9100 AVISOS DA ESCRITURAÇÃO

  - 9900 REGISTROS DO ARQUIVO

<BLOCO 9>
"""

import textwrap

from odoo import fields, models


class Registro0000(models.AbstractModel):
    "Abertura do Arquivo Digital e Identificação da Pessoa Jurídica"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0000"
    _inherit = "l10n_br_sped.declaration"
    _sped_level = 0

    NOME_ESC = fields.Char(
        string="Texto fixo contendo a identificação do tipo",
        required=True,
        sped_length="4",
        help="Texto fixo contendo a identificação do tipo de Sped (LECF).",
    )

    COD_VER = fields.Char(
        string="Código da versão do leiaute",
        required=True,
        sped_length="4",
        help=(
            "Código da versão do leiaute. Observação: Para o ano-calendário 2024 e "
            "situações especiais de 205, o leiaute é o 0011."
        ),
    )

    CNPJ = fields.Char(
        string="Preencher este campo com o número de inscrição",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "Preencher este campo com o número de inscrição no Cadastro Nacional da "
            "Pessoa Jurídica (CNPJ) do declarante. Observação: No caso de arquivo de "
            "Sociedade em Conta de Participação (SCP), deve ser informado neste campo o"
            " CNPJ do sócio ostensivo. O CNPJ da SCP, no caso de arquivo da SCP, será "
            "informado no campo 0000.COD_SCP."
        ),
    )

    NOME = fields.Char(
        string="Nome empresarial da pessoa jurídica",
        required=True,
        help=(
            "Nome empresarial da pessoa jurídica ou da Sociedade em Conta de "
            "Participação (SCP)."
        ),
    )

    IND_SIT_INI_PER = fields.Char(
        string="Indicador do Início do Período",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador do Início do Período: 0 – Regular (Início no primeiro dia do "
            "ano). 1 – Abertura (Início de atividades no ano-calendário). 2 – "
            "Resultante de fusão ou cisão total. 3 – Resultante de Mudança de "
            "Qualificação da Pessoa Jurídica. 4 – Início de obrigatoriedade da entrega "
            "no curso do ano calendário - Exclusão do Simples. 5 – Resultante de "
            "desenquadramento como imune ou isenta do IRPJ). 6 - Realizou incorporação "
            "ou remanescente de cisão parcial."
        ),
    )

    SIT_ESPECIAL = fields.Char(
        string="Indicador de Situação Especial e Outros Eventos",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Situação Especial e Outros Eventos: 0 – Normal (Sem "
            "ocorrência de situação especial ou evento) 1 – Extinção 2 – Fusão 3 – "
            "Incorporação \\ Incorporada 4 – Incorporação \\ Incorporadora 5 – Cisão "
            "Total 6 – Cisão Parcial 7 – Mudança de Qualificação da Pessoa Jurídica 8 –"
            " Desenquadramento de Imune/Isenta; 9 – Inclusão no Simples Nacional"
        ),
    )

    PAT_REMAN_CIS = fields.Float(
        string="Patrimônio Remanescente em Caso de Cisão",
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Patrimônio Remanescente em Caso de Cisão (%). Observação: Necessário para "
            "o controle de saldos na conta da parte B do LALUR."
        ),
    )

    DT_SIT_ESP = fields.Date(
        string="Data da Situação Especial ou Evento",
        sped_length="8",
        help=(
            "Data da Situação Especial ou Evento: Informar a data da deliberação do "
            "evento ou, em caso de extinção da pessoa jurídica, a data em que se "
            "ultimou a sua liquidação."
        ),
    )

    DT_INI = fields.Date(
        string="Data do Início do Período",
        required=True,
        sped_length="8",
        help=(
            "Data do Início do Período: Data inicial das informações contidas no "
            "arquivo. Este campo deve ser preenchido com a data inicial do período "
            "correspondente ao ano- calendário a que se referir a ECF."
        ),
    )

    DT_FIN = fields.Date(
        string="Data do Fim do Período",
        required=True,
        sped_length="8",
        help=(
            "Data do Fim do Período: Data final das informações contidas no arquivo. A "
            "data correspondente ao período final é 31 de dezembro, no caso de situação"
            " normal. Nos demais casos, o período final é deve ser com base na data do "
            "evento. Atenção: Considera-se período final, nos casos de situação "
            "especial, as seguintes datas: a) Extinção: A data em que se ultimou a "
            "liquidação da pessoa jurídica; b) Fusão, Incorporação/Incorporada, "
            "Incorporação/Incorporadora, Cisão Total, Cisão Parcial e Inclusão no "
            "Simples Nacional: A data da deliberação do evento de incorporação, fusão "
            "ou cisão."
        ),
    )

    RETIFICADORA = fields.Char(
        string="A pessoa jurídica deve assinalar este campo",
        required=True,
        sped_length="1",
        help=(
            "A pessoa jurídica deve assinalar este campo no caso de escrituração "
            "retificadora ou escrituração com mudança de forma de tributação: S – ECF "
            "retificadora N – ECF original F – ECF original com mudança de forma de "
            "tributação (Art. 7º, § 2º, da Instrução Normativa RFB nº 2.004/2021). A "
            "pessoa jurídica poderá efetuar a remessa de arquivo em retificação ao "
            "arquivo anteriormente remetido, observando-se a permissão, as regras e "
            "prazos estabelecidos pela Secretaria da Receita Federal do Brasil (RFB). "
            "Atenção: A substituição das ECF já transmitidas deverá ser feita na sua "
            "íntegra, pois a ECF não aceita arquivos complementares para o mesmo "
            "período informado. Como há controle de saldos, se houver substituição de "
            "uma ECF, pode haver a necessidade de substituição de ECF já transmitidas "
            "de anos posteriores."
        ),
    )

    NUM_REC = fields.Char(
        string="Número do Recibo da ECF Anterior",
        sped_length="41",
        help=(
            "Número do Recibo da ECF Anterior (hashcode): Este campo deve ser "
            "preenchido com o número constante no recibo de entrega da ECF a ser "
            "retificada, nos casos de 0000.RETIFICADORA = “S” ou “F”."
        ),
    )

    TIP_ECF = fields.Integer(
        string="Indicador do Tipo da ECF",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Tipo da ECF: 0 – ECF de empresa não participante de SCP como "
            "sócio ostensivo. 1 – ECF de empresa participante de SCP como sócio "
            "ostensivo. 2 – ECF da SCP."
        ),
    )

    COD_SCP = fields.Char(
        string="CNPJ da SCP",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "CNPJ da SCP (ANEXOS I e VIII, da Instrução Normativa RFB nº 2.119, de 08 "
            "de dezembro de 2022). Observação: Só deve ser preenchido pela própria SCP "
            "(Não é preenchido pelo sócio ostensivo)."
        ),
    )


class Registro0010(models.AbstractModel):
    "Parâmetros de Tributação"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0010"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    HASH_ECF_ANTERIOR = fields.Char(
        string="Hashcode da ECF",
        sped_length="4",
        help=(
            "Hashcode da ECF do período imediatamente anterior a ser recuperado. Campo "
            "preenchido automaticamente pelo sistema."
        ),
    )

    OPT_REFIS = fields.Char(
        string="Indicador de Optante pelo Refis: S",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Optante pelo Refis: S - Sim N – Não A pessoa jurídica deve "
            "assinalar este campo quando for optante pelo Programa de Recuperação "
            "Fiscal (Refis). Atenção: Este campo só deve ser assinalado pela pessoa "
            "jurídica optante pelo Programa de Recuperação Fiscal (Refis), instituído "
            "pela Lei nº 9.964, de 10 de abril de 2000, e que dele não tenha sido "
            "excluída. A pessoa jurídica que for apenas optante pelo Parcelamento "
            "Especial (Paes) de que trata a Lei nº 10.684, de 30 de maio de 2003, e "
            "outros reparcelamentos não deve assinalar este campo."
        ),
    )

    FORMA_TRIB = fields.Integer(
        string="Forma de Tributação: 1 – Lucro Real",
        required=True,
        sped_length="1",
        help=(
            "Forma de Tributação: 1 – Lucro Real. 2 – Lucro Real/Arbitrado. 3 – Lucro "
            "Presumido/Real."
        ),
    )

    FORMA_APUR = fields.Char(
        string="Indicador do Período de Apuração do IRPJ e da CSLL",
        sped_length="1",
        help=(
            "Indicador do Período de Apuração do IRPJ e da CSLL: T – Trimestral A – "
            "Anual"
        ),
    )

    COD_QUALIF_PJ = fields.Char(
        string="Qualificação da Pessoa Jurídica",
        sped_length="2",
        help=(
            "Qualificação da Pessoa Jurídica: 01 – PJ em Geral 02 – PJ Componente do "
            "Sistema Financeiro 03 – Sociedades Seguradoras, de Capitalização ou "
            "Entidade Aberta de Previdência Complementar Atenção: Não preencher no caso"
            " de imunes e isentas (preencher o 0010.TIP_ENT)."
        ),
    )

    FORMA_TRIB_PER = fields.Char(
        string="Forma de Tributação no Período",
        sped_length="4",
        help=(
            "Forma de Tributação no Período: Forma de tributação no período "
            "considerando para cada trimestre no formato XXXX onde X é igual a: 0 – "
            "ZERO – Não informado – trimestre não compreendido no período de apuração. "
            "R – Real P – Presumido A – Arbitrado E – Real Estimativa (somente "
            "utilizado no caso da observação abaixo). Observação: Caso 0010.FORMA_TRIB "
            "seja igual “3” (Presumido/Real) ou “4” (Presumido/Real/Arbitrado) e houver"
            " opção pelo REFIS (0010.OPT_REFIS), o período tributado pelo lucro real "
            "deve ter somente a forma de apuração trimestral (Caso em que deve ser "
            "utilizado “R” em 0010.FORMA_TRIB_PER) ou somente a forma de apuração "
            "correspondente à anual/estimativa (Caso em que deve ser utilizado “E” em "
            "0010.FORMA_TRIB_PER) ."
        ),
    )

    MES_BAL_RED = fields.Char(
        string="Forma de Apuração da Estimativa Mensal",
        sped_length="12",
        help=(
            "Forma de Apuração da Estimativa Mensal: Indicação da forma de apuração da "
            "estimativa mensal, quando 0010.FORMA_APUR = “A”, considerando o formato "
            "XXXXXXXXXXXX onde X é referente a um mês e é igual a: 0 – Fora do Período:"
            " Fora do período de apuração/ Forma de tributação diferente de “R” ou “E”."
            " E – Receita Bruta: Estimativa com base na receita bruta e acréscimos. B –"
            " Balanço ou Balancete: Estimativa com base no balanço ou balancete de "
            "suspensão/redução. Os meses correspondentes a trimestres marcados em "
            "0010.FORMA_TRIB_PER como diferente de “R” e “E” devem estar preenchidos "
            "com zero “0”. Os meses correspondentes a trimestres marcados em "
            "0010.FORMA_TRIB_PER iguais a “R” ou “E” devem estar preenchidos com “E” ou"
            " “B”."
        ),
    )

    TIP_ESC_PRE = fields.Char(
        string="A Escrituração",
        sped_length="1",
        help=(
            "A Escrituração: C – Obrigada a entregar a ECD ou entrega facultativa "
            "(haverá recuperação dos dados). L – Não obrigada a entregar a ECD/Livro "
            "Caixa (Opção do Lucro Presumido - parágrafo único do art. 45 da Lei nº "
            "8.981, de 1995). tenção: - Este campo deve ser preenchido pelas pessoas "
            "jurídicas tributadas pelo lucro presumido e as imunes ou isentas. - Caso a"
            " pessoa jurídica entregue a ECD facultativamente e não queira recuperar os"
            " dados da ECD, deve utilizar a opção “L”."
        ),
    )

    TIP_ENT = fields.Char(
        string="C C C C C Tipo de Pessoa Jurídica Imune ou Isenta",
        xsd_type="numeric_code",
        sped_length="2",
        help=(
            "C C C C C Tipo de Pessoa Jurídica Imune ou Isenta: 01 – Assistência Social"
            " 02 – Educacional 03 – Sindicato de Trabalhadores 04 – Associação Civil 05"
            " – Cultural 06 – Entidade Fechada de Previdência Complementar 07 – "
            "Filantrópica 08 – Sindicato 09 – Recreativa 10 – Científica 11 – "
            "Associação de Poupança e Empréstimo 12 – Entidade Aberta de Previdência "
            "Complementar (Sem Fins Lucrativos) 13 – Fifa e Entidades Relacionadas 14 –"
            " CIO e Entidades Relacionadas 15 – Partidos Políticos 99 – Outras. "
            "Observação: Este campo é obrigatório para 0010.FORMA_TRIB igual a “8” "
            "(Imune do IRPJ) ou “9” (Isenta do IRPJ). aso 0010.TIP_ENT = “01”, “02”, "
            "“03”, “04”, “05”, “07”, “08”, “09”, “10”, “13”, “14” ou “99”, os planos "
            "referenciais serão U100A e U150A. aso 0010.TIP_ENT = “11”, os planos "
            "referenciais serão U100B e U150B. aso 0010.TIP_ENT = “12”, os planos "
            "referenciais serão U100C e U150C. aso 0010.TIP_ENT = “06”, os planos "
            "referenciais serão U100D e U150D. aso 0010.TIP_ENT = “15”, os planos "
            "referenciais serão U100E e U150E."
        ),
    )

    FORMA_APUR_I = fields.Char(
        string="Apuração do IRPJ para Imunes ou Isentas",
        sped_length="1",
        help=(
            "Apuração do IRPJ para Imunes ou Isentas: Existência ou não de atividade "
            "não abrangida pela imunidade ou isenção e tributada pelo IRPJ (para imunes"
            " ou isentas): A – Anual T – Trimestral D – Desobrigada"
        ),
    )

    APUR_CSLL = fields.Char(
        string="Apuração da CSLL para Imunes ou Isentas",
        sped_length="1",
        help=(
            "Apuração da CSLL para Imunes ou Isentas: A – Anual, se optou pela apuração"
            " da CSLL sobre a base de cálculo estimada, facultada a opção pelo "
            "levantamento de balanço ou balancete de suspensão ou redução. T – "
            "Trimestral, no caso de ter adotado a apuração trimestral da CSLL. D – "
            "Desobrigada, na hipótese de pessoa jurídica imune ou isenta da CSLL. "
            "Atenção: 1) As entidades sem fins lucrativos de que trata o inciso I do "
            "art. 12 do Decreto nº 3.048, de 6 de maio de 1999, que não se enquadram na"
            " imunidade e isenção da Lei nº 9.532, de 10 de dezembro de 1997, estão "
            "sujeitas à CSLL, devendo apurar a base de cálculo e a contribuição devida "
            "nos termos da legislação comercial. 2) As associações de poupança e "
            "empréstimo devem apurar a contribuição social sobre o lucro líquido. 3) "
            "São isentas da CSLL as entidades fechadas de previdência complementar, "
            "relativamente aos fatos geradores ocorridos a partir de 1º de janeiro de "
            "2002. Observação: Este campo é obrigatório para 0010.FORMA_TRIB igual a "
            "“8” (Imune do IRPJ) ou “9” (Isenta do IRPJ)."
        ),
    )

    IND_REC_RECEITA = fields.Char(
        string="Critério de reconhecimento de receitas",
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Critério de reconhecimento de receitas para empresas tributadas pelo Lucro"
            " Presumido (Art. 215, § 9º, Instrução Normativa RFB nº 1.700/2017): 1. "
            "Regime de caixa 2. Regime de competência Em relação aos fatos contábeis "
            "ocorridos a partir de 1º de janeiro de 2016, a obrigatoriedade de adotar a"
            " ECD alcança todas as pessoas jurídicas tributadas com base no lucro "
            "presumido que utilizem o regime de competência. Então, caso a empresa "
            "tenha o reconhecimento de receitas pelo regime de competência, deve "
            "indicar no campo 9, a opção C – Obrigada a entregar a ECD."
        ),
    )


class Registro0020(models.AbstractModel):
    "Parâmetros Complementares"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0020"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    IND_ALIQ_CSLL = fields.Char(
        string="PJ Sujeita à Alíquota da CSLL de 9%; 15% ou 20%",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "PJ Sujeita à Alíquota da CSLL de 9%; 15% ou 20%: 1 – Alíquota de 9% 3 – "
            "Alíquota de 20% 4 – Alíquota de 15%"
        ),
    )

    IND_QTE_SCP = fields.Char(
        string="Quantidade total de SCP do Sócio Ostensivo de SCP",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
    )

    IND_ADM_FUN_CLU = fields.Char(
        string="Administradora de Fundos e Clubes de Investimento",
        required=True,
        sped_length="1",
        help="Administradora de Fundos e Clubes de Investimento: S – Sim N – Não",
    )

    IND_PART_CONS = fields.Char(
        string="Participações em Consórcios de Empresas",
        required=True,
        sped_length="1",
        help=(
            "Participações em Consórcios de Empresas: S – Sim N – Não A pessoa jurídica"
            " participante de consórcio constituído nos termos do disposto nos arts. "
            "278 e 279 da Lei nº 6.404, de 15 de dezembro de 1976, deve assinalar este "
            "campo. Atenção: Somente deve ser assinalado este campo quando houver "
            "receita de pelo menos uma consorciada."
        ),
    )

    IND_OP_EXT = fields.Char(
        string="Operações com o Exterior",
        required=True,
        sped_length="1",
        help=(
            "Operações com o Exterior: S – Sim N – Não A pessoa jurídica, inclusive "
            "instituição financeira ou companhia seguradora, conforme relacionadas no §"
            " 1º do art. 22 da Lei nº 8.212, de 1991, e no inciso II do art. 14 da Lei "
            "nº 9.718, de 1998, que realizou exportação/importação de bens, serviços ou"
            " direitos ou auferiu receitas financeiras ou incorreu em despesas "
            "financeiras em operações efetuadas com pessoa física ou jurídica residente"
            " ou domiciliada no exterior, ainda que essas operações não tenham sido "
            "realizadas com pessoa vinculada ou com pessoa residente ou domiciliada em "
            "país ou dependência com tributação favorecida ou cuja legislação interna "
            "oponha sigilo relativo à composição societária de pessoas jurídicas ou a "
            "sua titularidade, deve assinalar este campo. Deve também assinalar este "
            "campo a pessoa jurídica, inclusive instituição financeira ou companhia "
            "seguradora, que realizar as operações acima referidas por intermédio de "
            "interposta pessoa."
        ),
    )

    IND_OP_VINC = fields.Char(
        string="Operações",
        required=True,
        sped_length="1",
        help=(
            "Operações com Pessoa Vinculada/Interposta Pessoa / País com Tributação "
            "Favorecida. S – Sim N – Não Deve assinalar este campo, a pessoa jurídica, "
            "inclusive instituição financeira ou companhia seguradora, conforme "
            "relacionadas no § 1º do art. 22 da Lei nº 8.212, de 1991, e no inciso II "
            "do art. 14 da Lei nº 9.718, de 1998, que realizou exportação/importação de"
            " bens, serviços ou direitos ou auferiu receitas financeiras ou incorreu em"
            " despesas financeiras em operações efetuadas com pessoa física ou jurídica"
            " residente ou domiciliada no exterior, considerada pela legislação "
            "brasileira: a) pessoa vinculada; b) pessoa residente ou domiciliada em "
            "países com tributação favorecida ou cuja legislação interna oponha sigilo "
            "relativo à composição societária de pessoas jurídicas ou a sua "
            "titularidade; e c) a partir de 1º de janeiro de 2009, pessoa residente ou "
            "domiciliada no exterior, que goze, nos termos da legislação, de regime "
            "fiscal privilegiado (Art. 24-A da Lei nº 9.430, de 1996, instituído pela "
            "Lei nº 11.727, de 2008 e alterado pela Lei nº 14.596, de 2023). Deve "
            "também assinalar este campo a pessoa jurídica, inclusive instituição "
            "financeira ou companhia seguradora, que realizar as operações acima "
            "referidas por intermédio de interposta pessoa."
        ),
    )

    IND_PJ_ENQUAD = fields.Char(
        string="PJ Enquadrada nos artigos 48 ou 49",
        required=True,
        sped_length="1",
        help=(
            "PJ Enquadrada nos artigos 48 ou 49 da Instrução Normativa RFB nº "
            "1.312/2012: S – Sim N – Não"
        ),
    )

    IND_PART_EXT = fields.Char(
        string="Participações no Exterior",
        required=True,
        sped_length="1",
        help=(
            "Participações no Exterior: A pessoa jurídica deve assinalar este campo, "
            "caso tenha participações no exterior. S – Sim N – Não"
        ),
    )

    IND_ATIV_RURAL = fields.Char(
        string="Atividade Rural",
        required=True,
        sped_length="1",
        help=(
            "Atividade Rural: A pessoa jurídica deve assinalar este campo, caso explore"
            " atividade rural. S – Sim N – Não"
        ),
    )

    IND_LUC_EXP = fields.Char(
        string="Existência de Lucro da Exploração",
        required=True,
        sped_length="1",
        help=(
            "Existência de Lucro da Exploração: S – Sim N – Não Este campo deve ser "
            "assinalado pelas pessoas jurídicas que adotam a forma de tributação pelo "
            "lucro real, inclusive se optantes pelo Refis, que gozem de benefícios "
            "fiscais calculados com base no lucro da exploração."
        ),
    )

    IND_RED_ISEN = fields.Char(
        string="Isenção e Redução do Imposto para Lucro Presumido",
        required=True,
        sped_length="1",
        help=(
            "Isenção e Redução do Imposto para Lucro Presumido: S – Sim N – Não A "
            "pessoa jurídica tributada pelo lucro presumido e optante pelo Refis deve "
            "assinalar este campo caso usufrua benefícios fiscais relativos a isenção "
            "ou redução do imposto de renda."
        ),
    )

    IND_FIN = fields.Char(
        string="Indicativo da Existência de FINOR/FINAM",
        required=True,
        sped_length="1",
        help=(
            "Indicativo da Existência de FINOR/FINAM: S – Sim N – Não Este campo deve "
            "ser assinalado pelas pessoas jurídicas ou grupos de empresas coligadas de "
            "que trata o art. 9º da Lei nº 8.167, de 1991, alterado pela Medida "
            "Provisória nº 2.199-14, de 24 de agosto de 2001, titulares de "
            "empreendimento de setor da economia considerado, em ato do Poder "
            "Executivo, prioritário para o desenvolvimento regional, aprovado ou "
            "protocolizado até 2 de maio de 2001 nas áreas da Sudam e da Sudene ou do "
            "Grupo Executivo para Recuperação Econômica do Estado do Espírito Santo "
            "(Geres) (MP nº 2.199-14, de 2001, art. 4º, e MP nº 2.145, de 2 de maio de "
            "2001, art. 50, XX, atuais MP nº 2.156-5, de 2001, art. 32, XVIII, e nº "
            "2.157-5, de 2001, art. 32, IV)."
        ),
    )

    IND_PART_COLIG = fields.Char(
        string="Participação Avaliada pelo Método",
        required=True,
        sped_length="1",
        help=(
            "Participação Avaliada pelo Método de Equivalência Patrimonial: S – Sim N –"
            " Não A pessoa jurídica domiciliada no Brasil, que teve participações "
            "permanentes, no ano- calendário, em capital de pessoa jurídica domiciliada"
            " no Brasil ou no exterior, considerada, pela legislação brasileira, "
            "avaliada pelo método de equivalência patrimonial, deve assinalar este "
            "campo."
        ),
    )

    IND_REC_EXT = fields.Char(
        string="Recebimentos do Exterior ou de Não Residentes",
        required=True,
        sped_length="1",
        help=(
            "Recebimentos do Exterior ou de Não Residentes: S – Sim N – Não Deve "
            "assinalar este campo, a pessoa jurídica que recebeu, durante o ano-"
            "calendário, de pessoas físicas ou jurídicas, residentes ou domiciliadas no"
            " exterior ou de não-residentes: - quaisquer valores mediante operações de "
            "câmbio de qualquer natureza; - quaisquer valores por intermédio de "
            "transferências internacionais em reais (TIR), ou seja, provenientes de "
            "conta bancária em reais (R$) titulada por não-residente; - valores iguais "
            "ou superiores a R$ 120.000,00 (cento e vinte mil reais), equivalentes a R$"
            " 10.000,00 por mês, por intermédio de cartões de crédito; - quaisquer "
            "valores por intermédio de depósitos em contas bancárias mantidas no "
            "exterior."
        ),
    )

    IND_ATIV_EXT = fields.Char(
        string="Ativos no Exterior",
        required=True,
        sped_length="1",
        help=(
            "Ativos no Exterior: S – Sim N – Não Preenchida por todas as pessoas "
            "jurídicas (Sim), salvo quando o valor contábil total dos ativos a "
            "declarar, convertido para Reais no final do período abrangido pela ECF, "
            "for inferior a R$ 100.000,00 (cem mil reais) (Não)."
        ),
    )

    IND_PGTO_EXT = fields.Char(
        string="Pagamentos ao Exterior ou a Não Residentes",
        required=True,
        sped_length="1",
        help=(
            "Pagamentos ao Exterior ou a Não Residentes: S – Sim N – Não Deve assinalar"
            " este campo, a pessoa jurídica que tiver pagado, creditado, entregado, "
            "empregado ou remetido, durante o ano-calendário, a pessoas físicas ou "
            "jurídicas, residentes ou domiciliadas no exterior ou a não-residentes: - "
            "quaisquer valores mediante operações de câmbio de qualquer natureza; - "
            "quaisquer valores por intermédio de transferências internacionais em reais"
            " (TIR), ou seja, pela utilização de reais (R$) para crédito de conta "
            "bancária titulada por não-residentes; - valores iguais ou superiores a R$ "
            "120.000,00 (cento e vinte mil reais), equivalentes a R$ 10.000,00 por mês,"
            " por intermédio de cartões de crédito; - quaisquer valores mediante a "
            "utilização de recursos mantidos no exterior."
        ),
    )

    IND_E_COM_TI = fields.Char(
        string="Comércio Eletrônico e Tecnologia da Informação",
        required=True,
        sped_length="1",
        help=(
            "Comércio Eletrônico e Tecnologia da Informação: S – Sim N – Não A pessoa "
            "jurídica que efetuou durante o ano-calendário vendas de bens (tangíveis ou"
            " intangíveis) ou tiver prestado serviços, por meio da Internet, para "
            "pessoas físicas e jurídicas, residentes ou domiciliadas no Brasil ou no "
            "exterior, deve assinalar este campo. Ao assinalar este campo, são "
            "disponibilizados os registros X400 (Comércio Eletrônico e Tecnologia da "
            "Informação) e X410 (Comércio Eletrônico)."
        ),
    )

    IND_ROY_REC = fields.Char(
        string="Royalties Recebidos do Brasil e do Exterior",
        required=True,
        sped_length="1",
        help=(
            "Royalties Recebidos do Brasil e do Exterior: S – Sim N – Não A pessoa "
            "jurídica que tiver recebido, durante o ano-calendário, de pessoas físicas "
            "ou jurídicas, residentes ou domiciliadas no Brasil ou no exterior, "
            "rendimentos a título de royalties relativos a: exploração econômica dos "
            "direitos patrimoniais do autor, de marcas, de patentes e de desenho "
            "industrial; exploração de know-how; exploração de franquias e exploração "
            "dos direitos relativos à propriedade intelectual referente a cultivares, "
            "deve preencher este campo com “Sim”."
        ),
    )

    IND_ROY_PAG = fields.Char(
        string="Royalties Pagos a Beneficiários do Brasil",
        required=True,
        sped_length="1",
        help=(
            "Royalties Pagos a Beneficiários do Brasil e do Exterior: S – Sim N – Não A"
            " pessoa jurídica que tiver efetuado pagamento ou remessa, durante o ano-"
            "calendário, a pessoas físicas ou jurídicas, residentes ou domiciliadas no "
            "Brasil ou no exterior, a título de royalties relativos a: exploração "
            "econômica dos direitos patrimoniais do autor, de marcas, de patentes e de "
            "desenho industrial; exploração de know-how; exploração de franquias e "
            "exploração dos direitos relativos à propriedade intelectual referente a "
            "cultivares, deve preencher este campo com “Sim”."
        ),
    )

    IND_REND_SERV = fields.Char(
        string="Rendimentos Relativos a Serviços",
        required=True,
        sped_length="1",
        help=(
            "Rendimentos Relativos a Serviços, Juros e Dividendos Recebidos do Brasil e"
            " do Exterior: S – Sim N – Não A pessoa jurídica que tiver recebido, "
            "durante o ano-calendário, de pessoas físicas ou jurídicas, residentes ou "
            "domiciliadas no Brasil ou no exterior, rendimentos relativos a: serviços "
            "de assistência técnica, científica, administrativa e semelhantes que "
            "impliquem transferência de tecnologia; serviços técnicos e de assistência "
            "que não impliquem transferência de tecnologia; juros sobre capital "
            "próprio, bem como juros decorrentes de contratos de mútuo entre empresas "
            "ligadas e juros decorrentes de contratos de financiamento; dividendos "
            "decorrentes de participações em outras empresas, deve preencher este campo"
            " com “Sim”."
        ),
    )

    IND_PGTO_REM = fields.Char(
        string="A Pagamentos ou Remessas a Título de Serviços",
        required=True,
        sped_length="1",
        help=(
            "A Pagamentos ou Remessas a Título de Serviços, Juros e Dividendos a "
            "Beneficiários do Brasil e do Exterior: S – Sim N – Não A pessoa jurídica "
            "que tiver pagado ou remetido, durante o ano-calendário, a pessoas físicas "
            "ou jurídicas, residentes ou domiciliadas no Brasil ou no exterior, valores"
            " relativos a: serviços de assistência técnica, científica, administrativa "
            "e semelhantes que impliquem transferência de tecnologia; serviços técnicos"
            " e de assistência que não impliquem transferência de tecnologia; juros "
            "sobre capital próprio, bem como juros decorrentes de contratos de mútuo "
            "entre empresas ligadas e juros decorrentes de contratos de financiamento; "
            "dividendos decorrentes de participações em outras empresas, deve preencher"
            " este campo com “Sim”. s pessoas jurídicas que realizaram pagamentos ou "
            "remessas ao exterior para as operações previstas no art. 1º, inc. II, III,"
            " IV, X, XI e XII, da Lei nº 9.481, de 1997, e art. 9º da Lei nº 11.774, de"
            " 2008."
        ),
    )

    IND_INOV_TEC = fields.Char(
        string="Inovação Tecnológica e Desenvolvimento Tecnológico",
        required=True,
        sped_length="1",
        help=(
            "Inovação Tecnológica e Desenvolvimento Tecnológico: S – Sim N – Não A "
            "pessoa jurídica beneficiária de incentivos fiscais relativos às atividades"
            " de pesquisa tecnológica e desenvolvimento de inovação tecnológica de que "
            "tratam os arts. 17 a 26 da Lei nº 11.196, de 21 de novembro de 2005, ou a "
            "pessoa jurídica executora dos programas de desenvolvimento tecnológico "
            "industrial ou agropecuário (PDTI/PDTA) de que trata a Lei nº 8.661, de "
            "1993, aprovados até 31 de dezembro de 2005, que não tenha migrado para o "
            "regime estabelecido nos arts. 17 a 26 da Lei nº 11.196, de 2005, deve "
            "preencher este campo com “Sim”."
        ),
    )

    IND_CAP_INF = fields.Char(
        string="Capacitação de Informática e Inclusão Digital",
        required=True,
        sped_length="1",
        help=(
            "Capacitação de Informática e Inclusão Digital: S – Sim N – Não A pessoa "
            "jurídica que tiver investido em atividades de pesquisa e desenvolvimento "
            "em tecnologia da informação no âmbito dos programas de capacitação e "
            "competitividade dos setores de informática e automação e tecnologias da "
            "informação de que trata a Lei nº 8.248, de 23 de outubro de 1991, a Lei nº"
            " 10.176, de 11 de janeiro de 2001, e a Lei nº 11.077, de 30 de dezembro de"
            " 2004, regulamentadas pelo Decreto nº 5.906, de 26 de setembro de 2006, ou"
            " tiver efetuado venda a varejo nos termos dos arts. 28 a 30 da Lei nº "
            "11.196, de 2005, que dispõem sobre o programa de inclusão digital, deve "
            "preencher este campo com “Sim”."
        ),
    )

    IND_PJ_HAB = fields.Char(
        string="a b c d PJ Habilitada ao Repes",
        required=True,
        sped_length="1",
        help=(
            "a b c d PJ Habilitada ao Repes, Recap, Padis, Reidi, Recine, Retid, Óleo "
            "Bunker, Reporto, RET II, RET PMCMV/PCVA, RET EEI, EBAS Imune, Repetro-"
            "Industrialização, Repetro- Nacional, Repetro-Permanente e Repetro-"
            "Temporário: S – Sim N – Não Este registro deverá ser preenchido pela "
            "pessoa jurídica: ) habilitada ao Regime Especial de Tributação para a "
            "Plataforma de Exportação de Serviços de Tecnologia da Informação (Repes), "
            "instituído pela Lei nº 11.196, de 2005, com as alterações introduzidas "
            "pela Lei nº 11.774, de 17 de setembro de 2008 e pela Lei 12.715, de 17 de "
            "setembro de 2012, regulamentado pelo Decreto nº 5.712, de 2 de março de "
            "2006, com as alterações introduzidas pelo Decreto nº 6.887, de 25 de junho"
            " de 2009; ou ) habilitada ao Regime Especial de Aquisição de Bens de "
            "Capital para Empresas Exportadoras (Recap) instituído pela Lei nº 11.196, "
            "de 2005, com as alterações introduzidas pela Lei nº 11.774, de 2008 e pela"
            " Lei 12.715, de 17 de setembro de 2012, regulamentado pelo Decreto nº "
            "5.649, de 29 de dezembro de 2005, com as alterações posteriores; ou ) "
            "executora de projeto aprovado no âmbito do Programa de Apoio ao "
            "Desenvolvimento Tecnológico da Indústria de Semicondutores (Padis), "
            "instituído pela Lei nº 11.484, de 31 de maio de 2007, com alterações "
            "introduzidas pelo art. 20 c/c art. 139, I, “d” da Lei nº 12.249, de 11 de "
            "junho de 2010, regulamentado pelo Decreto nº 6.233, de 11 de outubro de "
            "2007, com as alterações introduzidas pelo Decreto nº 6.887, de 2009; ou ) "
            "habilitada ou co-habilitada ao Regime Especial de Incentivos para o "
            "Desenvolvimento da Infraestrutura (Reidi), instituído pela Lei nº 11.488, "
            "de 15 de junho de 2007, com as alterações posteriores, regulamentado pelo "
            "Decreto nº 6.144, de 3 de julho de 2007, com as"
        ),
    )

    IND_POLO_AM = fields.Char(
        string="Pólo Industrial de Manaus e Amazônia Ocidental",
        required=True,
        sped_length="1",
        help=(
            "Pólo Industrial de Manaus e Amazônia Ocidental: S – Sim N – Não A pessoa "
            "jurídica que estiver localizada na área de atuação da Superintendência da "
            "Zona Franca de Manaus (Suframa) que seja beneficiária dos incentivos de "
            "que trata o Decreto-lei nº 288, de 28 de fevereiro de 1967, e alterações "
            "posteriores; a Lei nº 8.387, de 30 de dezembro de 1991, e alterações "
            "posteriores; ou o Decreto-lei nº 356, de 15 de agosto de 1968, e "
            "alterações posteriores (Amazônia Ocidental), deve preencher este campo com"
            " “Sim”."
        ),
    )

    IND_ZON_EXP = fields.Char(
        string="Zonas de Processamento de Exportação",
        required=True,
        sped_length="1",
        help=(
            "Zonas de Processamento de Exportação: S – Sim N – Não A pessoa jurídica "
            "autorizada a operar em Zonas de Processamento de Exportação, voltadas para"
            " a produção de bens a serem comercializados no exterior, de acordo com o "
            "estabelecido pela Lei nº 11.508, de 20 de julho de 2007 e pela Lei nº "
            "11.732, de 30 de junho de 2008, deve preencher este campo com “Sim”."
        ),
    )

    IND_AREA_COM = fields.Char(
        string="Áreas de Livre Comércio",
        required=True,
        sped_length="1",
        help=(
            "Áreas de Livre Comércio: S – Sim N – Não A pessoa jurídica autorizada a "
            "operar nas Áreas de Livre Comércio de Boa Vista, Bonfim, Tabatinga, Macapá"
            " e Santana, Brasiléia, Cruzeiro do Sul ou Guajará-Mirim, beneficiária dos "
            "incentivos de que tratam a Lei nº 8.256, de 25 de novembro de 1991, a Lei "
            "nº 11.732, de 30 de junho de 2008, a Lei nº 7.965, de 22 de dezembro de "
            "1989, a Lei nº 8.387, de 30 de dezembro de 1991, o Decreto nº 517, de 8 de"
            " maio de 1992, a Lei nº 8.857, de 8 de março de 1994, e a Lei nº 8.210, de"
            " 19 de julho de 1991, e alterações posteriores, deve preencher este campo "
            "com “Sim”."
        ),
    )

    IND_PAIS_A_PAIS = fields.Char(
        string="Entidade Integrante de Grupo Multinacional",
        required=True,
        sped_length="1",
        help=(
            "Entidade Integrante de Grupo Multinacional: A pessoa jurídica é entidade "
            "integrante de grupo multinacional, nos termos da Instrução Normativa RFB "
            "nº 1.681/2016? S - Sim N – Não"
        ),
    )

    IND_DEREX = fields.Char(
        string="Declaração sobre utilização dos recursos",
        required=True,
        sped_length="1",
        help=(
            "Declaração sobre utilização dos recursos em moeda estrangeira decorrentes "
            "do recebimento de exportações (DEREX) S – Sim N – Não"
        ),
    )

    IND_PR_TRANSF = fields.Char(
        string="Opção pelas novas regras de preços",
        required=True,
        sped_length="1",
        help=(
            "Opção pelas novas regras de preços de transferência no ano-calendário 2023"
            " (Lei nº 14.956/2023): S – Sim N – Não"
        ),
    )


class Registro0021(models.AbstractModel):
    "Parâmetros de Identificação dos Tipos de Programa"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0021"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    IND_REPES = fields.Char(
        string="Regime Especial de Tributação para a Plataforma",
        sped_length="1",
        help=(
            "Regime Especial de Tributação para a Plataforma de Exportação de Serviços "
            "de Tecnologia da Informação (Repes): S - Sim N – Não"
        ),
    )

    IND_RECAP = fields.Char(
        string="Regime Especial de Aquisição de Bens de Capital",
        sped_length="1",
        help=(
            "Regime Especial de Aquisição de Bens de Capital para Empresas Exportadoras"
            " (Recap): S - Sim N – Não"
        ),
    )

    IND_PADIS = fields.Char(
        string="Programa de Apoio ao Desenvolvimento Tecnológico",
        sped_length="1",
        help=(
            "Programa de Apoio ao Desenvolvimento Tecnológico da Indústria de "
            "Semicondutores (Padis): S - Sim N – Não"
        ),
    )

    IND_REIDI = fields.Char(
        string="Regime Especial de Incentivos",
        sped_length="1",
        help=(
            "Regime Especial de Incentivos para o Desenvolvimento da Infraestrutura "
            "(Reidi): S - Sim N – Não"
        ),
    )

    IND_RECINE = fields.Char(
        string="Regime Especial de Tributação para Desenvolvimento",
        sped_length="1",
        help=(
            "Regime Especial de Tributação para Desenvolvimento da Atividade de "
            "Exibição Cinematográfica (Recine): S - Sim N – Não"
        ),
    )

    IND_RETID = fields.Char(
        string="Regime Especial Tributário para a Indústria",
        sped_length="1",
        help=(
            "Regime Especial Tributário para a Indústria de Defesa (Retid): S - Sim N –"
            " Não"
        ),
    )

    IND_OLEO_BUNKER = fields.Char(
        string="Regime de Suspensão de Óleo Bunker",
        sped_length="1",
        help="Regime de Suspensão de Óleo Bunker: S - Sim N – Não",
    )

    IND_REPORTO = fields.Char(
        string="Regime Tributário para o Incentivo",
        sped_length="1",
        help=(
            "Regime Tributário para o Incentivo à Modernização e à Ampliação da "
            "Estrutura Portuária (Reporto): S - Sim N – Não"
        ),
    )

    IND_RET_II = fields.Char(
        string="Regime Especial de Tributação Aplicável",
        sped_length="1",
        help=(
            "Regime Especial de Tributação Aplicável às Incorporações Imobiliárias "
            "Objeto de Patrimônio de Afetação (RET-II): S - Sim N – Não"
        ),
    )

    IND_RET_PMCMV = fields.Char(
        string="IND_RET_PMCMV",
        sped_length="1",
        help=(
            "Regime Especial de Tributação Aplicável às Construções de Unidades "
            "Habitacionais Contratadas no Âmbito do Programa Minha Casa, Minha Vida "
            "(RET-PMCMV): S - Sim N – Não"
        ),
    )

    IND_RET_EEI = fields.Char(
        string="IND_RET_EEI",
        sped_length="1",
        help=(
            "Regime Especial de Tributação Aplicável às Construções ou Reformas de "
            "Estabelecimentos de Educação Infantil (RET-EEI): S - Sim N – Não"
        ),
    )

    IND_EBAS = fields.Char(
        string="Entidade Beneficente de Assistência Social",
        sped_length="1",
        help="Entidade Beneficente de Assistência Social (EBAS): S - Sim N – Não",
    )

    IND_REPETRO_INDUSTRIALIZACAO = fields.Char(
        string="Regime Especial de Industrialização",
        sped_length="1",
        help=(
            "Regime Especial de Industrialização de Bens Destinados às Atividades de "
            "Exploração, de Desenvolvimento e de Produção de Petróleo, de Gás Natural e"
            " de Outros Hidrocarbonetos Fluidos (REPETRO-INDUSTRIALIZAÇÃO): S - Sim N –"
            " Não"
        ),
    )

    IND_REPETRO_NACIONAL = fields.Char(
        string="Regime Tributário e Aduaneiro Especial",
        sped_length="1",
        help=(
            "Regime Tributário e Aduaneiro Especial de Utilização Econômica de Bens "
            "Destinados às Atividades de Exploração, Desenvolvimento e Produção das "
            "Jazidas de Petróleo e de Gás Natural, na modalidade REPETRO-NACONAL: S - "
            "Sim N – Não"
        ),
    )

    IND_REPETRO_PERMANENTE = fields.Char(
        string="IND_REPETRO_PERMANENTE",
        sped_length="1",
        help=(
            "Regime Tributário e Aduaneiro Especial de Utilização Econômica de Bens "
            "Destinados às Atividades de Exploração, Desenvolvimento e Produção das "
            "Jazidas de Petróleo e de Gás Natural, na modalidade REPETRO-PERMANENTE: S "
            "- Sim N – Não"
        ),
    )

    IND_REPETRO_TEMPORARIO = fields.Char(
        string="IND_REPETRO_TEMPORARIO",
        sped_length="1",
        help=(
            "Regime Tributário e Aduaneiro Especial de Utilização Econômica de Bens "
            "Destinados às Atividades de Exploração, Desenvolvimento e Produção das "
            "Jazidas de Petróleo e de Gás Natural, na modalidade REPETRO-TEMPORARIO: S "
            "- Sim N – Não"
        ),
    )


class Registro0030(models.AbstractModel):
    "Dados Cadastrais"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    COD_NAT = fields.Char(
        string="Código da natureza jurídica",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
        help=(
            "Código da natureza jurídica, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas Sped/ECf/Sped"
            "Ecf/Recursos/Tabelas/SPEDECF_LOCAL$SPEDECF_NATUREZA_JURIDICA)."
        ),
    )

    CNAE_FISCAL = fields.Char(
        string="Código da atividade econômica",
        required=True,
        xsd_type="numeric_code",
        sped_length="7",
        help=(
            "Código da atividade econômica (CNAE-Fiscal), conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_LOCAL$SPEDECF_CNAE). Atenção: Se"
            " houver mais de uma atividade, indicar a de maior faturamento."
        ),
    )

    ENDERECO = fields.Char(
        string="Endereço da pessoa jurídica", required=True, sped_length="15"
    )

    NUM = fields.Char(string="Número", required=True, sped_length="6")

    COMPL = fields.Char(string="Complemento", sped_length="5")

    BAIRRO = fields.Char(string="Bairro/Distrito", required=True, sped_length="5")

    UF = fields.Char(
        string="UF",
        required=True,
        sped_length="2",
        help=(
            "UF, conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_GLOBAL$UF_SIG_NOM)."
        ),
    )

    COD_MUN = fields.Char(
        string="Código do Município",
        required=True,
        sped_length="7",
        help=(
            "Código do Município, conforme tabela do Sped (Disponibilizada no programa "
            "da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_GLOBAL$SPEDCONTABIL_MUNICIPIOS)."
        ),
    )

    CEP = fields.Char(
        string="Código de Endereçamento Postal (CEP)", required=True, sped_length="8"
    )

    NUM_TEL = fields.Char(
        string="DDD + Número do Telefone", xsd_type="numeric_code", sped_length="15"
    )

    EMAIL = fields.Char(string="Correio eletrônico", required=True, sped_length="115")


class Registro0035(models.AbstractModel):
    "Identificação das SCP"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0035"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    COD_SCP = fields.Char(
        string="CNPJ da SCP",
        required=True,
        sped_length="14",
        help=(
            "CNPJ da SCP (ANEXOS I e VIII, da Instrução Normativa RFB nº 2.119, de 08 "
            "de dezembro de 2022)."
        ),
    )

    NOME_SCP = fields.Char(string="Descrição da SCP")


class Registro0930(models.AbstractModel):
    "Identificação dos Signatários da ECF"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.0930"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    IDENT_NOM = fields.Char(string="Nome do Signatário", required=True)

    IDENT_CPF_CNPJ = fields.Char(
        string="CPF/CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="CPF (11) CNPJ(14)",
        help=(
            "CPF/CNPJ: O tamanho do campo deve ser exatamente o informado na coluna "
            "“Tamanho”."
        ),
    )

    IDENT_QUALIF = fields.Char(
        string="Código de qualificação do assinante",
        required=True,
        sped_length="3",
        help=(
            "Código de qualificação do assinante, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_LOCAL$SPEDECF_QUALIF_ASSINANTE)."
        ),
    )

    IND_CRC = fields.Char(
        string="Número de inscrição do contabilista",
        help=(
            "Número de inscrição do contabilista no Conselho Regional de Contabilidade."
        ),
    )

    EMAIL = fields.Char(string="E-mail do signatário", required=True, sped_length="6")

    FONE = fields.Char(
        string="DDD e telefone do signatário", required=True, sped_length="14"
    )


class RegistroE010(models.AbstractModel):
    "Saldos Finais Recuperados da ECF Anterior"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.e010"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    COD_NAT = fields.Char(string="Natureza da Conta", required=True, sped_length="4")

    COD_CTA_REF = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help="Código da Conta Referencial (Analíticas e Sintéticas).",
    )

    DESC_CTA_REF = fields.Char(string="Descrição da Conta Referencial", required=True)

    VAL_CTA_REF = fields.Char(
        string="Valor Total da Conta Referencial", required=True, sped_length="19"
    )

    IND_VAL_CTA_REF = fields.Char(
        string="Indicador do Valor Total da Conta Referencial",
        required=True,
        sped_length="1",
        help="Indicador do Valor Total da Conta Referencial: C – Credor D – Devedor",
    )

    reg_E015_ids = fields.One2many(
        "l10n_br_sped.ecf.e015",
        "reg_E015_ids_RegistroE010_id",
        string="E015 Contas Contábeis Mapeadas",
        sped_card="[0;N]",
        sped_required=True,
    )


class RegistroE015(models.AbstractModel):
    "Contas Contábeis Mapeadas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.e015"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(
        string="Código da Conta Contábil Analítica",
        required=True,
        help="Código da Conta Contábil Analítica (K155).",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    DESC_CTA = fields.Char(string="Descrição da Conta", required=True)

    VAL_CTA = fields.Monetary(
        string="Saldo Final da Conta",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo Final da Conta: Saldo final da conta do registro K156 do último "
            "período da ECF imediatamente anterior, referente a conta contábil e centro"
            " de custos identificados no registro K155 pai."
        ),
    )

    IND_VAL_CTA = fields.Char(
        string="Indicador do Saldo Final da Conta",
        required=True,
        sped_length="1",
        help="Indicador do Saldo Final da Conta: C – Credor D – Devedor",
    )

    reg_E015_ids_RegistroE010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.e010",
        string="Saldos Finais Recuperados da ECF Anterior",
        required=True,
        ondelete="cascade",
    )


class RegistroE020(models.AbstractModel):
    """Saldos Finais das Contas da Parte B do e-Lalur da ECF Imediatamente
    Anterior"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.e020"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    COD_CTA_B = fields.Char(
        string="Código da Conta da Parte B",
        required=True,
        help=(
            "Código da Conta da Parte B: Código unívoco atribuído pela empresa à conta "
            "no e-Lalur."
        ),
    )

    DESC_CTA_LAL = fields.Char(string="Descrição da Conta")

    DT_AP_LAL = fields.Date(
        string="Data de Criação",
        sped_length="8",
        help=(
            "Data de Criação: Data final do período de apuração em que a conta foi "
            "criada."
        ),
    )

    DT_LIM_LAL = fields.Date(
        string="Data Limite para a Exclusão",
        sped_length="8",
        help=(
            "Data Limite para a Exclusão, Adição ou Compensação do Valor Controlado, se"
            " houver."
        ),
    )

    TRIBUTO = fields.Char(
        string="Indicador de Tributo da Adição/Exclusão",
        sped_length="1",
        help=(
            "Indicador de Tributo da Adição/Exclusão: I – Imposto de Renda Pessoa "
            "Jurídica C – Contribuição Social sobre o Lucro Líquido A – Ambos (IRPJ e "
            "CSLL)"
        ),
    )

    VL_SALDO_FIN = fields.Monetary(
        string="Saldo Final do Período Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SALDO_FIN = fields.Char(
        string="Indicador de Saldo Final do Período Anterior",
        sped_length="1",
        help=(
            "Indicador de Saldo Final do Período Anterior: D – Para prejuízos ou "
            "valores que reduzam o lucro real ou a base de cálculo da contribuição "
            "social em períodos subsequentes. C – Para valores que aumentam o lucro "
            "real ou a base de cálculo na contribuição social em períodos subsequentes."
        ),
    )

    COD_PB_RFB = fields.Char(
        string="Código da tabela padrão da Parte B", required=True, sped_length="6"
    )


class RegistroE030(models.AbstractModel):
    "Identificação do Período"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.e030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="I R S Período de Apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "I R S Período de Apuração [para 0010.FORMA_APUR = “A”]: A00 – Anual A01 – "
            "Rec. Bruta de janeiro /Balanço suspensão redução até janeiro A02 – Rec. "
            "Bruta de fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. Bruta de "
            "abril /Balanço suspensão redução até abril A05 – Rec. Bruta de maio "
            "/Balanço suspensão redução até maio A06 – Rec. Bruta de junho /Balanço "
            "suspensão redução até junho A07 – Rec. Bruta de julho /Balanço suspensão "
            "redução até julho A08 – Rec. Bruta de agosto /Balanço suspensão redução "
            "até agosto A09 – Rec. Bruta de setembro /Balanço suspensão redução até "
            "setembro A10 – Rec. Bruta de outubro/Balanço suspensão redução até outubro"
            " A11 – Rec. Bruta de novembro /Balanço suspensão redução até novembro A12 "
            "– Rec. Bruta de dezembro/Balanço suspensão redução até dezembro ndicador "
            "do período de referência [para 0010.FORMA_APUR = “T” OU (0010.FORMA_APUR ="
            " “A” E 0010.FORMA_TRIB = “2”)]: T01 – 1º Trimestre T02 – 2º Trimestre T03 "
            "– 3º Trimestre T04 – 4º Trimestre Regra: O período deve estar compreendido"
            " entre a data início e data fim da escrituração. egra: SE 0010.FORMA_APUR "
            "= “A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] como “B” E "
            "0010.FORMA_APUR = “T” - Deve existir um registro [T01..T04] para cada "
            "trimestre marcado no 0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_E155_ids = fields.One2many(
        "l10n_br_sped.ecf.e155",
        "reg_E155_ids_RegistroE030_id",
        string="E155 Detalhes dos Saldos Contábeis Calculados",
        sped_card="[0;N]",
        sped_required=True,
        help="E155 Detalhes dos Saldos Contábeis Calculados com Base nas ECD",
    )

    reg_E355_ids = fields.One2many(
        "l10n_br_sped.ecf.e355",
        "reg_E355_ids_RegistroE030_id",
        string="E355 Detalhes dos Saldos das Contas",
        sped_card="[0;N]",
        sped_required=True,
        help=("E355 Detalhes dos Saldos das Contas de Resultado Antes do Encerramento"),
    )


class RegistroE155(models.AbstractModel):
    "Detalhes dos Saldos Contábeis Calculados com Base nas ECD"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.e155"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(string="Código da Conta Analítica", required=True)

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_INI = fields.Monetary(
        string="Valor do Saldo Inicial do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_INI = fields.Char(
        string="Indicador da Situação do Saldo Inicial",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Inicial: D – Devedor C – Credor",
    )

    VL_DEB = fields.Monetary(
        string="Valor Total dos Débitos no Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor Total dos Créditos no Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_E155_ids_RegistroE030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.e030",
        string="Identificação do Período",
        required=True,
        ondelete="cascade",
    )


class RegistroE355(models.AbstractModel):
    "Detalhes dos Saldos das Contas de Resultado Antes do Encerramento"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.e355"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(
        string="Código da Conta Analítica de Resultado", required=True
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final Antes do Lançamento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do Saldo Final Antes do Lançamento de Encerramento.",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor. C – Credor.",
    )

    reg_E355_ids_RegistroE030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.e030",
        string="Identificação do Período",
        required=True,
        ondelete="cascade",
    )


class RegistroJ050(models.AbstractModel):
    "Plano de Contas do Contribuinte"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.j050"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_ALT = fields.Date(
        string="Data de Atualização",
        required=True,
        sped_length="8",
        help="Data de Atualização (inclusão/ alteração).",
    )

    COD_NAT = fields.Char(
        string="Código da Natureza da Conta Analítica ou Sintética",
        required=True,
        sped_length="2",
        help=(
            "Código da Natureza da Conta Analítica ou Sintética: 01 – Contas do Ativo "
            "02 – Contas do Passivo 03 – Contas do Patrimônio Líquido 04 – Contas de "
            "Resultado 05 – Contas de Compensação 09 – Outras"
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do Tipo de Conta: S",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Tipo de Conta: S - Sintética (grupo de contas) A - Analítica "
            "(conta)"
        ),
    )

    NIVEL = fields.Integer(
        string="Nível da Conta Analítica/Sintética",
        required=True,
        help=(
            "Nível da Conta Analítica/Sintética: Número crescente a partir da conta de "
            "menor detalhamento. Deve ser acrescido de “1” a cada mudança de nível. "
            "Exemplo: Nível 1 = Ativo Nível 2 = Ativo Circulante Nível 3 = Disponível "
            "Nível 4 = Caixa Geral Nível 5 = Caixa"
        ),
    )

    COD_CTA = fields.Char(string="Código da Conta Analítica/Sintética", required=True)

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    CTA = fields.Char(string="Nome da Conta Analítica", required=True)

    reg_J051_ids = fields.One2many(
        "l10n_br_sped.ecf.j051",
        "reg_J051_ids_RegistroJ050_id",
        string="J051 Plano de Contas Referencial",
        sped_card="Se J050.IND_CTA = “A” [1:N] Senão [0]",
        sped_required=True,
    )

    reg_J053_ids = fields.One2many(
        "l10n_br_sped.ecf.j053",
        "reg_J053_ids_RegistroJ050_id",
        string="J053 Subcontas Correlatas",
        sped_card="[0;N]",
        sped_required=True,
    )


class RegistroJ051(models.AbstractModel):
    "Plano de Contas Referencial"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.j051"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    COD_CTA_REF = fields.Char(
        string="Código da Conta no Plano",
        required=True,
        help=(
            "Código da Conta no Plano de Contas Referencial Definido em "
            "0010.COD_QUALIF_PJ, conforme tabela publicada no Sped."
        ),
    )

    reg_J051_ids_RegistroJ050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.j050",
        string="Plano de Contas do Contribuinte",
        required=True,
        ondelete="cascade",
    )


class RegistroJ053(models.AbstractModel):
    "Subcontas Correlatas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.j053"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_IDT = fields.Char(
        string="Código de Identificação do Grupo Formado",
        required=True,
        sped_length="6",
        help=(
            "Código de Identificação do Grupo Formado por Conta-Subconta(s). (Criado "
            "pela pessoa jurídica)."
        ),
    )

    COD_CNT_CORR = fields.Char(
        string="Código da Subconta Correlata",
        required=True,
        help=(
            "Código da Subconta Correlata. (Deve estar no plano de contas e só pode "
            "estar relacionada a um único grupo)"
        ),
    )

    NAT_SUB_CNT = fields.Char(
        string="Natureza da Subconta Correlata",
        required=True,
        sped_length="2",
        help=(
            "Natureza da Subconta Correlata. (Conforme tabela de natureza da subconta )"
        ),
    )

    reg_J053_ids_RegistroJ050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.j050",
        string="Plano de Contas do Contribuinte",
        required=True,
        ondelete="cascade",
    )


class RegistroJ100(models.AbstractModel):
    "Centro de Custos"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.j100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_ALT = fields.Date(
        string="Data da Inclusão/Alteração", required=True, sped_length="8"
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", required=True)

    CCUS = fields.Char(string="Nome do Centro de Custos", required=True)


class RegistroK030(models.AbstractModel):
    """Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no
    Ano-Calendário"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="I P Período de Apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "I P Período de Apuração [para 0010.FORMA_APUR = “A” ou (0010.FORMA_APUR_I "
            "= “A” OU 0010.APUR_CSLL = “A” E 0010.TIP_ESC_PRE = “C”)]: A00 – Anual A01 "
            "– Rec. Bruta de janeiro /Balanço suspensão redução até janeiro A02 – Rec. "
            "Bruta de fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. Bruta de "
            "abril /Balanço suspensão redução até abril A05 – Rec. Bruta de maio "
            "/Balanço suspensão redução até maio A06 – Rec. Bruta de junho /Balanço "
            "suspensão redução até junho A07 – Rec. Bruta de julho /Balanço suspensão "
            "redução até julho A08 – Rec. Bruta de agosto /Balanço suspensão redução "
            "até agosto A09 – Rec. Bruta de setembro /Balanço suspensão redução até "
            "setembro A10 – Rec. Bruta de outubro/Balanço suspensão redução até outubro"
            " A11 – Rec. Bruta de novembro /Balanço suspensão redução até novembro A12 "
            "– Rec. Bruta de dezembro/Balanço suspensão redução até dezembro ndicador "
            "do período de referência [para 0010.FORMA_APUR = “T” OU (0010.FORMA_APUR ="
            " “A” E 0010.FORMA_TRIB = “2”) ou (0010.FORMA_APUR_I = “T” OU "
            "0010.APUR_CSLL = “T” E 0010.TIP_ESC_PRE = “C”)]: T01 – 1º Trimestre T02 – "
            "2º Trimestre T03 – 3º Trimestre T04 – 4º Trimestre Regra: O período deve "
            "estar compreendido entre a data início e data fim da escrituração. eríodo "
            "de Apuração [para 0010.FORMA_APUR_I = “D” OU 0010.APUR_CSLL = “D” E "
            "0010.TIP_ESC_PRE = “C”)]: A00 – Anual"
        ),
    )

    reg_K155_ids = fields.One2many(
        "l10n_br_sped.ecf.k155",
        "reg_K155_ids_RegistroK030_id",
        string="K155 Detalhes dos Saldos Contábeis",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "K155 Detalhes dos Saldos Contábeis (Depois do Encerramento do Resultado do"
            " Período)"
        ),
    )

    reg_K355_ids = fields.One2many(
        "l10n_br_sped.ecf.k355",
        "reg_K355_ids_RegistroK030_id",
        string="K355 Saldos Finais das Contas Contábeis",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "K355 Saldos Finais das Contas Contábeis de Resultado Antes do Encerramento"
        ),
    )


class RegistroK155(models.AbstractModel):
    """Detalhes dos Saldos Contábeis (Depois do Encerramento do Resultado do
    Período)"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k155"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(string="Código da Conta Analítica Patrimonial", required=True)

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_INI = fields.Monetary(
        string="Valor do Saldo Inicial do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_INI = fields.Char(
        string="Indicador da Situação do Saldo Inicial",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Inicial: D – Devedor C – Credor",
    )

    VL_DEB = fields.Monetary(
        string="Valor Total dos Débitos no Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor Total dos Créditos no Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_K155_ids_RegistroK030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.k030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-"
            "Calendário"
        ),
    )

    reg_K156_ids = fields.One2many(
        "l10n_br_sped.ecf.k156",
        "reg_K156_ids_RegistroK155_id",
        string="K156 Mapeamento Referencial do Saldo",
        sped_card="[0;N]",
        sped_required=True,
    )


class RegistroK156(models.AbstractModel):
    "Mapeamento Referencial do Saldo"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k156"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    COD_CTA_REF = fields.Char(
        string="Código da Conta no Plano de Contas Referencial",
        required=True,
        help=(
            "Código da Conta no Plano de Contas Referencial, conforme tabela do Sped. "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SLD_INI = fields.Monetary(
        string="Valor do Saldo Inicial do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_INI = fields.Char(
        string="Indicador da Situação do Saldo Inicial",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Inicial: D – Devedor C – Credor",
    )

    VL_DEB = fields.Monetary(
        string="Valor Total dos Débitos no Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor Total dos Créditos no Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_K156_ids_RegistroK155_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.k155",
        string="Detalhes dos Saldos Contábeis",
        required=True,
        ondelete="cascade",
        help=(
            "Detalhes dos Saldos Contábeis (Depois do Encerramento do Resultado do "
            "Período)"
        ),
    )


class RegistroK355(models.AbstractModel):
    """Saldos Finais das Contas Contábeis de Resultado Antes do Encerramento"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k355"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(
        string="Código da Conta Analítica de Resultado", required=True
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final Antes do Lançamento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do Saldo Final Antes do Lançamento de Encerramento.",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor. C – Credor.",
    )

    reg_K355_ids_RegistroK030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.k030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-"
            "Calendário"
        ),
    )

    reg_K356_ids = fields.One2many(
        "l10n_br_sped.ecf.k356",
        "reg_K356_ids_RegistroK355_id",
        string="K356 Mapeamento Referencial dos Saldos Finais",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "K356 Mapeamento Referencial dos Saldos Finais das Contas de Resultado "
            "Antes do Encerramento"
        ),
    )


class RegistroK356(models.AbstractModel):
    """Mapeamento Referencial dos Saldos Finais das Contas de Resultado Antes
    do Encerramento"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k356"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    COD_CTA_REF = fields.Char(
        string="Código da Conta no Plano de Contas Referencial",
        required=True,
        help=(
            "Código da Conta no Plano de Contas Referencial, conforme tabela do Sped. "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final Antes do Lançamento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do Saldo Final Antes do Lançamento de Encerramento.",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_K356_ids_RegistroK355_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.k355",
        string="Saldos Finais das Contas Contábeis",
        required=True,
        ondelete="cascade",
        help="Saldos Finais das Contas Contábeis de Resultado Antes do Encerramento",
    )


class RegistroK915(models.AbstractModel):
    "Justificativa para Divergência nas Contas Patrimoniais"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k915"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    PER_APUR = fields.Char(
        string="Período de Apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "Período de Apuração [para 0010.FORMA_APUR = “A” ou (0010.FORMA_APUR_I = "
            "“A” OU 0010.APUR_CSLL = “A” E 0010.TIP_ESC_PRE = “C”)]: A00 – Anual A01 – "
            "Rec. Bruta de janeiro /Balanço suspensão redução até janeiro A02 – Rec. "
            "Bruta de fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. Bruta de "
            "abril /Balanço suspensão redução até abril A05 – Rec. Bruta de maio "
            "/Balanço suspensão redução até maio A06 – Rec. Bruta de junho /Balanço "
            "suspensão redução até junho A07 – Rec. Bruta de julho /Balanço suspensão "
            "redução até julho A08 – Rec. Bruta de agosto /Balanço suspensão redução "
            "até agosto A09 – Rec. Bruta de setembro /Balanço suspensão redução até "
            "setembro A10 – Rec. Bruta de outubro/Balanço suspensão redução até outubro"
            " A11 – Rec. Bruta de novembro /Balanço suspensão redução até novembro A12 "
            "– Rec. Bruta de dezembro/Balanço suspensão redução até dezembro"
        ),
    )

    COD_CTA = fields.Char(string="Código da conta contábil", required=True)

    COD_CCUS = fields.Char(string="Código do centro de custos")

    ID_REGRA = fields.Char(
        string="Identificação da regra que foi descumprida",
        required=True,
        help=(
            "Identificação da regra que foi descumprida. O sistema deverá preencher com"
            " as seguintes regras: REGRA_COMPATIBILIDADE_K155_E155: (Verifica se os "
            "valores utilizados no registro K155 são iguais aos valores calculados do "
            "registro E155.) ou REGRA_COMPATIBILIDADE_E155_K155: Verifica se os campos "
            "do registro E155 com algum valor maior que zero, são referenciados no "
            "registro K155 para o mesmo período de apuração."
        ),
    )

    VL_SLD_INI_ESP = fields.Monetary(
        string="Valor do saldo inicial recuperado da ECD",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo inicial recuperado da ECD para o período fiscal. Este campo"
            " será calculado automaticamente pelo PGE da ECF durante a validação do "
            "arquivo da ECF."
        ),
    )

    IND_VL_SLD_INI_ESP = fields.Char(
        string="Indicador de situação do saldo inicial esperado",
        sped_length="1",
        help=(
            "Indicador de situação do saldo inicial esperado: D – Devedor; e C – "
            "Credor. Este campo será calculado automaticamente pelo PGE da ECF durante "
            "a validação do arquivo da ECF."
        ),
    )

    VL_DEB_ESP = fields.Monetary(
        string="Valor total de débitos recuperado da ECD",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de débitos recuperado da ECD para o período fiscal. Este campo"
            " será calculado automaticamente pelo PGE da ECF durante a validação do "
            "arquivo da ECF."
        ),
    )

    VL_CRED_ESP = fields.Monetary(
        string="Valor total de créditos recuperado da ECD",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de créditos recuperado da ECD para o período fiscal. Este "
            "campo será calculado automaticamente pelo PGE da ECF durante a validação "
            "do arquivo da ECF."
        ),
    )

    VL_SLD_FIN_ESP = fields.Monetary(
        string="Valor do saldo final recuperado da ECD",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final recuperado da ECD para o período fiscal. Este campo "
            "será calculado automaticamente pelo PGE da ECF durante a validação do "
            "arquivo da ECF."
        ),
    )

    IND_VL_SLD_FIN_ESP = fields.Char(
        string="Indicador de situação do saldo final esperado",
        sped_length="1",
        help=(
            "Indicador de situação do saldo final esperado: D – Devedor; e C – Credor. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante a "
            "validação do arquivo da ECF."
        ),
    )

    SLD_INI_PRE = fields.Float(
        string="Saldo inicial preenchido no registro K155",
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SLD_INI_PRE = fields.Char(
        string="Indicador de situação do saldo inicial preenchido",
        sped_length="1",
        help=(
            "Indicador de situação do saldo inicial preenchido no registro K155: D – "
            "Devedor; e C – Credor."
        ),
    )

    VL_DEB_PRE = fields.Monetary(
        string="Valor total dos débitos preenchido",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total dos débitos preenchido no registro K155.",
    )

    VL_CRED_PRE = fields.Monetary(
        string="Valor total dos créditos preenchido",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total dos créditos preenchido no registro K155.",
    )

    SLD_FIN_PRE = fields.Float(
        string="Saldo final preenchido no registro K155",
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SLD_FIN_PRE = fields.Char(
        string="Indicador de situação do saldo final preenchido",
        sped_length="1",
        help=(
            "Indicador de situação do saldo final preenchido no registro K155: D – "
            "Devedor; e C – Credor."
        ),
    )

    JUSTIFICATIVA = fields.Char(
        string="Justificativa da divergência",
        required=True,
        sped_length="5",
        help=(
            "Justificativa da divergência entre o(s) valor(es) calculado(s) pelo PGE da"
            " ECF e o(s) valor(es) preenchido(s)."
        ),
    )


class RegistroK935(models.AbstractModel):
    "Justificativa para Divergência nas Contas de Resultado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.k935"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    PER_APUR = fields.Char(
        string="Período de Apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "Período de Apuração [para 0010.FORMA_APUR = “A” ou (0010.FORMA_APUR_I = "
            "“A” OU 0010.APUR_CSLL = “A” E 0010.TIP_ESC_PRE = “C”)]: A00 – Anual A01 – "
            "Rec. Bruta de janeiro /Balanço suspensão redução até janeiro A02 – Rec. "
            "Bruta de fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. Bruta de "
            "abril /Balanço suspensão redução até abril A05 – Rec. Bruta de maio "
            "/Balanço suspensão redução até maio A06 – Rec. Bruta de junho /Balanço "
            "suspensão redução até junho A07 – Rec. Bruta de julho /Balanço suspensão "
            "redução até julho A08 – Rec. Bruta de agosto /Balanço suspensão redução "
            "até agosto A09 – Rec. Bruta de setembro /Balanço suspensão redução até "
            "setembro A10 – Rec. Bruta de outubro/Balanço suspensão redução até outubro"
            " A11 – Rec. Bruta de novembro /Balanço suspensão redução até novembro A12 "
            "– Rec. Bruta de dezembro/Balanço suspensão redução até dezembro"
        ),
    )

    COD_CTA = fields.Char(string="Código da conta contábil", required=True)

    COD_CCUS = fields.Char(string="Código do centro de custos")

    ID_REGRA = fields.Char(
        string="R Identificação da regra que foi descumprida",
        required=True,
        help=(
            "R Identificação da regra que foi descumprida. O sistema deverá preencher "
            "com as seguintes regras: EGRA_COMPATIBILIDADE_K355_E355: Verifica se os "
            "valores utilizados no registro K355 são iguais aos valores calculados do "
            "registro E355. ou REGRA_COMPATIBILIDADE_E355_K355: Verifica se os campos "
            "do registro E355 com algum valor maior que zero, são referenciados no "
            "registro K355 para o mesmo período de apuração."
        ),
    )

    VL_SLD_FIN_ESP = fields.Monetary(
        string="Valor do saldo final recuperado da ECD",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final recuperado da ECD para o período fiscal. Este campo "
            "será calculado automaticamente pelo PGE da ECF durante a validação do "
            "arquivo da ECF."
        ),
    )

    IND_VL_SLD_FIN_ESP = fields.Char(
        string="Indicador de situação do saldo final esperado",
        sped_length="1",
        help=(
            "Indicador de situação do saldo final esperado: D – Devedor; e C – Credor. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante a "
            "validação do arquivo da ECF."
        ),
    )

    SLD_FIN_PRE = fields.Float(
        string="Saldo final preenchido no registro K355",
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SLD_FIN_PRE = fields.Char(
        string="Indicador de situação do saldo final preenchido",
        sped_length="1",
        help=(
            "Indicador de situação do saldo final preenchido no registro K355: D – "
            "Devedor; e C – Credor."
        ),
    )

    JUSTIFICATIVA = fields.Char(
        string="Justificativa da divergência",
        required=True,
        sped_length="5",
        help=(
            "Justificativa da divergência entre o(s) valor(es) calculado(s) pelo PGE da"
            " ECF e o(s) valor(es) preenchido(s)."
        ),
    )


class RegistroL030(models.AbstractModel):
    """Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no
    Ano-Calendário"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.l030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="Período de apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "Período de apuração [para 0010.FORMA_APUR = “A”]: A00 – Receita Bruta/ "
            "Balanço de Suspensão e Redução Anual A01 – Balanço de Suspensão e Redução "
            "até Janeiro A02 – Balanço de Suspensão e Redução até Fevereiro A03 – "
            "Balanço de Suspensão e Redução até Março A04 – Balanço de Suspensão e "
            "Redução até Abril A05 – Balanço de Suspensão e Redução até Maio A06 – "
            "Balanço de Suspensão e Redução até Junho A07 – Balanço de Suspensão e "
            "Redução até Julho A08 – Balanço de Suspensão e Redução até Agosto A09 – "
            "Balanço de Suspensão e Redução até Setembro A10 – Balanço de Suspensão e "
            "Redução até Outubro A11 – Balanço de Suspensão e Redução até Novembro A12 "
            "– Balanço de Suspensão e Redução até Dezembro Indicador do período de "
            "referência [para 0010.FORMA_APUR = “T” OU (0010.FORMA_APUR = “A” E "
            "0010.FORMA_TRIB = “2”)]: T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º "
            "Trimestre T04 – 4º Trimestre Regra: O período deve estar compreendido "
            "entre a data início e data fim da escrituração. Regra: SE 0010.FORMA_APUR "
            "= “A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] como “B” SE "
            "0010.FORMA_APUR = “T” - Deve existir um registro [T01..T04] para cada "
            "trimestre marcado no 0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_L100_ids = fields.One2many(
        "l10n_br_sped.ecf.l100",
        "reg_L100_ids_RegistroL030_id",
        string="L100 Balanço Patrimonial",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_L200_ids = fields.One2many(
        "l10n_br_sped.ecf.l200",
        "reg_L200_ids_RegistroL030_id",
        string="L200 Método de Avaliação do Estoque Final",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_L210_ids = fields.One2many(
        "l10n_br_sped.ecf.l210",
        "reg_L210_ids_RegistroL030_id",
        string="L210 Informativo da Composição de Custos",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_L300_ids = fields.One2many(
        "l10n_br_sped.ecf.l300",
        "reg_L300_ids_RegistroL030_id",
        string="L300 Demonstração do Resultado Líquido",
        sped_card="[0;N]",
        sped_required=True,
        help="L300 Demonstração do Resultado Líquido no Período Fiscal",
    )


class RegistroL100(models.AbstractModel):
    "Balanço Patrimonial"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.l100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        sped_length="5",
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme tabela "
            "dinâmica do Sped (Disponibilizada no item II deste registro e no programa "
            "da ECF, no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta",
        required=True,
        sped_length="1",
        help="Indicador do Tipo de Conta: S – Sintética A – Analítica",
    )

    NIVEL = fields.Char(
        string="Nível da Conta", xsd_type="numeric_code", sped_length="3"
    )

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        sped_length="2",
        help=(
            "Natureza da Conta, conforme tabela do Sped (Disponibilizada no programa da"
            " ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    VAL_CTA_REF_INI = fields.Monetary(
        string="Saldo Inicial da Conta Referencial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_CTA_REF_INI = fields.Char(
        string="Indicador da Situação do Saldo Inicial",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Inicial: D – Devedor C – Credor",
    )

    VAL_CTA_REF_DEB = fields.Monetary(
        string="Valor Total dos Débitos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total dos Débitos: Somatório dos valores mapeados.",
    )

    VAL_CTA_REF_CRED = fields.Monetary(
        string="Valor Total dos Créditos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total dos Créditos: Somatório dos valores mapeados.",
    )

    VAL_CTA_REF_FIN = fields.Char(
        string="Saldo Final da Conta Referencial", required=True, sped_length="19"
    )

    IND_VAL_CTA_REF_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_L100_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.l030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-"
            "Calendário"
        ),
    )


class RegistroL200(models.AbstractModel):
    "Método de Avaliação do Estoque Final"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.l200"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    IND_AVAL_ESTOQ = fields.Char(
        string="Método de Avaliação do Estoque Final",
        required=True,
        sped_length="1",
        help=(
            "Método de Avaliação do Estoque Final: 1 – Custo Médio Ponderado 2 – PEPS "
            "(Primeiro que entra, primeiro que sai) 3 – Arbitramento - art. 308, Inc. I"
            " e II, do RIR/2018 4 – Custo Específico 5 – Valor Realizável Líquido 6 – "
            "Inventário Periódico 7 – Outros 8 – Não há (Exemplo: Empresas Prestadoras "
            "de Serviços)"
        ),
    )

    reg_L200_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.l030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-"
            "Calendário"
        ),
    )


class RegistroL210(models.AbstractModel):
    "Informativo da Composição de Custos"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.l210"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta de Custos",
        required=True,
        help=(
            "Código da Conta de Custos (Analítica), conforme tabela dinâmica do Sped."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta de Custos")

    VALOR = fields.Char(
        string="Saldo Final da Conta de Custos Antes",
        help="Saldo Final da Conta de Custos Antes do Encerramento.",
    )

    reg_L210_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.l030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-"
            "Calendário"
        ),
    )


class RegistroL300(models.AbstractModel):
    "Demonstração do Resultado Líquido no Período Fiscal"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.l300"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        sped_length="5",
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme tabela "
            "dinâmica do Sped (Disponibilizada no item III deste registro e no programa"
            " da ECF, no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta",
        required=True,
        sped_length="1",
        help="Indicador do Tipo de Conta: S – Sintética A – Analítica",
    )

    NIVEL = fields.Char(
        string="Nível da Conta", xsd_type="numeric_code", sped_length="3"
    )

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        sped_length="2",
        help="Natureza da Conta: 04 – Contas de Resultado",
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    VALOR = fields.Monetary(
        string="Saldo Final da Conta Referencial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do Sinal do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador do Sinal do Saldo Final: C – Credor D – Devedor",
    )

    reg_L300_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.l030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-"
            "Calendário"
        ),
    )


class RegistroM010(models.AbstractModel):
    "Identificação da Conta na Parte B e-Lalur e do e-Lacs"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m010"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    COD_CTA_B = fields.Char(
        string="Código Unívoco Atribuído pela Pessoa Jurídica",
        required=True,
        help="Código Unívoco Atribuído pela Pessoa Jurídica à Conta no e-Lalur",
    )

    DESC_CTA_LAL = fields.Char(string="Descrição da Conta", required=True)

    DT_AP_LAL = fields.Date(
        string="Data Final",
        required=True,
        sped_length="8",
        help=(
            "Data Final: Data final do período de apuração em que a conta foi criada."
        ),
    )

    COD_PB_RFB = fields.Char(
        string="O Código da tabela padrão da Parte B",
        required=True,
        sped_length="6",
        help=(
            "O Código da tabela padrão da Parte B. Vide planilha PARTEB_PADRAO do "
            "arquivo “Tabelas_Dinamicas_ECF_Leiaute_11_AC2024_SIT_ESP_2025.xlsx” a "
            "partir do link http://sped.rfb.gov.br/pasta/show/1644. s relacionamentos "
            "possíveis das contas padrão da Parte B do e-Lalur e do e-Lacs com as "
            "linhas da Parte A constam da planilha PARTEB_PARTEA do mesmo arquivo."
        ),
    )

    DT_LIM_LAL = fields.Date(
        string="Data Limite",
        sped_length="8",
        help=(
            "Data Limite: Data limite para a exclusão, adição ou compensação do valor "
            "controlado, se houver."
        ),
    )

    COD_TRIBUTO = fields.Char(
        string="Indicador do Tributo da Adição/Exclusão",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Tributo da Adição/Exclusão: I – Imposto de Renda Pessoa "
            "Jurídica C – Contribuição Social sobre o Lucro Líquido;"
        ),
    )

    VL_SALDO_INI = fields.Monetary(
        string="Saldo Inicial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo Inicial: Saldo no período inicial desta escrituração. Se "
            "M010.DT_AP_LAL for no período da escrituração, então o valor deve ser zero"
        ),
    )

    IND_VL_SALDO_INI = fields.Char(
        string="Indicador do Saldo Inicial",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Saldo Inicial: D – Para prejuízos ou valores que reduzam o "
            "lucro real ou a base de cálculo da contribuição social em períodos "
            "subsequentes. C – Para valores que aumentem o lucro real ou a base de "
            "cálculo da contribuição social em períodos subsequentes."
        ),
    )

    CNPJ_SIT_ESP = fields.Char(
        string="E CNPJ da outra pessoa jurídica relacionada",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "E CNPJ da outra pessoa jurídica relacionada com evento originário da "
            "conta. xemplos: 1- Identificar a investida no caso de valores "
            "(ganhos/perdas no novo AVJ) da participação societária anterior, nos caso "
            "de aquisições em estágios. 2- Identificar a investida no caso de "
            "amortização de mais-valia e menos-valia. 3- Identificar a investida no "
            "caso de impairment de goodwill, mais-valia e menos-valia. 4- Identificar a"
            " investida no caso de ganho por compra vantajosa. 5- Identificar a "
            "investida no caso registro do ágio gerado na aquisição de participação "
            "societária ocorrida até 31/12/2009. 6 - Identificar a investida no caso de"
            " ágio gerado pela sistemática de transição disciplinada no art. 65, Lei Nº"
            " 12.973/14. 7 - Identificar a pessoa jurídica antecessora no caso de conta"
            " incorporada devido a evento societário."
        ),
    )


class RegistroM030(models.AbstractModel):
    """Identificação do Período e Forma de Apuração do IRPJ e da CSLL das
    Empresas Tributadas pelo Lucro Real"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="I S Período de apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "I S Período de apuração [para 0010.FORMA_APUR = “A”]: A00 – Receita Bruta/"
            " Balanço de Suspensão e Redução Anual A01 – Balanço de Suspensão e Redução"
            " até Janeiro A02 – Balanço de Suspensão e Redução até Fevereiro A03 – "
            "Balanço de Suspensão e Redução até Março A04 – Balanço de Suspensão e "
            "Redução até Abril A05 – Balanço de Suspensão e Redução até Maio A06 – "
            "Balanço de Suspensão e Redução até Junho A07 – Balanço de Suspensão e "
            "Redução até Julho A08 – Balanço de Suspensão e Redução até Agosto A09 – "
            "Balanço de Suspensão e Redução até Setembro A10 – Balanço de Suspensão e "
            "Redução até Outubro A11 – Balanço de Suspensão e Redução até Novembro A12 "
            "– Balanço de Suspensão e Redução até Dezembro ndicador do período de "
            "referência [para 0010.FORMA_APUR = “T” OU (0010.FORMA_APUR = “A” E "
            "0010.FORMA_TRIB = “2”)]: T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º "
            "Trimestre T04 – 4º Trimestre Regra: O período deve estar compreendido "
            "entre a data início e data fim da escrituração. Regra: SE 0010.FORMA_APUR "
            "= “A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] como “B” E "
            "0010.FORMA_APUR = “T” - Deve existir um registro [T01..T04] para cada "
            "trimestre marcado no 0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_M300_ids = fields.One2many(
        "l10n_br_sped.ecf.m300",
        "reg_M300_ids_RegistroM030_id",
        string="M300 Demonstração do Lucro Real",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_M350_ids = fields.One2many(
        "l10n_br_sped.ecf.m350",
        "reg_M350_ids_RegistroM030_id",
        string="M350 Demonstração da Base de Cálculo da CSLL",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_M410_ids = fields.One2many(
        "l10n_br_sped.ecf.m410",
        "reg_M410_ids_RegistroM030_id",
        string="M410 Lançamentos na Conta da Parte B do e-Lalur",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "M410 Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem Reflexo "
            "na Parte A"
        ),
    )

    reg_M500_ids = fields.One2many(
        "l10n_br_sped.ecf.m500",
        "reg_M500_ids_RegistroM030_id",
        string="M500 Controle de Saldos das Contas da Parte B",
        sped_card="[0;N]",
        sped_required=True,
        help="M500 Controle de Saldos das Contas da Parte B do e-Lalur e do e-Lacs",
    )

    reg_M510_ids = fields.One2many(
        "l10n_br_sped.ecf.m510",
        "reg_M510_ids_RegistroM030_id",
        string="M510 Controle de Saldos das Contas Padrão",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "M510 Controle de Saldos das Contas Padrão da Parte B do e- Lalur e do "
            "e-Lacs"
        ),
    )


class RegistroM300(models.AbstractModel):
    "Demonstração do Lucro Real"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m300"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código do Lançamento no e-Lalur",
        required=True,
        help=(
            "Código do Lançamento no e-Lalur, conforme tabela dinâmica do Sped "
            "(Disponibilizada no item III deste registro e no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição do Tipo de Lançamento no e-Lalur",
        help=(
            "Descrição do Tipo de Lançamento no e-Lalur, conforme tabela dinâmica do "
            "Sped (Disponibilizada no item III deste registro e no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    TIPO_LANCAMENTO = fields.Char(
        string="O Indicador do Tipo de Lançamento",
        sped_length="1",
        help=(
            "O Indicador do Tipo de Lançamento: A- Adição E - Exclusão. P - Compensação"
            " de Prejuízo L - Lucro bservação: O tipo “R” (Rótulo) é para linhas de "
            "títulos, que aparecem na interface do programa. Portanto, não deve ser "
            "utilizado neste campo."
        ),
    )

    IND_RELACAO = fields.Char(
        string="Indicador de Relacionamento do Lançamento",
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de Relacionamento do Lançamento da Parte A: 1 - Com Conta da "
            "Parte B 2 - Com Conta Contábil 3 – Com Conta da parte B e Conta Contábil 4"
            " - Sem Relacionamento Observação: O valor do lançamento do tipo 3 pode "
            "considerar o saldo contas da parte B ou somatório dos saldos das contas da"
            " parte B com os saldos das contas contábeis. Para isso, o valor do "
            "lançamento correto na parte A deve ser preenchido pela empresa."
        ),
    )

    VALOR = fields.Char(string="Valor do Lançamento no e-Lalur", sped_length="19")

    HIST_LAN_LAL = fields.Char(
        string="Histórico do Lançamento no e-Lalur", sped_length="5"
    )

    reg_M300_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )

    reg_M305_ids = fields.One2many(
        "l10n_br_sped.ecf.m305",
        "reg_M305_ids_RegistroM300_id",
        string="M305 Contas da Parte B Relacionadas ao Lançamento",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "M305 Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lalur"
        ),
    )

    reg_M310_ids = fields.One2many(
        "l10n_br_sped.ecf.m310",
        "reg_M310_ids_RegistroM300_id",
        string="M310 Contas Contábeis Relacionadas ao Lançamento",
        sped_card="[0;N]",
        sped_required=True,
        help=("M310 Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur"),
    )

    reg_M315_ids = fields.One2many(
        "l10n_br_sped.ecf.m315",
        "reg_M315_ids_RegistroM300_id",
        string="M315 Identificação de Processos Judiciais",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "M315 Identificação de Processos Judiciais e Administrativos Referentes ao "
            "Lançamento"
        ),
    )


class RegistroM305(models.AbstractModel):
    "Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lalur"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m305"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    COD_CTA_B = fields.Char(
        string="Código da Conta na Parte B",
        required=True,
        help=(
            "Código da Conta na Parte B: Código unívoco atribuído pelo contribuinte à "
            "conta no e-Lalur no registro M010."
        ),
    )

    VL_CTA = fields.Monetary(
        string="O Valor Total dos Lançamentos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "O Valor Total dos Lançamentos: Valor total dos lançamentos adicionados ou "
            "excluídos da conta. bservação: Valor deve ser menor ou igual ao saldo "
            "disponível do mesmo período de apuração da conta na parte B do registro "
            "M410."
        ),
    )

    IND_VL_CTA = fields.Char(
        string="Indicador do Valor Total dos Lançamentos",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Valor Total dos Lançamentos: D – Para prejuízos ou valores "
            "que reduzam o lucro real em períodos subsequentes. C – Para valores que "
            "aumentam o lucro real em períodos subsequentes."
        ),
    )

    reg_M305_ids_RegistroM300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m300",
        string="Demonstração do Lucro Real",
        required=True,
        ondelete="cascade",
    )


class RegistroM310(models.AbstractModel):
    "Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m310"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    COD_CTA = fields.Char(
        string="Código da Conta Contábil",
        required=True,
        help=(
            "Código da Conta Contábil (Plano de Contas da Pessoa Jurídica): Código da "
            "conta ou subconta contábil onde está registrado o valor a ser adicionado "
            "ou excluído, quando possível sua identificação (deve existir no J050)."
        ),
    )

    COD_CCUS = fields.Char(
        string="Código do Centro de Custos",
        help="Código do Centro de Custos (deve existir no J100).",
    )

    VL_CTA = fields.Monetary(
        string="Valor da Conta Utilizado no Lançamento da Parte A",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_CTA = fields.Char(
        string="Indicador do Valor do Lançamento",
        required=True,
        sped_length="1",
        help="Indicador do Valor do Lançamento: D – Devedor. C – Credor.",
    )

    reg_M310_ids_RegistroM300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m300",
        string="Demonstração do Lucro Real",
        required=True,
        ondelete="cascade",
    )

    reg_M312_ids = fields.One2many(
        "l10n_br_sped.ecf.m312",
        "reg_M312_ids_RegistroM310_id",
        string="M312 Números dos Lançamentos Relacionados",
        sped_card="[0;N]",
        sped_required=True,
        help="M312 Números dos Lançamentos Relacionados à Conta Contábil",
    )


class RegistroM312(models.AbstractModel):
    "Números dos Lançamentos Relacionados à Conta Contábil"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m312"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 5

    NUM_LCTO = fields.Char(
        string="Número do Lançamento Descrito na ECD",
        required=True,
        sped_length="5",
        help=(
            "Número do Lançamento Descrito na ECD (Escrituração Contábil Digital) no "
            "campo 2 (NUM_LCTO) registro “I200 – Lançamento Contábil”."
        ),
    )

    reg_M312_ids_RegistroM310_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m310",
        string="Contas Contábeis Relacionadas ao Lançamento",
        required=True,
        ondelete="cascade",
        help="Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur",
    )


class RegistroM315(models.AbstractModel):
    """Identificação de Processos Judiciais e Administrativos Referentes ao
    Lançamento"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m315"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    IND_PROC = fields.Char(
        string="Tipo do Processo: 1",
        required=True,
        sped_length="1",
        help="Tipo do Processo: 1 - Judicial 2 – Administrativo",
    )

    NUM_PROC = fields.Char(string="Número do Processo", required=True, sped_length="2")

    reg_M315_ids_RegistroM300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m300",
        string="Demonstração do Lucro Real",
        required=True,
        ondelete="cascade",
    )


class RegistroM350(models.AbstractModel):
    "Demonstração da Base de Cálculo da CSLL"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m350"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código do Lançamento no e-Lalur",
        required=True,
        help=(
            "Código do Lançamento no e-Lalur, conforme tabela dinâmica do Sped "
            "(Disponibilizada no item III deste registro e no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição do Tipo de Lançamento no e-Lalur",
        help=(
            "Descrição do Tipo de Lançamento no e-Lalur, conforme tabela dinâmica do "
            "Sped (Disponibilizada no item III deste registro e no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    TIPO_LANCAMENTO = fields.Char(
        string="O Indicador do Tipo de Lançamento",
        sped_length="1",
        help=(
            "O Indicador do Tipo de Lançamento: A- Adição E - Exclusão. P - Compensação"
            " de Prejuízo L - Lucro bservação: O tipo “R” (Rótulo) é para linhas de "
            "títulos, que aparecem na interface do programa. Portanto, não deve ser "
            "utilizado neste campo."
        ),
    )

    IND_RELACAO = fields.Char(
        string="Indicador de Relacionamento do Lançamento",
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de Relacionamento do Lançamento da Parte A: 1 - Com Conta da "
            "Parte B 2 - Com Conta Contábil 3 – Com Conta da parte B e Conta Contábil 4"
            " - Sem Relacionamento Observação: O valor do lançamento do tipo 3 pode "
            "considerar o saldo contas da parte B ou somatório dos saldos das contas da"
            " parte B com os saldos das contas contábeis. Para isso, o valor do "
            "lançamento correto na parte A deve ser preenchido pela empresa."
        ),
    )

    VALOR = fields.Char(string="Valor do Lançamento no e-Lalur", sped_length="19")

    HIST_LAN_LAL = fields.Char(
        string="Histórico do Lançamento no e-Lalur", sped_length="5"
    )

    reg_M350_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )

    reg_M355_ids = fields.One2many(
        "l10n_br_sped.ecf.m355",
        "reg_M355_ids_RegistroM350_id",
        string="M355 Contas da Parte B Relacionadas ao Lançamento",
        sped_card="[0;N]",
        sped_required=True,
        help=("M355 Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lacs"),
    )

    reg_M360_ids = fields.One2many(
        "l10n_br_sped.ecf.m360",
        "reg_M360_ids_RegistroM350_id",
        string="M360 Contas Contábeis Relacionadas ao Lançamento",
        sped_card="[0;N]",
        sped_required=True,
        help="M360 Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs",
    )

    reg_M365_ids = fields.One2many(
        "l10n_br_sped.ecf.m365",
        "reg_M365_ids_RegistroM350_id",
        string="M365 Identificação de Processos Judiciais",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "M365 Identificação de Processos Judiciais e Administrativos Referentes ao "
            "Lançamento"
        ),
    )


class RegistroM355(models.AbstractModel):
    "Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lacs"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m355"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    COD_CTA_B = fields.Char(
        string="Código da Conta na Parte B",
        required=True,
        help=(
            "Código da Conta na Parte B: Código unívoco atribuído pelo contribuinte à "
            "conta no e-Lacs no registro M010."
        ),
    )

    VL_CTA = fields.Monetary(
        string="O Valor Total dos Lançamentos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "O Valor Total dos Lançamentos: Valor total dos lançamentos adicionados ou "
            "excluídos da conta. bservação: Valor deve ser menor ou igual ao saldo "
            "disponível do mesmo período de apuração da conta na parte B do registro "
            "M410."
        ),
    )

    IND_VL_CTA = fields.Char(
        string="Indicador do Valor Total dos Lançamentos",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Valor Total dos Lançamentos: D – Para prejuízos ou valores "
            "que reduzam o lucro real em períodos subsequentes. C – Para valores que "
            "aumentam o lucro real em períodos subsequentes."
        ),
    )

    reg_M355_ids_RegistroM350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m350",
        string="Demonstração da Base de Cálculo da CSLL",
        required=True,
        ondelete="cascade",
    )


class RegistroM360(models.AbstractModel):
    "Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m360"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    COD_CTA = fields.Char(
        string="Código da Conta Contábil",
        required=True,
        help=(
            "Código da Conta Contábil (Plano de Contas da Pessoa Jurídica): Código da "
            "conta ou subconta contábil onde está registrado o valor a ser adicionado "
            "ou excluído, quando possível sua identificação (deve existir no J050)."
        ),
    )

    COD_CCUS = fields.Char(
        string="Código do Centro de Custos",
        help="Código do Centro de Custos (deve existir no J100).",
    )

    VL_CTA = fields.Monetary(
        string="Valor da Conta Utilizado no Lançamento da Parte A",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_CTA = fields.Char(
        string="Indicador do Valor do Lançamento",
        required=True,
        sped_length="1",
        help="Indicador do Valor do Lançamento: D – Devedor. C – Credor.",
    )

    reg_M360_ids_RegistroM350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m350",
        string="Demonstração da Base de Cálculo da CSLL",
        required=True,
        ondelete="cascade",
    )

    reg_M362_ids = fields.One2many(
        "l10n_br_sped.ecf.m362",
        "reg_M362_ids_RegistroM360_id",
        string="M362 Números dos Lançamentos Relacionados",
        sped_card="[0;N]",
        sped_required=True,
        help="M362 Números dos Lançamentos Relacionados à Conta Contábil",
    )


class RegistroM362(models.AbstractModel):
    "Números dos Lançamentos Relacionados à Conta Contábil"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m362"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 5

    NUM_LCTO = fields.Char(
        string="Número do Lançamento Descrito na ECD",
        required=True,
        sped_length="5",
        help=(
            "Número do Lançamento Descrito na ECD (Escrituração Contábil Digital) no "
            "campo 2 (NUM_LCTO) registro “I200 – Lançamento Contábil”."
        ),
    )

    reg_M362_ids_RegistroM360_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m360",
        string="Contas Contábeis Relacionadas ao Lançamento",
        required=True,
        ondelete="cascade",
        help="Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs",
    )


class RegistroM365(models.AbstractModel):
    """Identificação de Processos Judiciais e Administrativos Referentes ao
    Lançamento"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m365"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    IND_PROC = fields.Char(
        string="Tipo do Processo: 1",
        required=True,
        sped_length="1",
        help="Tipo do Processo: 1 - Judicial 2 – Administrativo",
    )

    NUM_PROC = fields.Char(string="Número do Processo", required=True, sped_length="2")

    reg_M365_ids_RegistroM350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m350",
        string="Demonstração da Base de Cálculo da CSLL",
        required=True,
        ondelete="cascade",
    )


class RegistroM410(models.AbstractModel):
    """Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem Reflexo na
    Parte A"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m410"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA_B = fields.Char(
        string="Código da Conta do Lançamento",
        help="Código da Conta do Lançamento (conta da Parte B)",
    )

    COD_TRIBUTO = fields.Char(
        string="Código do Tributo",
        required=True,
        sped_length="1",
        help=(
            "Código do Tributo: I – Imposto de Renda C – Contribuição Social sobre o "
            "Lucro Líquido"
        ),
    )

    VAL_LAN_LALB_PB = fields.Monetary(
        string="Valor do Lançamento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_LAN_LALB_PB = fields.Char(
        string="Indicador do Lançamento",
        required=True,
        help=(
            "Indicador do Lançamento: CR – Crédito DB – Débito PF - Prejuízo do "
            "exercício. BC - Base de cálculo negativa da CSLL. Observação: O indicador "
            "PF refere-se ao prejuízo apurado no exercício em curso."
        ),
    )

    COD_CTA_B_CTP = fields.Char(
        string="Código Unívoco da Contrapartida",
        help=(
            "Código Unívoco da Contrapartida (conta da Parte B), caso seja necessária a"
            " transferência de saldo de uma conta na parte B para outra conta na parte "
            "B. Não preencher quando: IND_VAL_LAN_LA_LB_PB for igual a “PF” ou “BC”."
        ),
    )

    HIST_LAN_LALB = fields.Char(string="Histórico do Lançamento", required=True)

    IND_LAN_ANT = fields.Char(
        string="Lançamento para Realização",
        required=True,
        sped_length="1",
        help=(
            "Lançamento para Realização de Valores Cuja Tributação Tenha Sido Diferida:"
            " S – Sim N – Não Observação: Marca-se “Sim” neste campo quando o "
            "contribuinte, em período anterior, realizou valores controlados na parte B"
            " do e-Lalur/e-Lacs e deve reajustar os saldos das contas em início de "
            "período de apuração tributado pelo lucro real."
        ),
    )

    reg_M410_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )

    reg_M415_ids = fields.One2many(
        "l10n_br_sped.ecf.m415",
        "reg_M415_ids_RegistroM410_id",
        string="M415 Identificação de Processos Judiciais",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "M415 Identificação de Processos Judiciais e Administrativos Referentes ao "
            "Lançamento"
        ),
    )


class RegistroM415(models.AbstractModel):
    """Identificação de Processos Judiciais e Administrativos Referentes ao
    Lançamento"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m415"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    IND_PROC = fields.Char(
        string="Tipo do Processo: 1",
        required=True,
        sped_length="1",
        help="Tipo do Processo: 1 - Judicial 2 – Administrativo",
    )

    NUM_PROC = fields.Char(string="Número do Processo", required=True, sped_length="2")

    reg_M415_ids_RegistroM410_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m410",
        string="Lançamentos na Conta da Parte B do e-Lalur",
        required=True,
        ondelete="cascade",
        help=(
            "Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem Reflexo na "
            "Parte A"
        ),
    )


class RegistroM500(models.AbstractModel):
    "Controle de Saldos das Contas da Parte B do e-Lalur e do e-Lacs"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m500"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA_B = fields.Char(
        string="Código Unívoco Atribuído Pelo Contribuinte à Conta",
        required=True,
        help=(
            "Código Unívoco Atribuído Pelo Contribuinte à Conta no e-Lalur e no e-Lacs "
            "(deve existir no M010.COD_CTA_B)"
        ),
    )

    COD_TRIBUTO = fields.Char(
        string="Código do Tributo",
        required=True,
        sped_length="1",
        help=(
            "Código do Tributo: I – Imposto de Renda C – Contribuição Social Sobre o "
            "Lucro Líquido"
        ),
    )

    SD_INI_LAL = fields.Float(
        string="Saldo Inicial da Conta no Período de Apuração",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SD_INI_LAL = fields.Char(
        string="Indicador de Saldo Inicial",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Saldo Inicial: D – Para prejuízos ou valores que serão "
            "excluídos do lucro real ou da base de cálculo da contribuição social em "
            "períodos subsequentes. C – Para valores que serão adicionados ao lucro "
            "real ou à base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTE_A = fields.Monetary(
        string="Somatório dos Lançamentos da Parte B com Reflexo",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B com Reflexo na Parte A no Período."
        ),
    )

    IND_VL_LCTO_PARTE_A = fields.Char(
        string="Indicador do Somatório dos Lançamentos da Parte B",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Somatório dos Lançamentos da Parte B com Reflexo na Parte A "
            "no período: C – Para prejuízos ou valores que serão excluídos do lucro "
            "real ou da base de cálculo da contribuição social em períodos "
            "subsequentes. D – Para valores que serão adicionados ao lucro real ou à "
            "base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTEB = fields.Monetary(
        string="Somatório dos Lançamentos da Parte B Sem Reflexo",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B Sem Reflexo na Parte A no Período "
            "(entre contas da parte B)."
        ),
    )

    IND_VL_LCTO_PARTEB = fields.Char(
        string="Indicador Somatório dos Lançamentos",
        required=True,
        sped_length="1",
        help=(
            "Indicador Somatório dos Lançamentos da Parte B Sem Reflexo na Parte A no "
            "Período (entre contas da parte B): C – Para prejuízos ou valores que serão"
            " excluídos do lucro real ou da base de cálculo da contribuição social em "
            "períodos subsequentes. D – Para valores que serão adicionados ao lucro "
            "real ou à base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    SD_FIM_LAL = fields.Float(
        string="Saldo Final da Conta no Período de Apuração",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SD_FIM_LAL = fields.Char(
        string="Indicador de Saldo Final",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Saldo Final: D – Para prejuízos ou valores que serão "
            "excluídos do lucro real ou da base de cálculo da contribuição social em "
            "períodos subsequentes. C – Para valores que serão adicionados ao lucro "
            "real ou à base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    reg_M500_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroM510(models.AbstractModel):
    """Controle de Saldos das Contas Padrão da Parte B do e- Lalur e do
    e-Lacs"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.m510"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_PB_RFB = fields.Char(
        string="Código da Conta Padrão da Parte B",
        required=True,
        help="Código da Conta Padrão da Parte B (deve existir no M010.COD_PB_RFB).",
    )

    DESCRICAO_PB_RFB = fields.Char(
        string="Descrição da Conta Padrão da Parte B", required=True
    )

    COD_TRIBUTO = fields.Char(
        string="Código do Tributo",
        required=True,
        sped_length="1",
        help=(
            "Código do Tributo: I – Imposto de Renda C – Contribuição Social Sobre o "
            "Lucro Líquido"
        ),
    )

    SD_INI_LAL = fields.Float(
        string="Saldo Inicial da Conta no Período de Apuração",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SD_INI_LAL = fields.Char(
        string="Indicador de Saldo Inicial",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Saldo Inicial: D – Para prejuízos ou valores que serão "
            "excluídos do lucro real ou da base de cálculo da contribuição social em "
            "períodos subsequentes. C – Para valores que serão adicionados ao lucro "
            "real ou à base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTE_A = fields.Monetary(
        string="Somatório dos Lançamentos da Parte B com Reflexo",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B com Reflexo na Parte A no Período."
        ),
    )

    IND_VL_LCTO_PARTE_A = fields.Char(
        string="Indicador do Somatório dos Lançamentos da Parte B",
        required=True,
        sped_length="1",
        help=(
            "Indicador do Somatório dos Lançamentos da Parte B com Reflexo na Parte A "
            "no período: C – Para prejuízos ou valores que serão excluídos do lucro "
            "real ou da base de cálculo da contribuição social em períodos "
            "subsequentes. D – Para valores que serão adicionados ao lucro real ou à "
            "base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTEB = fields.Monetary(
        string="Somatório dos Lançamentos da Parte B Sem Reflexo",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B Sem Reflexo na Parte A no Período "
            "(entre contas da parte B)."
        ),
    )

    IND_VL_LCTO_PARTEB = fields.Char(
        string="Indicador Somatório dos Lançamentos",
        required=True,
        sped_length="1",
        help=(
            "Indicador Somatório dos Lançamentos da Parte B Sem Reflexo na Parte A no "
            "Período (entre contas da parte B): C – Para prejuízos ou valores que serão"
            " excluídos do lucro real ou da base de cálculo da contribuição social em "
            "períodos subsequentes. D – Para valores que serão adicionados ao lucro "
            "real ou à base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    SD_FIM_LAL = fields.Float(
        string="Saldo Final da Conta no Período de Apuração",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    IND_SD_FIM_LAL = fields.Char(
        string="Indicador de Saldo Final",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Saldo Final: D – Para prejuízos ou valores que serão "
            "excluídos do lucro real ou da base de cálculo da contribuição social em "
            "períodos subsequentes. C – Para valores que serão adicionados ao lucro "
            "real ou à base de cálculo da contribuição social em períodos subsequentes."
        ),
    )

    reg_M510_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.m030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN030(models.AbstractModel):
    """Identificação do Período e Forma de Apuração do IRPJ e da CSLL das
    Empresas Tributadas pelo Lucro Real"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="I S Período de apuração [para 0010",
        required=True,
        sped_length="3",
        help=(
            "I S Período de apuração [para 0010.FORMA_APUR = “A”]: A00 – Receita Bruta/"
            " Balanço de Suspensão e Redução Anual A01 – Balanço de Suspensão e Redução"
            " até Janeiro A02 – Balanço de Suspensão e Redução até Fevereiro A03 – "
            "Balanço de Suspensão e Redução até Março A04 – Balanço de Suspensão e "
            "Redução até Abril A05 – Balanço de Suspensão e Redução até Maio A06 – "
            "Balanço de Suspensão e Redução até Junho A07 – Balanço de Suspensão e "
            "Redução até Julho A08 – Balanço de Suspensão e Redução até Agosto A09 – "
            "Balanço de Suspensão e Redução até Setembro A10 – Balanço de Suspensão e "
            "Redução até Outubro A11 – Balanço de Suspensão e Redução até Novembro A12 "
            "– Balanço de Suspensão e Redução até Dezembro ndicador do período de "
            "referência [para 0010.FORMA_APUR = “T” OU (0010.FORMA_APUR = “A” E "
            "0010.FORMA_TRIB = “2”)]: T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º "
            "Trimestre T04 – 4º Trimestre Regra: O período deve estar compreendido "
            "entre a data início e data fim da escrituração. Regra: SE 0010.FORMA_APUR "
            "= “A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] como “B” ou "
            "'E'. E 0010.FORMA_APUR = “T” - Deve existir um registro [T01..T04] para "
            "cada trimestre marcado no 0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_N500_ids = fields.One2many(
        "l10n_br_sped.ecf.n500",
        "reg_N500_ids_RegistroN030_id",
        string="N500 Base de Cálculo do IRPJ Sobre",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "N500 Base de Cálculo do IRPJ Sobre o Lucro Real Após as Compensações de "
            "Prejuízos"
        ),
    )

    reg_N600_ids = fields.One2many(
        "l10n_br_sped.ecf.n600",
        "reg_N600_ids_RegistroN030_id",
        string="N600 Demonstração do Lucro da Exploração",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_N605_ids = fields.One2many(
        "l10n_br_sped.ecf.n605",
        "reg_N605_ids_RegistroN030_id",
        string="N605 Contas Contábeis Envolvidas na Apuração",
        sped_card="[0;N]",
        sped_required=True,
        help="N605 Contas Contábeis Envolvidas na Apuração do Lucro da Exploração",
    )

    reg_N610_ids = fields.One2many(
        "l10n_br_sped.ecf.n610",
        "reg_N610_ids_RegistroN030_id",
        string="N610 Cálculo da Isenção e Redução",
        sped_card="[0;N]",
        sped_required=True,
        help="N610 Cálculo da Isenção e Redução do Imposto sobre Lucro Real",
    )

    reg_N615_ids = fields.One2many(
        "l10n_br_sped.ecf.n615",
        "reg_N615_ids_RegistroN030_id",
        string="N615 Informações da Base de Cálculo",
        sped_card="[0;N]",
        sped_required=True,
        help="N615 Informações da Base de Cálculo de Incentivos Fiscais",
    )

    reg_N620_ids = fields.One2many(
        "l10n_br_sped.ecf.n620",
        "reg_N620_ids_RegistroN030_id",
        string="N620 Apuração do IRPJ Mensal por Estimativa",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_N630_ids = fields.One2many(
        "l10n_br_sped.ecf.n630",
        "reg_N630_ids_RegistroN030_id",
        string="N630 Apuração do IRPJ Com Base no Lucro Real",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_N650_ids = fields.One2many(
        "l10n_br_sped.ecf.n650",
        "reg_N650_ids_RegistroN030_id",
        string="N650 Base de Cálculo da CSLL Após Compensações",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "N650 Base de Cálculo da CSLL Após Compensações das Bases de Cálculo "
            "Negativa"
        ),
    )

    reg_N660_ids = fields.One2many(
        "l10n_br_sped.ecf.n660",
        "reg_N660_ids_RegistroN030_id",
        string="N660 Apuração da CSLL Mensal por Estimativa",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_N670_ids = fields.One2many(
        "l10n_br_sped.ecf.n670",
        "reg_N670_ids_RegistroN030_id",
        string="N670 Apuração da CSLL Com Base no Lucro Real",
        sped_card="[0;N]",
        sped_required=True,
    )


class RegistroN500(models.AbstractModel):
    """Base de Cálculo do IRPJ Sobre o Lucro Real Após as Compensações de
    Prejuízos"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n500"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N500_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN600(models.AbstractModel):
    "Demonstração do Lucro da Exploração"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n600"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N600_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN605(models.AbstractModel):
    "Contas Contábeis Envolvidas na Apuração do Lucro da Exploração"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n605"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(
        string="Código da conta contábil",
        required=True,
        help=(
            "Código da conta contábil. Observação: código da conta informado deve "
            "constar no registro K355."
        ),
    )

    COD_CCUS = fields.Char(
        string="Código do centro de custos",
        help=(
            "Código do centro de custos. Observação: código do centro de custos "
            "informado deve constar no registro K355, para o código de conta informado "
            "no campo N605.COD_CTA."
        ),
    )

    VALOR = fields.Monetary(
        string="Saldo utilizado",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do saldo utilizado",
        required=True,
        help="Indicador do saldo utilizado: D – Devedor C – Credor",
    )

    reg_N605_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN610(models.AbstractModel):
    "Cálculo da Isenção e Redução do Imposto sobre Lucro Real"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n610"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N610_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN615(models.AbstractModel):
    "Informações da Base de Cálculo de Incentivos Fiscais"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n615"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    BASE_CALC = fields.Float(
        string="B Base de Cálculo",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "B Base de Cálculo: Base de cálculo dos incentivos fiscais: Para fins de "
            "determinação da base de cálculo dos incentivos, deve-se observar a forma "
            "de apuração do imposto de renda da pessoa jurídica, as deduções "
            "permitidas. a) Regra Geral: O valor desta linha, quando a apuração do "
            "imposto de renda for com base no lucro real trimestral e no lucro real "
            "apurado em 31 de dezembro do ano-calendário (ajuste anual) será calculado "
            "pela seguinte fórmula: ASE_CALC = A - (B + C + D + E + F + G + H + I + J +"
            " L + M+ N + O + P), onde: A = Imposto de Renda devido à alíquota de 15% "
            "(Linha N630/3) B = Atividades Culturais e Artísticas (Linha N630/6) (art. "
            "18, e §§ 1º e 3º, e art. 25 e 26 da Lei nº 8.313, de 1991, com as "
            "alterações do art. 1º, da Lei nº 9.874, de 1999, do art. 53 da MP nº "
            "2.228, de 2001) C = Operações de Aquisição de Vale-Cultura (Linha N630/7) "
            "(Lei nº 12.761/2012, art. 10) D = Programa de Alimentação ao Trabalhador "
            "(Linha N630/8) E = Desenvolvimento Tecnológico Industrial/Agropecuário "
            "(Linha N630/9) F = Atividade Audiovisual (Linha N630/10) G = Fundo dos "
            "Direitos da Criança e do Adolescente (Linha N630/11) H = Fundos Nacional, "
            "Estaduais ou Municipais do Idoso (Linha N630/12) (Lei nº 12.213, de 2010, "
            "art. 3º). I = Atividades de Caráter Desportivo (Linha N630/13) J = "
            "Programa Nacional de Apoio à Atenção Oncológica - PRONON (Linha N630/14) -"
            " (Lei nº 12.715/2012, arts. 1º e 4º) L = Programa Nacional de Apoio à "
            "Atenção da Saúde da Pessoa com Deficiência - PRONAS/PCD (Linha N630/15) "
            "(Lei nº 12.715, de 2012, arts. 3º e 4º) M= Valor da Remuneração da "
            "Prorrogação da Licença-Maternidade (Linha N630/16) (Lei nº 11.770, de "
            "2008, art. 5º) N = 3,33 x Redução por Reinvestimento (Linha N630/18) O = "
            "Imposto devido no Brasil à alíquota de 15% incidente sobre lucros, "
            "rendimentos e ganhos de capital oriundos do exterior (Linha N630/19) P = "
            "Imposto de renda sobre a diferença entre o Custo Orçado e o Custo Efetivo "
            "(Linha N630/27)"
        ),
    )

    PER_INCEN_FINOR = fields.Float(
        string="Percentual do Incentivo FINOR",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Percentual do Incentivo FINOR (até 6%).",
    )

    VL_LIQ_INCEN_FINOR = fields.Char(
        string="Valor Líquido do Incentivo FINOR", required=True, sped_length="19"
    )

    PER_INCEN_FINAM = fields.Float(
        string="Percentual do Incentivo FINAM",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Percentual do Incentivo FINAM (até 6%).",
    )

    VL_LIQ_INCEN_FINAM = fields.Char(
        string="Valor Líquido do Incentivo FINAM", required=True, sped_length="19"
    )

    VL_TOTAL = fields.Char(
        string="Total dos Incentivos", required=True, sped_length="19"
    )

    reg_N615_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN620(models.AbstractModel):
    "Apuração do IRPJ Mensal por Estimativa"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n620"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N620_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN630(models.AbstractModel):
    "Apuração do IRPJ Com Base no Lucro Real"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n630"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N630_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN650(models.AbstractModel):
    """Base de Cálculo da CSLL Após Compensações das Bases de Cálculo
    Negativa"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n650"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor", sped_length="19")

    reg_N650_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN660(models.AbstractModel):
    "Apuração da CSLL Mensal por Estimativa"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n660"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor", sped_length="19")

    reg_N660_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN670(models.AbstractModel):
    "Apuração da CSLL Com Base no Lucro Real"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.n670"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor", sped_length="19")

    reg_N670_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.n030",
        string="Identificação do Período e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroP030(models.AbstractModel):
    """Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das
    Empresas Tributadas pelo Lucro Presumido"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="A00 – Anual",
        required=True,
        sped_length="3",
        help=(
            "A00 – Anual (para registrar o Balanço Patrimonial anual e a DRE anual) T01"
            " – 1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – 4º Trimestre "
            "Regra: O período deve estar compreendido entre a data início e data fim da"
            " escrituração. SE 0010.FORMA_APUR = “T” - Deve existir um registro "
            "[T01..T04] para cada trimestre marcado no 0010.FORMA_TRIB_PER[1..4] como "
            "“P”"
        ),
    )

    reg_P100_ids = fields.One2many(
        "l10n_br_sped.ecf.p100",
        "reg_P100_ids_RegistroP030_id",
        string="P100 Balanço Patrimonial",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_P130_ids = fields.One2many(
        "l10n_br_sped.ecf.p130",
        "reg_P130_ids_RegistroP030_id",
        string="P130 Demonstração das Receitas Incentivadas",
        sped_card="[0;N]",
        sped_required=True,
        help="P130 Demonstração das Receitas Incentivadas do Lucro Presumido",
    )

    reg_P150_ids = fields.One2many(
        "l10n_br_sped.ecf.p150",
        "reg_P150_ids_RegistroP030_id",
        string="P150 Demonstração do Resultado",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_P200_ids = fields.One2many(
        "l10n_br_sped.ecf.p200",
        "reg_P200_ids_RegistroP030_id",
        string="P200 Apuração da Base de Cálculo",
        sped_card="[1;N]",
        sped_required=True,
        help="P200 Apuração da Base de Cálculo do Lucro Presumido",
    )

    reg_P230_ids = fields.One2many(
        "l10n_br_sped.ecf.p230",
        "reg_P230_ids_RegistroP030_id",
        string="P230 Cálculo da Isenção e Redução",
        sped_card="[0;N]",
        sped_required=True,
        help="P230 Cálculo da Isenção e Redução do Lucro Presumido",
    )

    reg_P300_ids = fields.One2many(
        "l10n_br_sped.ecf.p300",
        "reg_P300_ids_RegistroP030_id",
        string="P300 Cálculo do IRPJ com Base no Lucro Presumido",
        sped_card="[1;N]",
        sped_required=True,
    )

    reg_P400_ids = fields.One2many(
        "l10n_br_sped.ecf.p400",
        "reg_P400_ids_RegistroP030_id",
        string="P400 Apuração da Base de Cálculo da CSLL com Base",
        sped_card="[1;N]",
        sped_required=True,
        help="P400 Apuração da Base de Cálculo da CSLL com Base no Lucro Presumido",
    )

    reg_P500_ids = fields.One2many(
        "l10n_br_sped.ecf.p500",
        "reg_P500_ids_RegistroP030_id",
        string="P500 Cálculo da CSLL com Base no Lucro Líquido",
        sped_card="[1;N]",
        sped_required=True,
    )


class RegistroP100(models.AbstractModel):
    "Balanço Patrimonial"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        sped_length="5",
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme tabela "
            "dinâmica do Sped (Disponibilizada no item II deste registro e no programa "
            "da ECF, no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta",
        required=True,
        sped_length="1",
        help="Indicador do Tipo de Conta: S – Sintética A – Analítica",
    )

    NIVEL = fields.Char(
        string="Nível da Conta", xsd_type="numeric_code", sped_length="3"
    )

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        sped_length="2",
        help=(
            "Natureza da Conta, conforme tabela do Sped (Disponibilizada no programa da"
            " ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    VAL_CTA_REF_INI = fields.Monetary(
        string="Saldo Inicial da Conta Referencial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_CTA_REF_INI = fields.Char(
        string="Indicador da Situação do Saldo Inicial",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Inicial: D – Devedor C – Credor",
    )

    VAL_CTA_REF_DEB = fields.Monetary(
        string="Valor Total dos Débitos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total dos Débitos: Somatório dos valores mapeados.",
    )

    VAL_CTA_REF_CRED = fields.Monetary(
        string="Valor Total dos Créditos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total dos Créditos: Somatório dos valores mapeados.",
    )

    VAL_CTA_REF_FIN = fields.Char(
        string="Saldo Final da Conta Referencial", required=True, sped_length="19"
    )

    IND_VAL_CTA_REF_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_P100_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP130(models.AbstractModel):
    "Demonstração das Receitas Incentivadas do Lucro Presumido"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p130"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P130_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP150(models.AbstractModel):
    "Demonstração do Resultado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p150"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        sped_length="5",
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme tabela "
            "dinâmica do Sped (Disponibilizada no item III deste registro e no programa"
            " da ECF, no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta",
        required=True,
        sped_length="1",
        help="Indicador do Tipo de Conta: S – Sintética A – Analítica",
    )

    NIVEL = fields.Char(
        string="Nível da Conta", xsd_type="numeric_code", sped_length="3"
    )

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        sped_length="2",
        help="Natureza da Conta: 04 – Contas de Resultado",
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    VALOR = fields.Monetary(
        string="Saldo Final da Conta Referencial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do Sinal do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador do Sinal do Saldo Final: C – Credor D – Devedor",
    )

    reg_P150_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP200(models.AbstractModel):
    "Apuração da Base de Cálculo do Lucro Presumido"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p200"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P200_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP230(models.AbstractModel):
    "Cálculo da Isenção e Redução do Lucro Presumido"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p230"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P230_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP300(models.AbstractModel):
    "Cálculo do IRPJ com Base no Lucro Presumido"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p300"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P300_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP400(models.AbstractModel):
    "Apuração da Base de Cálculo da CSLL com Base no Lucro Presumido"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p400"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P400_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP500(models.AbstractModel):
    "Cálculo da CSLL com Base no Lucro Líquido"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.p500"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P500_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.p030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das "
            "Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroQ100(models.AbstractModel):
    "Demonstrativo do Livro Caixa"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.q100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DATA = fields.Date(
        string="Data da entrada ou da saída dos recursos",
        required=True,
        xsd_type="numeric_code",
        sped_length="8",
    )

    NUM_DOC = fields.Char(string="Número do documento")

    HIST = fields.Char(string="Histórico", required=True)

    VL_ENTRADA = fields.Monetary(
        string="Valor de entrada dos recursos",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SAIDA = fields.Monetary(
        string="Valor de saída dos recursos",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    SLD_FIN = fields.Char(string="Saldo Final", required=True, sped_length="19")


class RegistroT030(models.AbstractModel):
    """Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das
    Empresas Tributadas pelo Lucro Arbitrado"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.t030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="PER_APUR",
        required=True,
        sped_length="3",
        help=(
            "S T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – 4º "
            "Trimestre Regra: o período deve estar compreendido entre a data início e "
            "data fim da escrituração. E 0010.FORMA_APUR = “T” - Deve existir um "
            "registro [T01..T04] para cada trimestre marcado no "
            "0010.FORMA_TRIB_PER[1..4] como “A”"
        ),
    )

    reg_T120_ids = fields.One2many(
        "l10n_br_sped.ecf.t120",
        "reg_T120_ids_RegistroT030_id",
        string="T120 Apuração da Base de Cálculo do IRPJ com Base",
        sped_card="[0;N]",
        sped_required=True,
        help="T120 Apuração da Base de Cálculo do IRPJ com Base no Lucro Arbitrado",
    )

    reg_T150_ids = fields.One2many(
        "l10n_br_sped.ecf.t150",
        "reg_T150_ids_RegistroT030_id",
        string="T150 Cálculo do Imposto de Renda com Base",
        sped_card="[0;N]",
        sped_required=True,
        help="T150 Cálculo do Imposto de Renda com Base no Lucro Arbitrado",
    )

    reg_T170_ids = fields.One2many(
        "l10n_br_sped.ecf.t170",
        "reg_T170_ids_RegistroT030_id",
        string="T170 Apuração da Base de Cálculo da CSLL com Base",
        sped_card="[0;N]",
        sped_required=True,
        help="T170 Apuração da Base de Cálculo da CSLL com Base no Lucro Arbitrado",
    )

    reg_T181_ids = fields.One2many(
        "l10n_br_sped.ecf.t181",
        "reg_T181_ids_RegistroT030_id",
        string="T181 Cálculo da CSLL com Base no Lucro Arbitrado",
        sped_card="[0;N]",
        sped_required=True,
    )


class RegistroT120(models.AbstractModel):
    "Apuração da Base de Cálculo do IRPJ com Base no Lucro Arbitrado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.t120"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T120_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.t030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das Empresas"
            " Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroT150(models.AbstractModel):
    "Cálculo do Imposto de Renda com Base no Lucro Arbitrado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.t150"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T150_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.t030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das Empresas"
            " Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroT170(models.AbstractModel):
    "Apuração da Base de Cálculo da CSLL com Base no Lucro Arbitrado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.t170"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T170_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.t030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das Empresas"
            " Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroT181(models.AbstractModel):
    "Cálculo da CSLL com Base no Lucro Arbitrado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.t181"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T181_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.t030",
        string="Identificação dos Períodos e Forma de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das Empresas"
            " Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroU030(models.AbstractModel):
    """Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das
    Empresas Imunes e Isentas"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.u030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data do Início do Período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data do Fim do período", required=True, sped_length="8"
    )

    PER_APUR = fields.Char(
        string="Período de apuração",
        required=True,
        sped_length="3",
        help=(
            "Período de apuração (para 0010.APUR_CSLL = “A”): A00 – Anual A01 – Rec. "
            "Bruta de janeiro /Balanço suspensão redução até janeiro A02 – Rec. Bruta "
            "de fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. Bruta de "
            "março /Balanço suspensão redução até março A04 – Rec. Bruta de abril "
            "/Balanço suspensão redução até abril A05 – Rec. Bruta de maio /Balanço "
            "suspensão redução até maio A06 – Rec. Bruta de junho /Balanço suspensão "
            "redução até junho A07 – Rec. Bruta de julho /Balanço suspensão redução até"
            " julho A08 – Rec. Bruta de agosto /Balanço suspensão redução até agosto "
            "A09 – Rec. Bruta de setembro /Balanço suspensão redução até setembro A10 –"
            " Rec. Bruta de outubro/Balanço suspensão redução até outubro A11 – Rec. "
            "Bruta de novembro /Balanço suspensão redução até novembro A12 – Rec. Bruta"
            " de dezembro/Balanço suspensão redução até dezembro Período de apuração "
            "(para 0010.APUR_CSLL = “T”): T01 – 1º Trimestre T02 – 2º Trimestre T03 – "
            "3º Trimestre T04 – 4º Trimestre"
        ),
    )

    reg_U100_ids = fields.One2many(
        "l10n_br_sped.ecf.u100",
        "reg_U100_ids_RegistroU030_id",
        string="U100 Balanço Patrimonial",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_U150_ids = fields.One2many(
        "l10n_br_sped.ecf.u150",
        "reg_U150_ids_RegistroU030_id",
        string="U150 Demonstração do Resultado",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_U180_ids = fields.One2many(
        "l10n_br_sped.ecf.u180",
        "reg_U180_ids_RegistroU030_id",
        string="U180 Cálculo do IRPJ das Empresas Imunes",
        sped_card="[0;N]",
        sped_required=True,
        help="U180 Cálculo do IRPJ das Empresas Imunes ou Isentas",
    )

    reg_U182_ids = fields.One2many(
        "l10n_br_sped.ecf.u182",
        "reg_U182_ids_RegistroU030_id",
        string="U182 Cálculo da CSLL das Empresas Imunes",
        sped_card="[0;N]",
        sped_required=True,
        help="U182 Cálculo da CSLL das Empresas Imunes ou Isentas",
    )


class RegistroU100(models.AbstractModel):
    "Balanço Patrimonial"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.u100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        sped_length="5",
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme tabela "
            "dinâmica do Sped (Disponibilizada no item II deste registro e no programa "
            "da ECF, no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta",
        required=True,
        sped_length="1",
        help="Indicador do Tipo de Conta: S – Sintética A – Analítica",
    )

    NIVEL = fields.Char(
        string="Nível da Conta", xsd_type="numeric_code", sped_length="3"
    )

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        sped_length="2",
        help=(
            "Natureza da Conta, conforme tabela do Sped (Disponibilizada no programa da"
            " ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    VAL_CTA_REF_INI = fields.Monetary(
        string="Saldo Inicial da Conta Referencial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_CTA_REF_INI = fields.Char(
        string="Indicador da Situação do Saldo Inicial",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Inicial: D – Devedor C – Credor",
    )

    VAL_CTA_REF_DEB = fields.Monetary(
        string="Valor Total dos Débitos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total dos Débitos: Somatório dos valores mapeados.",
    )

    VAL_CTA_REF_CRED = fields.Monetary(
        string="Valor Total dos Créditos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total dos Créditos: Somatório dos valores mapeados.",
    )

    VAL_CTA_REF_FIN = fields.Char(
        string="Saldo Final da Conta Referencial", required=True, sped_length="19"
    )

    IND_VAL_CTA_REF_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_U100_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.u030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das "
            "Empresas Imunes e Isentas"
        ),
    )


class RegistroU150(models.AbstractModel):
    "Demonstração do Resultado"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.u150"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        sped_length="5",
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme tabela "
            "dinâmica do Sped (Disponibilizada no item III deste registro e no programa"
            " da ECF, no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta",
        required=True,
        sped_length="1",
        help="Indicador do Tipo de Conta: S – Sintética A – Analítica",
    )

    NIVEL = fields.Char(
        string="Nível da Conta", xsd_type="numeric_code", sped_length="3"
    )

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        sped_length="2",
        help="Natureza da Conta: 04 – Contas de Resultado",
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética",
        help="Código da Conta Sintética de Nível Imediatamente Superior.",
    )

    VALOR = fields.Monetary(
        string="Saldo Final da Conta Referencial",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do Sinal do Saldo Final",
        required=True,
        sped_length="1",
        help="Indicador do Sinal do Saldo Final: C – Credor D – Devedor",
    )

    reg_U150_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.u030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das "
            "Empresas Imunes e Isentas"
        ),
    )


class RegistroU180(models.AbstractModel):
    "Cálculo do IRPJ das Empresas Imunes ou Isentas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.u180"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_U180_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.u030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das "
            "Empresas Imunes e Isentas"
        ),
    )


class RegistroU182(models.AbstractModel):
    "Cálculo da CSLL das Empresas Imunes ou Isentas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.u182"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_U182_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.u030",
        string="Identificação dos Períodos e Formas de Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das "
            "Empresas Imunes e Isentas"
        ),
    )


class RegistroV010(models.AbstractModel):
    "DEREX – Instituição"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.v010"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    NOME_INSTITUICAO = fields.Char(string="Nome da Instituição", required=True)

    PAIS = fields.Char(
        string="Código do País da Instituição", required=True, sped_length="2"
    )

    TIP_MOEDA = fields.Char(
        string="Deve ser selecionada a moeda utilizada",
        required=True,
        help="Deve ser selecionada a moeda utilizada na Declaração",
    )

    reg_V020_ids = fields.One2many(
        "l10n_br_sped.ecf.v020",
        "reg_V020_ids_RegistroV010_id",
        string="V020 DEREX",
        sped_card="[1;N]",
        sped_required=True,
        help="V020 DEREX - Responsável pela Movimentação",
    )

    reg_V030_ids = fields.One2many(
        "l10n_br_sped.ecf.v030",
        "reg_V030_ids_RegistroV010_id",
        string="V030 DEREX - Período – Mês",
        sped_card="[1;12]",
        sped_required=True,
    )


class RegistroV020(models.AbstractModel):
    "DEREX - Responsável pela Movimentação"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.v020"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    NOME = fields.Char(string="Nome do responsável", required=True)

    ENDERECO = fields.Char(string="Endereço do responsável", required=True)

    TIPO_DO_C = fields.Char(string="Tipo de documento do responsável", required=True)

    NI = fields.Char(string="Número do documento do responsável", required=True)

    IDENT_CONTA = fields.Char(string="Identificação das contas", required=True)

    reg_V020_ids_RegistroV010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.v010",
        string="DEREX – Instituição",
        required=True,
        ondelete="cascade",
    )


class RegistroV030(models.AbstractModel):
    "DEREX - Período – Mês"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.v030"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    MES = fields.Char(string="Mês", required=True, sped_length="2")

    reg_V030_ids_RegistroV010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.v010",
        string="DEREX – Instituição",
        required=True,
        ondelete="cascade",
    )

    reg_V100_ids = fields.One2many(
        "l10n_br_sped.ecf.v100",
        "reg_V100_ids_RegistroV030_id",
        string="V100 Demonstrativo dos recursos",
        sped_card="[1;N]",
        sped_required=True,
        help=(
            "V100 Demonstrativo dos recursos em moeda estrangeira decorrentes do "
            "recebimento de exportações"
        ),
    )


class RegistroV100(models.AbstractModel):
    """Demonstrativo dos recursos em moeda estrangeira decorrentes do
    recebimento de exportações"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.v100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    CODIGO = fields.Char(
        string="Identificação da linha",
        required=True,
        sped_length="2",
        help="Identificação da linha, conforme tabela publicada pela RFB.",
    )

    DESCRICAO = fields.Char(
        string="Descrição da linha",
        sped_length="1",
        help="Descrição da linha, conforme tabela publicada pela RFB",
    )

    VALOR = fields.Char(string="Valor da Linha")

    reg_V100_ids_RegistroV030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.v030",
        string="DEREX - Período – Mês",
        required=True,
        ondelete="cascade",
    )


class RegistroW100(models.AbstractModel):
    "Informações Sobre o Grupo Multinacional e a Entidade Declarante"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.w100"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    NOME_MULTINACIONAL = fields.Char(
        string="Nome do Grupo Multinacional",
        required=True,
        help=(
            "Nome do Grupo Multinacional: Deve ser identificado o nome do grupo "
            "multinacional o qual o contribuinte integra."
        ),
    )

    IND_CONTROLADORA = fields.Char(
        string="A Identifica se a Entidade é a Controladora Final",
        required=True,
        sped_length="1",
        help=(
            "A Identifica se a Entidade é a Controladora Final do Grupo Multinacional. "
            "Entidade é controladora final do grupo multinacional, conforme definição "
            "estabelecida no artigo 2º, inciso VI, da Instrução Normativa RFB nº "
            "1.681/2016.? S - Sim N – Não"
        ),
    )

    NOME_CONTROLADORA = fields.Char(
        string="Nome da Controladora Final",
        required=True,
        help=(
            "Nome da Controladora Final. Observação: Caso a entidade não seja a "
            "controladora final do grupo multinacional do qual faz parte, deve "
            "identificar a entidade que possui essa posição, por meio do nome legal "
            "completo da entidade, incluindo a designação doméstica da forma legal, "
            "conforme indicado em seus documentos de constituição ou similares."
        ),
    )

    JURISDICAO_CONTROLADORA = fields.Char(
        string="Jurisdição de Residência para fins Tributários",
        required=True,
        sped_length="2",
        help=(
            "Jurisdição de Residência para fins Tributários do Controlador Final, "
            "conforme tabela do Sped (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    TIN_CONTROLADORA = fields.Char(
        string="Tax Identification Number",
        required=True,
        help=(
            "Tax Identification Number (TIN): Número de identificação fiscal utilizado "
            "pela administração tributária da jurisdição de residência para fins "
            "tributários do controlador final do grupo multinacional. Caso não exista o"
            " número, o campo deve ser preenchido com a expressão 'NOTIN'. Se o "
            "controlador final for residente no Brasil, informar o CNPJ. Observação: "
            "Este campo não deve ser preenchido quando a declarante da ECF for a "
            "controladora final (W100.IND_CONTROLADORA = Sim)."
        ),
    )

    IND_ENTREGA = fields.Char(
        string="E Identifica a Entidade Responsável pela Entrega",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "E Identifica a Entidade Responsável pela Entrega da Declaração País-a-País"
            " (entidade declarante). ntidade responsável pela entrega da Declaração "
            "País-a-País: 1 - Grupo multinacional dispensado da entrega da Declaração "
            "País-a-País. 2 - Controlador final do grupo multinacional. 3 - Própria "
            "entidade declarante da ECF, na condição de Entidade Substituta ou de "
            "Preenchimento Local 4 - Outra entidade, na condição de Entidade Substituta"
            " ou de Preenchimento Local"
        ),
    )

    IND_MODALIDADE = fields.Char(
        string="S S S S Identifica a Modalidade de entrega",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "S S S S Identifica a Modalidade de entrega da Declaração País-a-País: 1 - "
            "Entidade substituta. 2 - Preenchimento Local. e IND_ENTREGA = '3' e "
            "IND_MODALIDADE = '1', então a própria entidade declarante da ECF é "
            "responsável pela entrega da Declaração País-a- País na condição de "
            "Entidade Substituta. e IND_ENTREGA = '4' e IND_MODALIDADE = '1', então "
            "outra entidade é responsável pela entrega da Declaração País-a-País na "
            "condição de Entidade Substituta. e IND_ENTREGA = '3' e IND_MODALIDADE = "
            "'2', então a própria entidade declarante da ECF é responsável pela entrega"
            " da Declaração País-a- País na condição de Preenchimento Local. e "
            "IND_ENTREGA = '4' e IND_MODALIDADE = '2', então outra entidade é "
            "responsável pela entrega da Declaração País-a-País na condição de "
            "Preenchimento Local."
        ),
    )

    NOME_SUBSTITUTA = fields.Char(
        string="Nome da Entidade Substituta/Entidade Local",
        help=(
            "Nome da Entidade Substituta/Entidade Local: Caso a entidade declarante da "
            "Declaração País-a-País seja outra entidade, na condição de Entidade "
            "Substituta (residente no Brasil ou no exterior) ou de Preenchimento Local,"
            " o contribuinte deve identificá-la por meio do nome legal completo da "
            "entidade, incluindo a designação doméstica da forma legal, conforme "
            "indicado em seus documentos de constituição ou similares."
        ),
    )

    JURISDICAO_SUBSTITUTA = fields.Char(
        string="JURISDICAO_SUBSTITUTA",
        sped_length="2",
        help=(
            "Jurisdição de Residência para fins Tributários da Entidade "
            "Substituta/Entidade Local, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas). Observação: O contribuinte deve "
            "indicar o país de residência para fins tributários da entidade declarante,"
            " seja ela entidade substituta residente no Brasil ou no exterior, ou outra"
            " entidade na condição de preenchimento local. Neste último caso, a "
            "jurisdição a ser informada deve ser obrigatoriamente Brasil (pois a "
            "modalidade de entrega da Declaração de preenchimento local só é admitida "
            "para entidades residentes no Brasil)."
        ),
    )

    TIN_SUBSTITUTA = fields.Char(
        string="Tax Identification Number (TIN_SUBSTITUTA)",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "Tax Identification Number (TIN): Número de identificação fiscal utilizado "
            "pela administração tributária da jurisdição de residência para fins "
            "tributários da entidade substituta do grupo multinacional ou da entidade "
            "integrante local. Caso não exista o número, o campo deve ser preenchido "
            "com a expressão 'NOTIN'. Se a entidade for residente no Brasil, informar o"
            " CNPJ."
        ),
    )

    DT_INI = fields.Date(
        string="Data de Início do Período Societário",
        sped_length="8",
        help=(
            "Data de Início do Período Societário. Observação: A Declaração País-a-País"
            " deve cobrir o ano fiscal do controlador final do grupo multinacional. "
            "Dessa forma, caso o contribuinte seja a entidade declarante na condição de"
            " entidade substituta ou na forma de preenchimento local, hipóteses em que "
            "o controlador final do grupo é residente no exterior, o ano fiscal de "
            "declaração deve ser o período societário do controlador final, mesmo que "
            "não coincida com o período societário do próprio contribuinte. Exemplo: O "
            "ano fiscal do contribuinte brasileiro vai de 01/01/XXXX a 31/12/XXXX, "
            "enquanto que o ano fiscal do controlador final do grupo multinacional do "
            "qual faz parte, residente no exterior, vai de 01/10/XXXX a 30/09/XXXX. "
            "Nesse caso, o período que deve ser abrangido pela Declaração País-a-País, "
            "e que deve ser devidamente informado neste campo e no campo 13, é o ano "
            "fiscal do controlador final, ou seja, 01/10/XXXX a 30/09/XXXX."
        ),
    )

    DT_FIN = fields.Date(
        string="i Data Final do Período Societário",
        sped_length="8",
        help=(
            "i Data Final do Período Societário. Observações: i) O ano fiscal da "
            "Declaração País-a-País deve ser o ano fiscal encerrado imediatamente "
            "anterior, podendo, dessa forma, ter data final igual ou anterior à data "
            "final do período a que se refere a ECF. i) Caso o período a que se refere "
            "a Declaração País-a-País não corresponda a um ano completo, devem ser "
            "fornecidos esclarecimentos no campo de informações adicionais do registro "
            "W300."
        ),
    )

    TIP_MOEDA = fields.Char(
        string="O Moeda",
        sped_length="3",
        help=(
            "O Moeda: a entidade deve indicar qual a moeda utilizada nas informações em"
            " valores fornecidas na Declaração País-a-País, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). bservação: As "
            "informações em valores da Declaração País-a-País devem ser prestadas em "
            "uma única moeda, que deve ser a moeda do controlador final do grupo "
            "multinacional."
        ),
    )

    IND_IDIOMA = fields.Char(
        string="Idioma Utilizado nas Informações Adicionais",
        sped_length="2",
        help=(
            "Idioma Utilizado nas Informações Adicionais da Declaração País-a-País. "
            "Deve ser indicado o idioma utilizado nos campos de informações adicionais "
            "da DPP, fornecidas em texto livre, caso tenham sido prestadas: PT - "
            "Português. EN - Inglês. ES - Espanhol."
        ),
    )

    reg_W200_ids = fields.One2many(
        "l10n_br_sped.ecf.w200",
        "reg_W200_ids_RegistroW100_id",
        string="W200 Declaração País a País",
        sped_card=(
            "[0;N] Observação: Quando for obrigatório, deverá aparecer, no mínimo, duas"
            " vezes."
        ),
        sped_required=True,
    )


class RegistroW200(models.AbstractModel):
    "Declaração País a País"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.w200"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    JURISDICAO = fields.Char(
        string="Jurisdição de Residência para fins Tributários",
        required=True,
        sped_length="2",
        help=(
            "Jurisdição de Residência para fins Tributários, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). A entidade "
            "declarante deve listar todas as jurisdições nas quais entidades "
            "integrantes do grupo multinacional são residentes para fins tributários e "
            "aquelas em que opera por meio de um estabelecimento permanente (ou seja, "
            "todas as jurisdições nas quais o grupo multinacional opera). Para cada uma"
            " dessas jurisdições, deverão ser fornecidas, de maneira agregada (isto é, "
            "somados os valores de todas as entidades integrantes do grupo "
            "multinacional presentes em cada jurisdição) as informações solicitadas nos"
            " campos subsequentes. Observação: Caso exista uma ou mais entidades "
            "integrantes do grupo multinacional que sejam consideradas sem residência "
            "para fins tributários, o campo W200.JURISDICAO deve ser preenchido com o "
            "código X5 (Sem residência para fins tribvutários). Para esse campo, "
            "deverão ser reportadas, de maneira agregada, as informações a respeito de "
            "todas as entidades integrantes do grupo multinacional consideradas sem "
            "residência para fins tributários."
        ),
    )

    VL_REC_NAO_REL_EST = fields.Integer(
        string="Receitas Provenientes de Partes Não Relacionadas",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Receitas Provenientes de Partes Não Relacionadas em Moeda Estrangeira "
            "(identificada no campo W100.TIP_MOEDA): O contribuinte deve informar a "
            "soma das receitas, em moeda estrangeira, de todas as entidades integrantes"
            " do grupo multinacional presentes na jurisdição tributária em questão que "
            "tenham sido geradas de transações com partes não relacionadas. Observação:"
            " Esse campo deve ser preenchido somente se W100.TIP_MOEDA for diferente de"
            " Real."
        ),
    )

    VL_REC_NAO_REL = fields.Integer(
        string="VL_REC_NAO_REL",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Receitas Provenientes de Partes Não Relacionadas: O contribuinte deve "
            "informar a soma das receitas, em reais, de todas as entidades integrantes "
            "do grupo multinacional presentes na jurisdição tributária em questão que "
            "tenham sido geradas de transações com partes não relacionadas. Observação:"
            " Caso o campo W200.VL_REC_NAO_REL_EST seja informado, este campo será "
            "calculado pelo sistema, utilizando como base para conversão tabela do "
            "Banco Central para a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_REC_REL_EST = fields.Integer(
        string="Receitas Provenientes de Partes Relacionadas",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Receitas Provenientes de Partes Relacionadas em Moeda Estrangeira "
            "(identificada no campo W100.TIP_MOEDA): O contribuinte deve informar a "
            "soma das receitas, em moeda estrangeira, de todas as entidades integrantes"
            " do grupo multinacional presentes na jurisdição tributária em questão que "
            "tenham sido geradas de transações com partes relacionadas. Observação: "
            "Esse campo deve ser preenchido somente se W100.TIP_MOEDA for diferente de "
            "Real."
        ),
    )

    VL_REC_REL = fields.Integer(
        string="VL_REC_REL",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Receitas Provenientes de Partes Relacionadas: O contribuinte deve informar"
            " a soma das receitas, em reais, de todas as entidades integrantes do grupo"
            " multinacional presentes na jurisdição tributária em questão que tenham "
            "sido geradas de transações com partes relacionadas. Observação: Caso o "
            "campo W200.VL_REC_REL_EST seja informado, este campo será calculado pelo "
            "sistema, utilizando como base para conversão tabela do Banco Central para "
            "a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_REC_TOTAL_EST = fields.Integer(
        string="Receita Total em Moeda Estrangeira",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Receita Total em Moeda Estrangeira (identificada no campo W100.TIP_MOEDA):"
            " Soma das receitas provenientes de partes não relacionadas e das receitas "
            "provenientes de partes relacionadas, caso tenham sido informadas em moeda "
            "estrangeira. Este campo será calculado pelo sistema "
            "(W200.VL_REC_NAO_REL_EST + W200.VL_REC_REL_EST)."
        ),
    )

    VL_REC_TOTAL = fields.Integer(
        string="Receita Total",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Receita Total: Soma das receitas provenientes de partes não relacionadas e"
            " das receitas provenientes de partes relacionadas, caso tenham sido "
            "informadas em reais. Este campo será calculado pelo sistema "
            "(W200.VL_REC_NAO_REL + W200.VL_REC_REL)."
        ),
    )

    VL_LUC_PREJ_ANTES_IR_EST = fields.Char(
        string="Lucro ou Prejuízo Antes do IR em Moeda Estrangeira",
        sped_length="19",
        help=(
            "Lucro ou Prejuízo Antes do IR em Moeda Estrangeira (identificada no campo "
            "W100.TIP_MOEDA): Deve ser reportada a soma do lucro (ou prejuízo) antes do"
            " imposto de renda, em moeda estrangeira, de todas as entidades integrantes"
            " do grupo multinacional presentes na jurisdição em questão. O lucro (ou "
            "prejuízo) antes do imposto de renda deve incluir todas as receitas e "
            "despesas extraordinárias. Observação: Esse campo deve ser preenchido "
            "somente se W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_LUC_PREJ_ANTES_IR = fields.Char(
        string="Lucro ou Prejuízo Antes do IR",
        required=True,
        sped_length="19",
        help=(
            "Lucro ou Prejuízo Antes do IR: Deve ser reportada a soma do lucro (ou "
            "prejuízo) antes do imposto de renda, em reais, de todas as entidades "
            "integrantes do grupo multinacional presentes na jurisdição em questão. O "
            "lucro (ou prejuízo) antes do imposto de renda deve incluir todas as "
            "receitas e despesas extraordinárias. Observação: Caso o campo "
            "W200.VL_LUC_PREJ_ANTES_IR_EST seja informado, este campo será calculado "
            "pelo sistema, utilizando como base para conversão tabela do Banco Central "
            "para a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_IR_PAGO_EST = fields.Integer(
        string="Imposto de Renda Pago",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Imposto de Renda Pago, em moeda estrangeira (identificada no campo "
            "W100.TIP_MOEDA): deve ser informado o montante total de imposto de renda "
            "efetivamente pago, em moeda estrangeira, durante o ano fiscal de "
            "declaração por todas as entidades integrantes do grupo multinacional "
            "presentes na jurisdição reportada. Nesse montante devem ser incluídos "
            "impostos pagos por uma entidade integrante a sua própria jurisdição de "
            "residência para fins tributários e para todas as outras jurisdições. "
            "Também estão incluídos valores pagos a título de imposto de renda retido "
            "na fonte por outras entidades (sejam elas independentes ou relacionadas) "
            "com relação a pagamentos realizados a uma entidade integrante do grupo "
            "multinacional. Dessa forma, se, por exemplo: a entidade A, residente na "
            "jurisdição A, recebe valores a título de juros na jurisdição B, o imposto "
            "retido na jurisdição B deve ser reportado pela entidade A (isto é, com "
            "referência à jurisdição em que a entidade A está situada). Observação: "
            "Esse campo deve ser preenchido somente se W100.TIP_MOEDA for diferente de "
            "Real."
        ),
    )

    VL_IR_PAGO = fields.Integer(
        string="Imposto de Renda Pago (VL_IR_PAGO)",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Imposto de Renda Pago: deve ser informado o montante total de imposto de "
            "renda efetivamente pago, em reais, durante o ano fiscal de declaração por "
            "todas as entidades integrantes do grupo multinacional presentes na "
            "jurisdição reportada. Nesse montante devem ser incluídos impostos pagos "
            "por uma entidade integrante a sua própria jurisdição de residência para "
            "fins tributários e para todas as outras jurisdições. Também estão "
            "incluídos valores pagos a título de imposto de renda retido na fonte por "
            "outras entidades (sejam elas independentes ou relacionadas) com relação a "
            "pagamentos realizados a uma entidade integrante do grupo multinacional. "
            "Dessa forma, se, por exemplo: a entidade A, residente na jurisdição A, "
            "recebe valores a título de juros na jurisdição B, o imposto retido na "
            "jurisdição B deve ser reportado pela entidade A (isto é, com referência à "
            "jurisdição em que a entidade A está situada). Observação: Caso o campo "
            "W200.VL_IR_PAGO_EST seja informado, este campo será calculado pelo "
            "sistema, utilizando como base para conversão tabela do Banco Central para "
            "a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_IR_DEVIDO_EST = fields.Integer(
        string="Imposto de Renda Devido",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Imposto de Renda Devido, em moeda estrangeira (identificada no campo "
            "W100.TIP_MOEDA): Deve ser informada a soma do imposto de renda devido, em "
            "moeda estrangeira, sobre os lucros tributáveis ou prejuízos no ano fiscal "
            "de declaração de todas as entidades integrantes do grupo multinacional "
            "residentes para fins tributários na jurisdição reportada. A despesa deve "
            "refletir apenas operações realizadas no ano e não inclui impostos "
            "diferidos ou provisões para passivos tributários incertos. Observação: "
            "Esse campo deve ser preenchido somente se W100.TIP_MOEDA for diferente de "
            "Real."
        ),
    )

    VL_IR_DEVIDO = fields.Integer(
        string="Imposto de Renda Devido (VL_IR_DEVIDO)",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Imposto de Renda Devido: Deve ser informada a soma do imposto de renda "
            "devido, em reais, sobre os lucros tributáveis ou prejuízos no ano fiscal "
            "de declaração de todas as entidades integrantes do grupo multinacional "
            "residentes para fins tributários na jurisdição reportada. A despesa deve "
            "refletir apenas operações realizadas no ano e não inclui impostos "
            "diferidos ou provisões para passivos tributários incertos. Observação: "
            "Caso o campo W200.VL_IR_DEVIDO_EST seja informado, este campo será "
            "calculado pelo sistema, utilizando como base para conversão tabela do "
            "Banco Central para a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_CAP_SOC_EST = fields.Integer(
        string="Capital Social em Moeda Estrangeira",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Capital Social em Moeda Estrangeira (identificada no campo "
            "W100.TIP_MOEDA): A entidade declarante deve reportar a soma do capital "
            "social, em moeda estrangeira, de todas as entidades integrantes residentes"
            " para fins tributários na jurisdição informada. Quanto aos "
            "estabelecimentos permanentes, o capital social deve ser reportado pela "
            "entidade à qual o estabelecimento está relacionado, a menos que exista, na"
            " jurisdição onde o estabelecimento permanente está situado, a "
            "obrigatoriedade de um capital definido, para fins regulatórios. Nesse "
            "caso, o capital atribuído a um estabelecimento permanente deve ser "
            "especificado no campo de Informações Adicionais do registro W300. "
            "Observação: Esse campo deve ser preenchido somente se W100.TIP_MOEDA for "
            "diferente de Real."
        ),
    )

    VL_CAP_SOC = fields.Integer(
        string="Capital Social",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Capital Social: A entidade declarante deve reportar a soma do capital "
            "social, em reais, de todas as entidades integrantes residentes para fins "
            "tributários na jurisdição informada. Quanto aos estabelecimentos "
            "permanentes, o capital social deve ser reportado pela entidade à qual o "
            "estabelecimento está relacionado, a menos que exista, na jurisdição onde o"
            " estabelecimento permanente está situado, a obrigatoriedade de um capital "
            "definido, para fins regulatórios. Nesse caso, o capital atribuído a um "
            "estabelecimento permanente deve ser especificado no registro de "
            "Informações Adicionais do registro W300. Observação: Caso o campo "
            "W200.VL_CAP_SOC_EST seja informado, este campo será calculado pelo "
            "sistema, utilizando como base para conversão tabela do Banco Central para "
            "a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_LUC_ACUM_EST = fields.Integer(
        string="Lucros Acumulados em Moeda Estrangeira",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Lucros Acumulados em Moeda Estrangeira (identificada no campo "
            "W100.TIP_MOEDA): A entidade declarante deve reportar a soma do total de "
            "lucros acumulados, em moeda estrangeira, de todas as entidades integrantes"
            " do grupo multinacional residentes para fins tributários na jurisdição "
            "informada. No que diz respeito aos estabelecimentos permanentes, os lucros"
            " acumulados devem ser reportados pela entidade à qual o estabelecimento "
            "está relacionado. Observação: Esse campo deve ser preenchido somente se "
            "W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_LUC_ACUM = fields.Integer(
        string="Lucros Acumulados",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Lucros Acumulados: A entidade declarante deve reportar a soma do total de "
            "lucros acumulados, em reais, de todas as entidades integrantes do grupo "
            "multinacional residentes para fins tributários na jurisdição informada. No"
            " que diz respeito aos estabelecimentos permanentes, os lucros acumulados "
            "devem ser reportados pela entidade à qual o estabelecimento está "
            "relacionado. Observação: Caso o campo W200.LUC_ACUM_EST seja informado, "
            "este campo será calculado pelo sistema, utilizando como base para "
            "conversão tabela do Banco Central para a data de 31 de dezembro do ano da "
            "Declaração."
        ),
    )

    VL_ATIV_TANG_EST = fields.Integer(
        string="Ativos Tangíveis",
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Ativos Tangíveis (exceto caixa e equivalentes de caixa) em Moeda "
            "Estrangeira (identificada no campo W100.TIP_MOEDA): Deve ser informada a "
            "soma do valor contábil líquido dos ativos tangíveis, em moeda estrangeira,"
            " de todas as entidades integrantes do grupo multinacional residentes para "
            "fins tributários na jurisdição indicada. Quanto aos estabelecimentos "
            "permanentes, seus ativos devem ser reportados com referência à jurisdição "
            "na qual o estabelecimento está situado. Para fins da Declaração País-a-"
            "País, ativos tangíveis não incluem caixa ou itens equivalentes de caixa, "
            "intangíveis ou ativos financeiros. Observação: Esse campo deve ser "
            "preenchido somente se W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_ATIV_TANG = fields.Integer(
        string="Ativos Tangíveis (VL_ATIV_TANG)",
        required=True,
        sped_length="19",
        currency_field="brl_currency_id",
        help=(
            "Ativos Tangíveis (exceto caixa e equivalentes de caixa): Deve ser "
            "informada a soma do valor contábil líquido dos ativos tangíveis, em reais,"
            " de todas as entidades integrantes do grupo multinacional residentes para "
            "fins tributários na jurisdição indicada. Quanto aos estabelecimentos "
            "permanentes, seus ativos devem ser reportados com referência à jurisdição "
            "na qual o estabelecimento está situado. Para fins da Declaração País-a-"
            "País, ativos tangíveis não incluem caixa ou itens equivalentes de caixa, "
            "intangíveis ou ativos financeiros. Observação: Caso o campo "
            "W200.VL_ATIV_TANG_EST seja informado, este campo será calculado pelo "
            "sistema, utilizando como base para conversão tabela do Banco Central para "
            "a data de 31 de dezembro do ano da Declaração."
        ),
    )

    NUM_EMP = fields.Integer(
        string="Número de Empregados",
        required=True,
        sped_length="7",
        help=(
            "Número de Empregados: Deve ser informado o número total de empregados, "
            "trabalhadores e demais colaboradores de todas as entidades integrantes do "
            "grupo multinacional residentes para fins tributários na jurisdição "
            "indicada. O número de empregados deve ser totalizado ao final do ano, e "
            "reportado com base na média registrada para o ano ou outro critério "
            "aplicado de maneira consistente entre as jurisdições do grupo e para todos"
            " os anos. Para fins da Declaração País- a-País, profissionais "
            "independentes contratados participantes das atividades operacionais "
            "ordinárias da entidade integrante devem ser reportados como empregados. "
            "Arredondamentos ou aproximações razoáveis do número de empregados são "
            "permitidas, desde que não gerem distorções relevantes à distribuição "
            "relativa de empregados entre as diversas jurisdições tributárias onde o "
            "grupo opera. Critérios consistentes devem ser aplicados de um ano para "
            "outro entre as entidades."
        ),
    )

    reg_W200_ids_RegistroW100_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.w100",
        string="Informações Sobre o Grupo Multinacional",
        required=True,
        ondelete="cascade",
        help="Informações Sobre o Grupo Multinacional e a Entidade Declarante",
    )

    reg_W250_ids = fields.One2many(
        "l10n_br_sped.ecf.w250",
        "reg_W250_ids_RegistroW200_id",
        string="W250 Declaração País a País",
        sped_card="[0;N]",
        sped_required=True,
        help="W250 Declaração País a País - Entidades Integrantes",
    )


class RegistroW250(models.AbstractModel):
    "Declaração País a País - Entidades Integrantes"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.w250"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 4

    JUR_DIFERENTE = fields.Char(
        string="Jurisdição Tributária de Organização",
        sped_length="2",
        help=(
            "Jurisdição Tributária de Organização ou Incorporação, se diferente da "
            "jurisdição de residência para fins tributários, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas): A entidade "
            "declarante deve informar a jurisdição sob cuja legislação a entidade "
            "integrante do grupo multinacional está estabelecida, se diferente da "
            "jurisdição de residência para fins tributários."
        ),
    )

    NOME = fields.Char(
        string="Nome/Razão Social da Entidade Integrante",
        required=True,
        help=(
            "Nome/Razão Social da Entidade Integrante: Nome legal completo da entidade,"
            " incluindo a designação doméstica da forma legal, conforme indicado em "
            "seus documentos de constituição ou similares. Caso a entidade seja um "
            "estabelecimento permanente, deverá ser reportada com referência à "
            "jurisdição onde está situada, e seu nome deve ser seguido por (P.E.), "
            "designação que significa, em inglês, “Permanent Establishment” "
            "(Estabelecimento Permanente). Além disso, deve ser indicada a entidade "
            "legal ao qual o estabelecimento permanente está relacionado. Exemplo: ABC "
            "P.E. (XYZ Ltda – China)"
        ),
    )

    TIN = fields.Char(
        string="Tax Identification Number",
        required=True,
        help=(
            "Tax Identification Number (TIN): Número de identificação fiscal utilizado "
            "pela administração tributária da jurisdição de residência para fins "
            "tributários da entidade integrante reportada. Caso a entidade integrante "
            "reportada possua esse número de identificação, a informação é de "
            "fornecimento obrigatório. Para entidades residentes no Brasil, deve ser "
            "informado o CNPJ. Observação: Caso não exista o número, deve ser incluída "
            "a expressão 'NOTIN'."
        ),
    )

    JURISDICAO_TIN = fields.Char(
        string="Jurisdição de Emissão do TIN",
        required=True,
        sped_length="2",
        help=(
            "Jurisdição de Emissão do TIN, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    NI = fields.Char(
        string="Número de Identificação",
        help=(
            "Número de Identificação (NI): O campo deve ser preenchido em caso de "
            "existência de outro número de identificação da entidade, como um número de"
            " registro ou um número de identificação global da entidade (“Global Entity"
            " Identification Number” – EIN)."
        ),
    )

    JURISDICAO_NI = fields.Char(
        string="Jurisdição de Emissão do NI",
        sped_length="2",
        help=(
            "Jurisdição de Emissão do NI, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas). Observação: Caso a jurisdição de "
            "emissão do NI não seja conhecida, o campo deve ser deixado em branco."
        ),
    )

    TIPO_NI = fields.Char(
        string="Tipo do NI: Deve ser descrito",
        help=(
            "Tipo do NI: Deve ser descrito, em texto livre, o tipo do número de "
            "identificação (NI) informado no W250.NI. Exemplo: número de identificação "
            "global da entidade (“Global Entity Identification Number” – EIN)."
        ),
    )

    TIP_END = fields.Char(
        string="O Tipo do Endereço",
        required=True,
        sped_length="7",
        help=(
            "O Tipo do Endereço: A entidade declarante deve indicar, dentre as opções "
            "disponíveis de preenchimento do campo, o tipo do endereço da entidade "
            "integrante que está sendo reportada, o qual deverá ser descrito no campo "
            "seguinte. ECD302 - Residencial OECD303 - Comercial"
        ),
    )

    ENDERECO = fields.Char(
        string="Deve ser fornecido, em texto livre",
        required=True,
        sped_length="15",
        help=(
            "Deve ser fornecido, em texto livre, o endereço completo de residência "
            "permanente da entidade integrante reportada."
        ),
    )

    NUM_TEL = fields.Char(
        string="Número de telefone completo",
        sped_length="15",
        help="Número de telefone completo da entidade integrante reportada.",
    )

    EMAIL = fields.Char(
        string="Endereço de e-mail para contato",
        sped_length="115",
        help="Endereço de e-mail para contato com a entidade integrante reportada.",
    )

    ATIV_1 = fields.Char(
        string="Pesquisa e Desenvolvimento: S",
        required=True,
        sped_length="1",
        help="Pesquisa e Desenvolvimento: S - Sim N – Não",
    )

    ATIV_2 = fields.Char(
        string="Gestão de Propriedade Intelectual: S",
        required=True,
        sped_length="1",
        help="Gestão de Propriedade Intelectual: S - Sim N – Não",
    )

    ATIV_3 = fields.Char(
        string="Compras: S - Sim N – Não", required=True, sped_length="1"
    )

    ATIV_4 = fields.Char(
        string="Manufatura ou Produção: S",
        required=True,
        sped_length="1",
        help="Manufatura ou Produção: S - Sim N – Não",
    )

    ATIV_5 = fields.Char(
        string="Vendas",
        required=True,
        sped_length="1",
        help="Vendas, Marketing ou Distribuição: S - Sim N – Não",
    )

    ATIV_6 = fields.Char(
        string="Serviços Administrativos",
        required=True,
        sped_length="1",
        help="Serviços Administrativos, de Gestão ou de Suporte: S - Sim N – Não",
    )

    ATIV_7 = fields.Char(
        string="Prestação de Serviços a Partes Não Relacionadas",
        required=True,
        sped_length="1",
        help="Prestação de Serviços a Partes Não Relacionadas: S - Sim N – Não",
    )

    ATIV_8 = fields.Char(
        string="Departamento Financeiro do Grupo: S",
        required=True,
        sped_length="1",
        help="Departamento Financeiro do Grupo: S - Sim N – Não",
    )

    ATIV_9 = fields.Char(
        string="Serviços Financeiros Regulamentados",
        required=True,
        sped_length="1",
        help="Serviços Financeiros Regulamentados: S - Sim N – Não",
    )

    ATIV_10 = fields.Char(
        string="Seguro: S - Sim N – Não", required=True, sped_length="1"
    )

    ATIV_11 = fields.Char(
        string="Gestão de Ações e Outros Instrumentos de Capital",
        required=True,
        sped_length="1",
        help="Gestão de Ações e Outros Instrumentos de Capital: S - Sim N – Não",
    )

    ATIV_12 = fields.Char(
        string="Inativa: S - Sim N – Não", required=True, sped_length="1"
    )

    ATIV_13 = fields.Char(
        string="Outros: S - Sim N – Não", required=True, sped_length="1"
    )

    DESC_OUTROS = fields.Char(
        string="C Descrição da Atividade Econômica Desempenhada",
        sped_length="255",
        help=(
            "C Descrição da Atividade Econômica Desempenhada, no caso de W250.ATIV_13 "
            "(Outros) igual a 'Sim': Campo em texto livre para que a entidade "
            "declarante descreva as atividades econômicas desempenhadas pela entidade "
            "integrante reportada que não estejam especificadas dentre as opções "
            "disponíveis nos campos anteriores. onforme previsto na Instrução Normativa"
            " RFB nº 1.681/2016, artigo 9, § 3º, todas as informações em texto livre da"
            " Declaração País-a-País deverão ser fornecidas em um único idioma, a ser "
            "escolhido pela entidade declarante dentre as opções de português, inglês e"
            " espanhol."
        ),
    )

    OBSERVACAO = fields.Char(
        string="C Outras Informações",
        sped_length="1",
        help=(
            "C Outras Informações: Campo de utilização opcional, para o fornecimento de"
            " informações adicionais sobre a entidade reportada. onforme previsto na "
            "Instrução Normativa RFB nº 1.681/2016, artigo 9, § 3º, todas as "
            "informações em texto livre da Declaração País-a-País deverão ser "
            "fornecidas em um único idioma, a ser escolhido pela entidade declarante "
            "dentre as opções de português, inglês e espanhol."
        ),
    )

    reg_W250_ids_RegistroW200_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.w200",
        string="Declaração País a País",
        required=True,
        ondelete="cascade",
    )


class RegistroW300(models.AbstractModel):
    "Observações Adicionais"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.w300"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    JURISDICAO = fields.Char(
        string="Indicação da jurisdição tributária",
        help=(
            "Indicação da jurisdição tributária a que se referem as observações "
            "adicionais. Código do país, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_REC_NAO_REL = fields.Char(
        string="O campo 'Receitas Provenientes",
        sped_length="1",
        help=(
            "O campo 'Receitas Provenientes de Partes Não Relacionadas' "
            "(W200.VL_REC_NAO_REL) é tratado nestas observações adicionais? S - Sim N -"
            " Não"
        ),
    )

    IND_REC_REL = fields.Char(
        string="O campo 'Receitas Provenientes (IND_REC_REL)",
        sped_length="1",
        help=(
            "O campo 'Receitas Provenientes de Partes Relacionadas' (W200.VL_REC_REL) é"
            " tratado nestas observações adicionais? S - Sim N - Não"
        ),
    )

    IND_REC_TOTAL = fields.Char(
        string="O campo 'Receita Total'",
        sped_length="1",
        help=(
            "O campo 'Receita Total' (W200.VL_REC_TOTAL) é tratado nestas observações "
            "adicionais? S - Sim N - Não"
        ),
    )

    IND_LUC_PREJ_ANTES_IR = fields.Char(
        string="O campo 'Lucro ou Prejuízo antes do IR'",
        sped_length="1",
        help=(
            "O campo 'Lucro ou Prejuízo antes do IR' (W200.VL_LUC_PREJ_ANTES_IR) é "
            "tratado nestas observações adicionais? S - Sim N - Não"
        ),
    )

    IND_IR_PAGO = fields.Char(
        string="O campo 'Imposto de Renda Pago'",
        sped_length="1",
        help=(
            "O campo 'Imposto de Renda Pago' (W200.VL_IR_PAGO) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_IR_DEVIDO = fields.Char(
        string="O campo 'Imposto de Renda Devido'",
        sped_length="1",
        help=(
            "O campo 'Imposto de Renda Devido' (W200.VL_IR_DEVIDO) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_CAP_SOC = fields.Char(
        string="O campo 'Capital Social'",
        sped_length="1",
        help=(
            "O campo 'Capital Social' (W200.VL_CAP_SOC) é tratado nestas observações "
            "adicionais? S - Sim N - Não"
        ),
    )

    IND_LUC_ACUM = fields.Char(
        string="O campo 'Lucros Acumulados'",
        sped_length="1",
        help=(
            "O campo 'Lucros Acumulados' (W200.VL_LUC_ACUM) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_ATIV_TANG = fields.Char(
        string="O campo 'Ativos Tangíveis'",
        sped_length="1",
        help=(
            "O campo 'Ativos Tangíveis' (W200.VL_ATIV_TANG) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_NUM_EMP = fields.Char(
        string="O campo 'Número de Empregados'",
        sped_length="1",
        help=(
            "O campo 'Número de Empregados' (W200.NUM_EMP) é tratado nestas observações"
            " adicionais? S - Sim N - Não"
        ),
    )

    OBSERVACAO = fields.Char(string="Observações", required=True, sped_length="4")

    FIM_OBSERVACAO = fields.Char(
        string="Indicador de fim das observações",
        required=True,
        sped_length="7",
        help="Indicador de fim das observações. Texto fixo contendo “W300FIM”.",
    )


class RegistroX280(models.AbstractModel):
    "Atividades Incentivadas - PJ em Geral"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x280"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    IND_ATIV = fields.Char(
        string="Benefício fiscal",
        required=True,
        sped_length="2",
        help=(
            "Benefício fiscal: 00 – Não preenchido 01 – Isenção 02 – Redução de 100% 03"
            " – Redução de 75% 04 – Redução de 70% 05 – Redução de 50% 06 – Redução de "
            "33,33% 07 – Redução de 25% 08 – Redução de 12,5% 09 – Redução por "
            "Reinvestimento 10 – PERSE (Lei nº 14.148/21 e Instrução Normativa RFB nº "
            "2.114/22) 99 – Subvenção para Investimento Selecionar no campo Benefício "
            "Fiscal o tipo de benefício (isenção ou redução do IRPJ) em relação a cada "
            "projeto aprovado no órgão competente, conforme lista disponível na Caixa "
            "de Combinação. E, para cada projeto aprovado selecionar no campo Projeto "
            "se o mesmo corresponde a 'Novo Empreendimento', 'Modernização', "
            "'Ampliação', 'Diversificação', 'Manutenção de Empreendimento', 'Prouni', "
            "“Padis” ou “Outros”. I) Isenção: Este tipo de benefício deve ser "
            "selecionado pela pessoa jurídica: a) que tenha instalado, ampliado, "
            "modernizado ou diversificado empreendimento industrial ou agrícola, nas "
            "áreas de atuação da Sudam e da Sudene, até 31 de dezembro de 1997, nos "
            "termos da MP nº 1.740-32, de 1999, convalidada pela Lei nº 9.808, de 1999,"
            " art. 13; b) que tenham empreendimento industrial ou agrícola decorrente "
            "de projeto aprovado ou protocolizado até 14 de novembro de 1997 nas áreas "
            "de atuação da Sudam e da Sudene."
        ),
    )

    IND_CONCEDENTE = fields.Char(
        string="A Órgão Concessor da Isenção/Redução",
        required=True,
        sped_length="2",
        help=(
            "A Órgão Concessor da Isenção/Redução: M: Sudam – Superintendência de "
            "Desenvolvimento da Amanzônia NE: Sudene – Superintendência de "
            "Desenvolvimento do Nordeste Ou: Outros"
        ),
    )

    IND_PROJ = fields.Char(
        string="Projeto",
        required=True,
        sped_length="2",
        help=(
            "Projeto: 00 – Não preenchido 01 – Novo Empreendimento 02 – Modernização 03"
            " – Ampliação 04 – Diversificação 05 – Manutenção do Empreendimento 06 – "
            "Prouni 07 - Padis 08 – Eventos Fifa 09 – Serviços da Fifa (SPE) 10 – "
            "Eventos CIO 11 – Serviços do CIO (SPE) 99 – Outros"
        ),
    )

    ATO_CONC = fields.Char(
        string="Ato Concessório",
        required=True,
        sped_length="3",
        help=(
            "Ato Concessório - Natureza e Número: Informar neste campo o número do ato "
            "concessório do benefício fiscal. Atenção: No caso de projeto nas áreas de "
            "atuação da Sudam e da Sudene, informar neste campo o número do ato da "
            "unidade da RFB editado para reconhecimento do direito ao benefício fiscal."
            " Observação: Caso o benefício fiscal não possua ato concessório, informar "
            "neste campo a palavra “Outros”."
        ),
    )

    VIG_INI = fields.Char(
        string="Prazo de Vigência – Início Informar a data",
        required=True,
        sped_length="8",
        help=(
            "Prazo de Vigência – Início Informar a data de início de fruição do "
            "benefício conforme consignada no Ato Concessório."
        ),
    )

    VIG_FIM = fields.Char(
        string="Prazo de Vigência – Fim Informar a data",
        required=True,
        sped_length="8",
        help=(
            "Prazo de Vigência – Fim Informar a data de encerramento do prazo de "
            "fruição do benefício conforme consignada no Ato Concessório."
        ),
    )

    CNPJ_INCENTIVO = fields.Char(
        string="CNPJ do Estabelecimento",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "CNPJ do Estabelecimento com Isenção/Redução/Redução por "
            "Reinvestimento/Subvenção para Investimento Informar o CNPJ completo do "
            "estabelecimento."
        ),
    )

    NCM_INCENTIVO = fields.Char(
        string="Código NCN do Produto Sujeito",
        xsd_type="numeric_code",
        sped_length="8",
        help=(
            "Código NCN do Produto Sujeito à Isenção/Redução/Redução por "
            "Reinvestimento/Subvenção para Investimento"
        ),
    )

    REC_LIQ_INCENTIVO = fields.Float(
        string="Valor da Receita Líquida Relativa",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor da Receita Líquida Relativa à Isenção/Redução/Redução por "
            "Reinvestimento/ Subvenção para Investimento"
        ),
    )

    VL_INCENTIVO = fields.Monetary(
        string="Valor da Isenção/Redução/Redução",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Isenção/Redução/Redução por Reinvestimento/Subvenção para "
            "Investimento"
        ),
    )


class RegistroX292(models.AbstractModel):
    """Operações com o Exterior - Pessoa Não Vinculada/ Não Interposta/País sem
    Tributação Favorecida"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x292"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX340(models.AbstractModel):
    "Identificação da Participação no Exterior"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x340"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    RAZ_SOCIAL = fields.Char(
        string="Razão Social",
        required=True,
        help=(
            "Razão Social: Razão social de cada controlada, direta ou indireta, "
            "equiparada ou coligada em regime de competência."
        ),
    )

    NIF = fields.Char(
        string="NIF",
        required=True,
        help=(
            "NIF: Número de identificação fiscal de cada investida (“CNPJ” da investida"
            " no exterior). Observação: 1 – Caso a investida não possua NIF, utilize "
            "“0000” 2 – Para investidas de um mesmo país diferente do Brasil que não "
            "possuam NIF, utilizar “0000”, “0001”, “0002”, e assim por diante, conforme"
            " a quantidade de investidas."
        ),
    )

    IND_CONTROLE = fields.Char(
        string="Indicador",
        required=True,
        xsd_type="numeric_code",
        sped_length="2",
        help=(
            "Indicador de Controle 1 – Controlada Direta 2 – Controlada Indireta 3 – "
            "Equiparada a Controlada 4 – Coligada em Regime de Competência 5 – Filial "
            "ou Sucursal 6 – Coligada em Regime de Caixa 7 – Joint Venture 8 – "
            "Partnership 9 – Trust 10 – Coligada em Regime de Competência por Opção "
            "(art. 19-A da Instrução Normativa RFB no 1.520/2014). 11 – Coligada em "
            "Regime Misto – Período em Regime de Competência e em Regime de Caixa."
        ),
    )

    PAIS = fields.Char(
        string="País: País de cada controlada",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País de cada controlada, direta ou indireta, equiparada ou coligada "
            "em regime de competência. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_ISEN_PETR = fields.Char(
        string="Indicador de Prospecção e Exploração de Petróleo",
        required=True,
        help=(
            "Indicador de Prospecção e Exploração de Petróleo e Gás: Informar parcela "
            "de lucro decorrente de afretamento por tempo ou casco nu, arrendamento "
            "mercantil operacional, aluguel, empréstimo de bens ou prestação de "
            "serviços diretamente relacionados à prospecção e exploração de petróleo e "
            "gás, em território brasileiro, que goze de isenção nos termos do art. 77, "
            "§3º, da Lei nº 12.973 de 13 de maio de 2014: S = Sim N = Não"
        ),
    )

    IND_CONSOL = fields.Char(
        string="Indicador de Consolidação",
        required=True,
        help=(
            "Indicador de Consolidação: Informar se a investida terá os resultados "
            "positivos e negativos consolidados: S = Sim N = Não"
        ),
    )

    MOT_NAO_CONSOL = fields.Integer(
        string="Motivo da Não Consolidação",
        help=(
            "Motivo da Não Consolidação: 1 – Opção; 2 – Domiciliada em país com o qual "
            "o Brasil não mantenha tratado ou ato com cláusula específica para troca de"
            " informações para fins tributários; 3 – Domiciliada em país ou dependência"
            " com tributação favorecida, ou é beneficiária de regime fiscal "
            "privilegiado, de que tratam os arts. 24 e 24-A da Lei nº 9.430, de 27 de "
            "dezembro de 1996, listados na Instrução Normativa RFB nº 1.037, de; 4 – "
            "Submetida a regime de tributação definido no inciso III do caput do art. "
            "21; 5 – Controlada, direta ou indiretamente, por pessoa jurídica submetida"
            " a tratamento tributário previsto nos incisos II e III do art. 13; 6 – "
            "Teve renda ativa própria inferior a 80% (oitenta por cento) da renda total"
            " no período, nos termos definidos no art. 22."
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ da Investida no Brasil",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "CNPJ da Investida no Brasil: Hipótese do art. 41, parágrafo único, da "
            "Instrução Normativa RFB nº 1.520/2014."
        ),
    )

    TIP_MOEDA = fields.Char(
        string="Moeda do País de Domicílio", required=True, sped_length="3"
    )

    reg_X350_ids = fields.One2many(
        "l10n_br_sped.ecf.x350",
        "reg_X350_ids_RegistroX340_id",
        string="X350 Participações no Exterior",
        sped_card="[0;N]",
        sped_required=True,
        help="X350 Participações no Exterior - Resultado do Período de Apuração",
    )

    reg_X351_ids = fields.One2many(
        "l10n_br_sped.ecf.x351",
        "reg_X351_ids_RegistroX340_id",
        string="X351 Demonstrativo de Resultados e de Imposto",
        sped_card="[0;N]",
        sped_required=True,
        help="X351 Demonstrativo de Resultados e de Imposto a Pagar no Exterior",
    )

    reg_X352_ids = fields.One2many(
        "l10n_br_sped.ecf.x352",
        "reg_X352_ids_RegistroX340_id",
        string="X352 Demonstrativo de Resultados",
        sped_card="[0;N]",
        sped_required=True,
        help=(
            "X352 Demonstrativo de Resultados no Exterior Auferidos por Intermédio de "
            "Coligada"
        ),
    )

    reg_X353_ids = fields.One2many(
        "l10n_br_sped.ecf.x353",
        "reg_X353_ids_RegistroX340_id",
        string="X353 Demonstrativo de Consolidação",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_X354_ids = fields.One2many(
        "l10n_br_sped.ecf.x354",
        "reg_X354_ids_RegistroX340_id",
        string="X354 Demonstrativo de Prejuízos Acumulados",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_X355_ids = fields.One2many(
        "l10n_br_sped.ecf.x355",
        "reg_X355_ids_RegistroX340_id",
        string="X355 Demonstrativo de Rendas Ativas e Passivas",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_X356_ids = fields.One2many(
        "l10n_br_sped.ecf.x356",
        "reg_X356_ids_RegistroX340_id",
        string="X356 Demonstrativo de Estrutura Societária",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_X357_ids = fields.One2many(
        "l10n_br_sped.ecf.x357",
        "reg_X357_ids_RegistroX340_id",
        string="X357 Investidoras Diretas",
        sped_card="[0;N]",
        sped_required=True,
    )


class RegistroX350(models.AbstractModel):
    "Participações no Exterior - Resultado do Período de Apuração"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x350"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    REC_LIQ = fields.Float(
        string="Receita Líquida",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Receita Líquida: Receita líquida de todas as atividades exploradas pela "
            "filial, sucursal, controlada ou coligada residente ou domiciliada no "
            "exterior."
        ),
    )

    CUSTOS = fields.Float(
        string="Custos dos Bens e Serviços Vendidos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Custos dos Bens e Serviços Vendidos: Total dos custos das atividades "
            "exploradas pela filial, sucursal, controlada ou coligada domiciliada no "
            "exterior."
        ),
    )

    LUC_BRUTO = fields.Char(
        string="Lucro Bruto: Deve ser igual",
        required=True,
        sped_length="19",
        help="Lucro Bruto: Deve ser igual a (X350.REC_LIQ – X350.CUSTOS)",
    )

    REC_AUFERIDAS = fields.Float(
        string="Receitas Financeiras Auferidas com a Vinculada",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Receitas Financeiras Auferidas com a Vinculada no Brasil: Valor total das "
            "receitas financeiras auferidas pela filial, sucursal, controlada ou "
            "coligada domiciliada no exterior nas operações efetuadas com a pessoa "
            "jurídica vinculada domiciliada no Brasil."
        ),
    )

    REC_OUTRAS_OPER = fields.Float(
        string="Outras Receitas Operacionais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Outras Receitas Operacionais: Valor total das outras receitas operacionais"
            " da filial, sucursal, controlada ou coligada domiciliada no exterior."
        ),
    )

    DESP_BRASIL = fields.Float(
        string="Despesas Financeiras Pagas ou Creditadas",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Despesas Financeiras Pagas ou Creditadas à Vinculada no Brasil: Valor "
            "total das despesas financeiras pagas ou creditadas pela filial, sucursal, "
            "controlada ou coligada domiciliada no exterior nas operações efetuadas com"
            " a pessoa jurídica vinculada domiciliada no Brasil."
        ),
    )

    DESP_OPER = fields.Float(
        string="Despesa Operacionais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Despesa Operacionais: Valor total das despesas operacionais da filial, "
            "sucursal, controlada ou coligada residente ou domiciliada no exterior."
        ),
    )

    LUC_OPER = fields.Char(
        string="Lucro Operacional: Deve ser igual",
        required=True,
        sped_length="19",
        help=(
            "Lucro Operacional: Deve ser igual a (X350.LUC_BRUTO + X350.REC_AUFERIDAS +"
            " X350.REC_OUTRAS_OPER – X350.DESP_BRASIL – X350.DESP_OPER)"
        ),
    )

    REC_PARTIC = fields.Char(
        string="Receitas de Participação em Controladas",
        required=True,
        sped_length="19",
        help=(
            "Receitas de Participação em Controladas, Coligadas, Filiais ou Sucursais: "
            "Valor total das receitas de participação em controladas, coligadas, "
            "filiais ou sucursais residentes ou domiciliadas no exterior."
        ),
    )

    REC_OUTRAS = fields.Float(
        string="Outras Receitas",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Outras Receitas: Valor total das demais receitas, ou seja, daquelas que "
            "não estão ligadas a atividade principal ou acessória da filial, sucursal, "
            "controlada ou coligada domiciliada no exterior."
        ),
    )

    DESP_OUTRAS = fields.Float(
        string="Outras Despesas",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Outras Despesas: Valor total das demais despesas, ou seja, daquelas que "
            "não estão ligadas a atividade principal ou acessória da filial, sucursal, "
            "controlada ou coligada domiciliada no exterior."
        ),
    )

    LUC_LIQ_ANT_IR = fields.Char(
        string="Lucro Líquido Antes do Imposto de Renda",
        required=True,
        sped_length="19",
        help=(
            "Lucro Líquido Antes do Imposto de Renda. Deve ser igual a (X350.LUC_OPER +"
            " X350.REC_PARTIC + X350.REC_OUTRAS – X350.DESP_OUTRAS)"
        ),
    )

    LUC_ARB_ANT_IR = fields.Char(
        string="Lucro Arbitrado Antes do Imposto de Renda",
        required=True,
        sped_length="19",
    )

    IMP_DEV = fields.Char(
        string="Imposto Devido",
        required=True,
        sped_length="19",
        help=(
            "Imposto Devido: Valor do tributo incidente sobre o lucro devido no país de"
            " domicílio da filial, sucursal, controlada ou coligada. O tributo pago no "
            "exterior, a ser compensado com o imposto devido no Brasil, deve ser "
            "convertido em Reais."
        ),
    )

    LUC_LIQ = fields.Char(
        string="Lucro líquido do Período de Apuração",
        required=True,
        sped_length="19",
        help=(
            "Lucro líquido do Período de Apuração. Deve ser igual a "
            "(X350.LUC_LIQ_ANT_IR+ LUC_ARB_ANT_IR – X350.IMP_DEV)"
        ),
    )

    reg_X350_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX351(models.AbstractModel):
    "Demonstrativo de Resultados e de Imposto a Pagar no Exterior"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x351"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    RES_INV_PER = fields.Char(
        string="Resultado",
        required=True,
        sped_length="19",
        help=(
            "Resultado (positivo ou negativo) da Própria Investida em Moeda do País de "
            "Domicílio. Devem ser expurgados o valor do resultado positivo ou negativo "
            "de eventuais controladas indiretas."
        ),
    )

    RES_INV_PER_REAL = fields.Char(
        string="Resultado (RES_INV_PER_REAL)",
        required=True,
        sped_length="19",
        help=(
            "Resultado (positivo ou negativo) da Própria Investida em Reais. Devem ser "
            "expurgados o valor do resultado positivo ou negativo de eventuais "
            "controladas indiretas."
        ),
    )

    RES_ISEN_PETR_PER = fields.Char(
        string="Resultado da Investida em Operações que Gozem",
        required=True,
        sped_length="19",
        help=(
            "Resultado da Investida em Operações que Gozem de Isenção Relacionada à "
            "Prospecção e Exploração de Petróleo e Gás: Resultado (positivo ou "
            "negativo) da própria investida em moeda do país de domicílio apenas em "
            "operações decorrentes de afretamento por tempo ou casco nu, arrendamento "
            "mercantil operacional, aluguel, empréstimo de bens ou prestação de "
            "serviços diretamente relacionados à prospecção e exploração de petróleo e "
            "gás, em território brasileiro, que gozem de isenção nos termos do art. 77,"
            " §3º, da Lei nº 12.973, de 13 de maio de 2014. Deve ser expurgado o valor "
            "do resultado positivo ou negativo de eventuais controladas indiretas."
        ),
    )

    RES_ISEN_PETR_PER_REAL = fields.Char(
        string="RES_ISEN_PETR_PER_REAL",
        required=True,
        sped_length="19",
        help=(
            "Resultado da Investida em Operações que Gozem de Isenção Relacionada à "
            "Prospecção e Exploração de Petróleo e Gás em Reais (R$): Resultado "
            "(positivo ou negativo) da própria investida em Reais apenas em operações "
            "decorrentes de afretamento por tempo ou casco nu, arrendamento mercantil "
            "operacional, aluguel, empréstimo de bens ou prestação de serviços "
            "diretamente relacionados à prospecção e exploração de petróleo e gás, em "
            "território brasileiro, que gozem de isenção nos termos do art. 77, §3º, da"
            " Lei nº 12.973, de 13 de maio de 2014. Deve ser expurgado o valor do "
            "resultado positivo ou negativo de eventuais controladas indiretas."
        ),
    )

    RES_NEG_ACUM = fields.Float(
        string="Resultado Negativo Acumulado de Anos Anteriores",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Resultado Negativo Acumulado de Anos Anteriores: Resultado negativo "
            "acumulado de anos anteriores da própria investida utilizado na "
            "compensação, na moeda do país de domicílio."
        ),
    )

    RES_POS_TRIB = fields.Float(
        string="Resultado Positivo a Tributar",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Resultado Positivo a Tributar: Resultado positivo a tributar na moeda do "
            "país de domicílio (deve ser informado o valor de (X351. RES_INV_PER – "
            "X351.RES_ISEN_PETR_PER), caso seja resultado positivo e maior que o valor "
            "do campo do campo X351.RES_NEG_ACUM)."
        ),
    )

    RES_POS_TRIB_REAL = fields.Float(
        string="Resultado Positivo a Tributar em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Resultado Positivo a Tributar em Reais (R$).",
    )

    IMP_LUCR = fields.Float(
        string="Imposto Efetivamente Pago",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Efetivamente Pago: Imposto incidente sobre o lucro distribuído no "
            "país de domicílio na moeda do país de domicílio (Instrução Normativa RFB "
            "no 1.520, art. 40, V)."
        ),
    )

    IMP_LUCR_REAL = fields.Float(
        string="Imposto Efetivamente Pago em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Efetivamente Pago em Reais (R$): Imposto incidente sobre o lucro "
            "distribuído no país de domicílio em reais (R$) (Instrução Normativa RFB no"
            " 1.520, art. 40, V)."
        ),
    )

    IMP_PAG_REND = fields.Float(
        string="Imposto Efetivamente Pago (IMP_PAG_REND)",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Efetivamente Pago no Exterior Sobre Rendimentos Recebidos na Moeda"
            " do País de Domicílio (Instrução Normativa RFB no 1.520, art. 36, X e art."
            " 40, III)."
        ),
    )

    IMP_PAG_REND_REAL = fields.Float(
        string="Imposto Efetivamente Pago (IMP_PAG_REND_REAL)",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Efetivamente Pago no Exterior Sobre Rendimentos Recebidos em Reais"
            " (R$) (Instrução Normativa RFB no 1.520, art. 36, X e art. 40, III)."
        ),
    )

    IMP_RET_EXT = fields.Float(
        string="Imposto Retido na Fonte no Exterior",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Retido na Fonte no Exterior: Imposto retido na fonte no exterior "
            "decorrente de rendimentos recebidos pela filial, sucursal ou controlada "
            "domiciliada no exterior, na moeda estrangeira (Instrução Normativa RFB no "
            "1.520, art. 40, IV)."
        ),
    )

    IMP_RET_EXT_REAL = fields.Float(
        string="Imposto Retido na Fonte no Exterior em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Retido na Fonte no Exterior em Reais: Imposto retido na fonte no "
            "exterior decorrente de rendimentos recebidos pela filial, sucursal ou "
            "controlada domiciliada no exterior, em reais (Instrução Normativa RFB no "
            "1.520, art. 40, IV)."
        ),
    )

    IMP_RET_BR = fields.Float(
        string="Imposto Retido na Fonte no Brasil",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Imposto Retido na Fonte no Brasil: Imposto retido na fonte no Brasil "
            "decorrente de rendimentos recebidos pela filial, sucursal ou controlada "
            "domiciliada no exterior, em Reais (Instrução Normativa RFB no 1.520, art. "
            "40, IV)."
        ),
    )

    reg_X351_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX352(models.AbstractModel):
    """Demonstrativo de Resultados no Exterior Auferidos por Intermédio de
    Coligada"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x352"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    RES_PER = fields.Char(
        string="Resultado",
        required=True,
        sped_length="19",
        help=(
            "Resultado (positivo ou negativo) do Período na Moeda do País de Domicílio."
        ),
    )

    RES_PER_REAL = fields.Char(
        string="Resultado (RES_PER_REAL)",
        required=True,
        sped_length="19",
        help="Resultado (positivo ou negativo) do Período em Reais.",
    )

    LUC_DISP = fields.Float(
        string="Lucro Disponibilizado no Período na Moeda do País",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Lucro Disponibilizado no Período na Moeda do País de Domicílio.",
    )

    LUC_DISP_REAL = fields.Float(
        string="Lucro Disponibilizado no Período em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    reg_X352_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX353(models.AbstractModel):
    "Demonstrativo de Consolidação"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x353"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    RES_NEG_UTIL = fields.Float(
        string="Resultado Negativo Utilizado na Consolidação",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Resultado Negativo Utilizado na Consolidação na Moeda do País de "
            "Domicílio."
        ),
    )

    RES_NEG_UTIL_REAL = fields.Float(
        string="RES_NEG_UTIL_REAL",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Resultado Negativo Utilizado na Consolidação em Reais.",
    )

    SALDO_RES_NEG_NAO_UTIL = fields.Float(
        string="Saldo do Resultado Negativo Não Utilizado na Moeda",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo do Resultado Negativo Não Utilizado na Moeda do País de Domicílio."
        ),
    )

    SALDO_RES_NEG_NAO_UTIL_REAL = fields.Float(
        string="Saldo do Resultado Negativo Não Utilizado em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    RES_PROP = fields.Char(
        string="Resultado",
        required=True,
        sped_length="19",
        help=(
            "Resultado (positivo ou negativo) Próprio da Controlada no Período na Moeda"
            " do País de Domicílio."
        ),
    )

    RES_PROP_REAL = fields.Char(
        string="Resultado (RES_PROP_REAL)",
        required=True,
        sped_length="19",
        help=(
            "Resultado (positivo ou negativo) Próprio da Controlada no Período em "
            "Reais."
        ),
    )

    reg_X353_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX354(models.AbstractModel):
    "Demonstrativo de Prejuízos Acumulados"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x354"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    RES_NEG = fields.Float(
        string="Resultado Negativo de Períodos Anteriores em Moeda",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Resultado Negativo de Períodos Anteriores em Moeda do País de Domicílio."
        ),
    )

    RES_NEG_REAL = fields.Float(
        string="Resultado Negativo de Períodos Anteriores em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Resultado Negativo de Períodos Anteriores em Reais (R$).",
    )

    SALDO_RES_NEG = fields.Float(
        string="Saldo do Resultado Negativo Acumulado em Moeda",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Saldo do Resultado Negativo Acumulado em Moeda do País de Domicílio.",
    )

    reg_X354_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX355(models.AbstractModel):
    "Demonstrativo de Rendas Ativas e Passivas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x355"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    REND_PASS_PROP = fields.Float(
        string="Renda Passiva Própria do Ano-Calendário em Moeda",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Renda Passiva Própria do Ano-Calendário em Moeda do País de Domicílio."),
    )

    REND_PASS_PROP_REAL = fields.Float(
        string="Renda Passiva Própria do Ano-Calendário em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Renda Passiva Própria do Ano-Calendário em Reais (R$).",
    )

    REND_TOTAL = fields.Float(
        string="Renda Total",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Renda Total: Renda total conforme definição do inciso II do art. 21 da "
            "Instrução Normativa RFB no 1.520/2014, do ano-calendário em moeda do país "
            "de domicílio."
        ),
    )

    REND_TOTAL_REAL = fields.Float(
        string="Renda Total em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Renda Total em Reais: Renda total conforme definição do inciso II do art. "
            "21 da Instrução Normativa RFB no 1.520/2014, do ano-calendário em Reais "
            "(R$)."
        ),
    )

    REND_ATIV_PROP = fields.Float(
        string="Renda Ativa Própria em Moeda do País de Domicílio",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Renda Ativa Própria em Moeda do País de Domicílio (corresponde ao "
            "resultado da subtração do X355.REND_TOTAL pelo X355.REND_PASS_PROP)."
        ),
    )

    REND_ATIV_PROP_REAL = fields.Float(
        string="Renda Ativa Própria em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Renda Ativa Própria em Reais (corresponde ao resultado da subtração do "
            "X355. REND_TOTAL_REAL pelo X355.REND_PASS_PROP_REAL)."
        ),
    )

    PERCENTUAL = fields.Float(
        string="Percentual",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual: Valor do percentual obtido mediante a razão entre o valor do "
            "X355. REND_ATIV_PROP e do X355.REND_TOTAL."
        ),
    )

    reg_X355_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX356(models.AbstractModel):
    "Demonstrativo de Estrutura Societária"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x356"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    PERC_PART = fields.Float(
        string="Percentual de Participação da Investidora Direta",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=("Percentual de Participação da Investidora Direta (%). Exemplo: 60,00%."),
    )

    ATIVO_TOTAL = fields.Float(
        string="Ativo Total em Reais",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Ativo Total em Reais: Ativo total de cada controlada, direta ou indireta, "
            "equiparada ou coligada em regime de competência."
        ),
    )

    PAT_LIQUIDO = fields.Char(
        string="Patrimônio Líquido em Reais",
        required=True,
        sped_length="19",
        help=(
            "Patrimônio Líquido em Reais: Patrimônio líquido de cada controlada, direta"
            " ou indireta, equiparada ou coligada em regime de competência."
        ),
    )

    reg_X356_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX357(models.AbstractModel):
    "Investidoras Diretas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x357"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País de cada investidora direta. Código do país, conforme tabela do "
            "Sped (Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    NIF_CNPJ = fields.Char(
        string="NIF",
        required=True,
        help=(
            "NIF: Número de identificação fiscal de cada investidora direta (“CNPJ” da "
            "investida no exterior) ou CNPJ. Observação: 1 – Caso a investidora direta "
            "não possua NIF, utilize “0000” 2 – Para investidoras diretas de um mesmo "
            "país diferente do Brasil que não possuam NIF, utilizar “0000”, “0001”, "
            "“0002”, e assim por diante, conforme a quantidade de investidoras diretas."
        ),
    )

    RAZAO_SOCIAL = fields.Char(
        string="Razão Social",
        required=True,
        help="Razão Social: Razão social da investidora direta.",
    )

    PERCENTUAL = fields.Float(
        string="Percentual",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual: Valor do percentual de participação da investidora direta na "
            "investida informada no registro X340."
        ),
    )

    reg_X357_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x340",
        string="Identificação da Participação no Exterior",
        required=True,
        ondelete="cascade",
    )


class RegistroX360(models.AbstractModel):
    "Informações Gerais sobre Preços de Transferência"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x360"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX365(models.AbstractModel):
    "Informações Sobre Contrapartes nas Transações Controladas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x365"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    IDENTIFICADOR = fields.Char(
        string="Código da entidade",
        required=True,
        sped_length="6",
        help=("Código da entidade (definido pela própria empresa que preenche a ECF)."),
    )

    NOME_ENT = fields.Char(string="Nome da Entidade")

    reg_X366_ids = fields.One2many(
        "l10n_br_sped.ecf.x366",
        "reg_X366_ids_RegistroX365_id",
        string="X366 Entidades Com",
        sped_card="[0;N]",
        sped_required=True,
        help="X366 Entidades Com as Quais Realiza Transações Controladas",
    )


class RegistroX366(models.AbstractModel):
    "Entidades Com as Quais Realiza Transações Controladas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x366"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_X366_ids_RegistroX365_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x365",
        string="Informações Sobre Contrapartes",
        required=True,
        ondelete="cascade",
        help="Informações Sobre Contrapartes nas Transações Controladas",
    )


class RegistroX370(models.AbstractModel):
    "Informações Sobre as Transações Controladas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x370"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    IDENTIFICADOR = fields.Char(
        string="Identificador da entidade",
        required=True,
        sped_length="6",
        help=(
            "Identificador da entidade com a qual o contribuinte realizou a transação "
            "controlada."
        ),
    )

    TIPO_TRANSACAO = fields.Char(
        string="Código do tipo de transação: 01",
        required=True,
        sped_length="2",
        help=(
            "Código do tipo de transação: 01 - Exportações de Bens - Commodities 02 - "
            "Importações de Bens - Commodities 03 - Exportações de Serviços 04 - "
            "Importações de Serviços 05 - Exportações de Direitos 06 - Importações de "
            "Direitos 07 - Operações Financeiras - Receitas Auferidas 08 - Operações "
            "Financeiras - Despesas incorridas 09 - Transações com Intangíveis - "
            "Receitas Auferidas 10 Transações com Intangíveis – Despesas Incorridas 11 "
            "- Contratos de Compartilhamento de Custos 12 - Exportações de Bens - "
            "Demais 13 - Importações de Bens - Demais"
        ),
    )

    NOME_ENT = fields.Char(
        string="Nome da entidade",
        required=True,
        help=(
            "Nome da entidade com a qual o contribuinte realizou a transação "
            "controlada."
        ),
    )

    PAIS = fields.Char(
        string="País de residência da entidade",
        required=True,
        help=(
            "País de residência da entidade com a qual o contribuinte realizou a "
            "transação controlada."
        ),
    )

    COD_NCM = fields.Char(
        string="Nomenclatura Comum do Mercosul",
        help=(
            "Nomenclatura Comum do Mercosul (NCM) dos bens exportados ou importados."
        ),
    )

    TIPO_DEMAIS = fields.Char(
        string="Tipo de Serviço, Direito",
        sped_length="3",
        help=(
            "Tipo de Serviço, Direito, Operações Financeiros, Intangível ou Composição "
            "de Custos: 101|Compras|S 102|Manufatura ou produção|S"
        ),
    )

    DESCR_BSDI = fields.Char(string="Descrição da transação controlada", required=True)

    VL_TRANSACAO = fields.Monetary(
        string="Valor da transação controlada",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_AJUSTES = fields.Char(
        string="Houve ajustes em função das regras de preços",
        required=True,
        help=(
            "Houve ajustes em função das regras de preços de transferência? S – Sim N –"
            " Não"
        ),
    )

    VL_ESPONTANEO = fields.Monetary(
        string="Valor do ajuste espontâneo",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COMPENSATORIO = fields.Monetary(
        string="Valor do ajuste compensatório",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    TIP_AJ_COMPENSATORIO = fields.Char(
        string="0 Tipo de ajuste compensatório",
        help=(
            "0 Tipo de ajuste compensatório: 1 – Aumento da receita 02 – Redução de "
            "custo 03 – Redução de despesas 99 - Outros"
        ),
    )

    METODO = fields.Char(
        string="P Método de preços de transferência utilizado",
        required=True,
        sped_length="3",
        help=(
            "P Método de preços de transferência utilizado: IC – Preços Independentes "
            "Comparados PRL – Preço de Revenda Menos Lucro MCL – Custo Mais Lucro MLT –"
            " Margem Líquida da Transação MDL – Divisão do Lucro OUT – Outro Método"
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição do método de preços",
        help=(
            "Descrição do método de preços de transferência utilizado, caso o "
            "contribuinte tenha selecionado “Outro Método” (art. 45 da IN RFB nº "
            "2.161/2023) na linha anterior."
        ),
    )

    COMP_INTENCIONAL = fields.Char(
        string="Houve compensações intencionais",
        required=True,
        sped_length="1",
        help=(
            "Houve compensações intencionais (art. 27 da IN RFB nº 2.161/2023)? S – Sim"
            " N – Não"
        ),
    )

    SINERGIA = fields.Char(
        string="Houve efeitos de sinergia",
        required=True,
        sped_length="1",
        help=(
            "Houve efeitos de sinergia (art. 31 da IN RFB nº 2.161/2023)? S – Sim N – "
            "Não"
        ),
    )

    IND_TRANS_COMBINADAS = fields.Char(
        string="A transação foi avaliada combinadamente",
        required=True,
        sped_length="1",
        help=(
            "A transação foi avaliada combinadamente com outras transações (art. 25 da "
            "IN RFB nº 2.161/2023)? S – Sim N - Não"
        ),
    )

    IND_DADOS_MULTIP = fields.Char(
        string="Houve utilização de dados de múltiplos anos",
        required=True,
        sped_length="1",
        help=(
            "Houve utilização de dados de múltiplos anos (art. 30 da IN RFB nº "
            "2.161/2023)? S – Sim N – Não"
        ),
    )

    IND_SIMPLIFIC = fields.Char(
        string="O O contribuinte adotou a medida de simplificação",
        required=True,
        sped_length="1",
        help=(
            "O O contribuinte adotou a medida de simplificação para serviços intragrupo"
            " de baixo valor agregado (art. 53 da IN RFB nº 2.161/2023)? S – Sim N – "
            "Não bservação: Esse campo apenas deve ser preenchido para transação "
            "controlada que envolva prestação de serviços."
        ),
    )

    reg_X371_ids = fields.One2many(
        "l10n_br_sped.ecf.x371",
        "reg_X371_ids_RegistroX370_id",
        string="X371 Informações Sobre Ajustes Compensatórios",
        sped_card="[0;N]",
        sped_required=True,
    )

    reg_X375_ids = fields.One2many(
        "l10n_br_sped.ecf.x375",
        "reg_X375_ids_RegistroX370_id",
        string="X375 Informações Relacionadas ao Método de Preços",
        sped_card="[0;N]",
        sped_required=True,
        help="X375 Informações Relacionadas ao Método de Preços de Transferência",
    )


class RegistroX371(models.AbstractModel):
    "Informações Sobre Ajustes Compensatórios"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x371"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    COD_CTA = fields.Char(string="Código da conta contábil", required=True)

    COD_CCUS = fields.Char(string="Código do centro de custos")

    VALOR = fields.Monetary(
        string="Saldo utilizado",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="D Indicador de saldo utilizado",
        required=True,
        sped_length="1",
        help="D Indicador de saldo utilizado: – Devedor C – Credor",
    )

    reg_X371_ids_RegistroX370_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x370",
        string="Informações Sobre as Transações Controladas",
        required=True,
        ondelete="cascade",
    )


class RegistroX375(models.AbstractModel):
    "Informações Relacionadas ao Método de Preços de Transferência"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x375"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_X375_ids_RegistroX370_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.x370",
        string="Informações Sobre as Transações Controladas",
        required=True,
        ondelete="cascade",
    )


class RegistroX390(models.AbstractModel):
    "Origem e Aplicação de Recursos - Imunes ou Isentas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x390"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX400(models.AbstractModel):
    """Comércio Eletrônico e Tecnologia da Informação – Informações das
    Vendas"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x400"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX410(models.AbstractModel):
    "Comércio Eletrônico – Informação de Homepage/Servidor"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x410"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País em que disponibiliza homepage ou mantém servidor à sua "
            "disposição. Código do país, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_HOME_DISP = fields.Char(
        string="Indicador de Homepage Disponível",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Homepage Disponível: S – Sim N – Não A pessoa jurídica deverá"
            " marcar “Sim” ou “Não”, para cada país selecionado, onde tenha o domínio "
            "de sua homepage registrado, caso disponibilize, ou não, efetivamente sua "
            "homepage. A disponibilização efetiva da homepage se dá por meio do "
            "conhecer ao público de seu conteúdo. Atenção: Deve assinalar “Não” neste "
            "campo, a pessoa jurídica que tenha efetuado somente o registro de sua "
            "homepage num determinado país e não tenha construído ou disponibilizado "
            "efetivamente essa homepage para o público."
        ),
    )

    IND_SERV_DISP = fields.Char(
        string="Indicador de Disponibilidade de Servidor",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Disponibilidade de Servidor: S – Sim N – Não A pessoa "
            "jurídica que, por meio de sua homepage, aceite pedidos de compra, receba "
            "pagamentos, preste serviços ou efetue a entrega de bens digitais por meio "
            "de download deve selecionar “Sim” neste campo, para cada país selecionado,"
            " para informar o país onde mantém os servidores que estão à sua "
            "disposição. Para que um servidor seja considerado à sua disposição basta "
            "que ele seja o meio pelo qual a pessoa jurídica atue no comércio "
            "eletrônico. Esses servidores podem pertencer à pessoa jurídica, como podem"
            " ser alugados, arrendados ou cedidos a título gratuito ou oneroso."
        ),
    )


class RegistroX420(models.AbstractModel):
    """Royalties Recebidos ou Pagos a Beneficiários do Brasil e do Exterior"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x420"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    TIP_ROY = fields.Char(
        string="Indicar se são royalties recebidos ou pagos",
        required=True,
        sped_length="1",
        help=(
            "Indicar se são royalties recebidos ou pagos a beneficiários no Brasil e no"
            " exterior. Tipo dos royalties: R - Recebido P – Pago"
        ),
    )

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País ou a dependência de país de residência ou de domicílio da "
            "pessoa física ou jurídica que efetuou o pagamento ou a remessa do valor "
            "recebido ou pago pela pessoa jurídica declarante, observado os exemplos a "
            "seguir: Exemplos: 1) Pessoa jurídica domiciliada na França possui conta "
            "corrente no Canadá e a partir desta remete royalties para a pessoa "
            "jurídica declarante. Nesse caso, o país a ser selecionado é a França. 2) "
            "Pessoa jurídica declarante efetua remessa, por conta e ordem do "
            "beneficiário do pagamento que é residente no Japão, para conta corrente "
            "localizada nos Estados Unidos da América. Nesse caso, o país a ser "
            "selecionado é o Japão. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_EXPL_DIR_SW = fields.Monetary(
        string="Valor da Exploração Econômica",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais do Autor Relativos"
            " a Software: Valor relativo aos royalties recebidos ou pagos ou remetidos "
            "referentes aos atos e aos contratos de licença ou cessão de direitos de "
            "comercialização, distribuição e reprodução de programa de computador, de "
            "que trata a Lei nº 9.609, de 19 de fevereiro de 1998. Informar também "
            "neste campo o valor relativo aos contratos que impliquem transferência de "
            "tecnologia de programa de computador, de que trata o art. 11 da Lei nº "
            "9.609, de 1998. Ainda, deverá ser informado, neste campo, o valor recebido"
            " em decorrência dos contratos que envolvam concessão de licença para uso "
            "próprio do adquirente, sob a modalidade de cópia única. Atenção: Não "
            "incluir neste campo o valor recebido ou pago ou remetido a título de "
            "transferência total dos direitos patrimoniais do programa de computador."
        ),
    )

    VL_EXPL_DIR_AUT = fields.Monetary(
        string="Valor da Exploração Econômica (VL_EXPL_DIR_AUT)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais do Autor, Exceto "
            "Software: Valor relativo aos royalties recebidos ou pagos ou remetidos "
            "referentes aos contratos que transferem a terceiros, por meio de "
            "licenciamento, concessão, cessão ou por outros meios admitidos em Direito,"
            " o direito de reproduzir, comercializar ou distribuir a obra protegida "
            "pelo Direito Autoral, de que trata o art. 7º da Lei nº 9.610, de 19 de "
            "fevereiro de1998, exceto programas de computador, tais como: - textos de "
            "obras literárias, artísticas ou científicas; - conferências, alocuções, "
            "sermões e outras obras da mesma natureza; - obras dramáticas e dramático-"
            "musicais; - obras coreográficas e pantomímicas, cuja execução cênica se "
            "fixe por escrito ou por qualquer outra forma; - composições musicais, "
            "tenham ou não letra; - obras audiovisuais, sonorizadas ou não, inclusive "
            "as cinematográficas; - obras fotográficas e as produzidas por qualquer "
            "processo análogo ao da fotografia; - obras de desenho, pintura, gravura, "
            "escultura, litografia e arte cinética; - ilustrações, cartas geográficas e"
            " outras obras da mesma natureza; - projetos, esboços e obras plásticas "
            "concernentes à geografia, engenharia, topografia, arquitetura, paisagismo,"
            " cenografia e ciência; - adaptações, traduções e outras transformações de "
            "obras originais, apresentadas como criação intelectual nova; - coletâneas "
            "ou compilações, antologias, enciclopédias, dicionários, bases de dados e "
            "outras obras, que, por sua seleção, organização ou disposição de seu "
            "conteúdo, constituam uma criação intelectual. Atenção: Não incluir neste "
            "campo o valor recebido ou pago ou remetido a título de transferência total"
            " dos direitos patrimoniais da obra protegida pelo Direito Autoral."
        ),
    )

    VL_EXPL_MARCA = fields.Monetary(
        string="Valor da Exploração Econômica (VL_EXPL_MARCA)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais de Marcas: Valor "
            "relativo aos royalties recebidos ou pagos ou remetidos referentes aos "
            "contratos de licenciamento de uso de marca registrada ou de pedidos de "
            "registros depositados junto ao Instituto Nacional de Propriedade "
            "Industrial (INPI), de que trata a Lei nº 9.279, de 14 de maio de 1996. "
            "Atenção: 1) Não incluir neste campo o valor recebido ou pago ou remetido a"
            " título de transferência total dos direitos patrimoniais da marca "
            "protegida pelo Direito da Propriedade Industrial. 2) Não informar neste "
            "campo o valor recebido ou pago ou remetido correspondente aos contratos de"
            " uso de marcas relativos à concessão de franquia. Esse valor deve ser "
            "informado no campo “Exploração de Franquias”."
        ),
    )

    VL_EXPL_PAT = fields.Monetary(
        string="Valor da Exploração Econômica (VL_EXPL_PAT)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais de Patentes e de "
            "Desenho Industrial: Valor relativo aos royalties recebidos ou pagos ou "
            "remetidos referentes aos contratos de licenciamento de patente ou de "
            "desenho industrial concedido ou de pedido de patente depositado junto ao "
            "Instituto Nacional de Propriedade Industrial (INPI), de que trata a Lei nº"
            " 9.279, de 14 de maio de 1996. Atenção: 1) Não incluir neste campo o valor"
            " recebido ou pago ou remetido a título de transferência total dos direitos"
            " patrimoniais de patente ou desenho industrial protegidos pelo Direito da "
            "Propriedade Industrial. 2) Não informar neste campo o valor recebido ou "
            "pago ou remetido correspondente aos contratos de patentes relativos à "
            "concessão de franquia. Esse valor deve ser informado no campo “Exploração "
            "de Franquias”."
        ),
    )

    VL_EXPL_KNOW = fields.Monetary(
        string="Valor da Exploração de Know-How",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração de Know-How: Valor relativo aos royalties recebidos ou"
            " pagos ou remetidos referentes aos contratos que disponibilizam "
            "conhecimentos, fórmulas e técnicas secretos, não amparados pelo Direito de"
            " Propriedade Industrial, destinados à produção ou à comercialização de "
            "bens e de serviços. Atenção: 1) Não informar neste campo o valor recebido "
            "ou pago ou remetido correspondente aos contratos de know-how relativos à "
            "concessão de franquia. Esse valor deve ser informado no campo “Exploração "
            "de Franquias”. 2) Não informar neste campo o valor recebido ou pago ou "
            "remetido correspondente aos contratos de assistência técnica, científica, "
            "administrativa e assemelhados que impliquem transferência de tecnologia e "
            "os referentes a serviços técnicos e de assistência que não impliquem "
            "transferência de tecnologia. Informações sobre esses contratos devem ser "
            "prestadas no Registro X430 – “Rendimentos Relativos a Serviços, Juros e "
            "Dividendos Recebidos do Brasil e do Exterior”."
        ),
    )

    VL_EXPL_FRANQ = fields.Monetary(
        string="Valor da Exploração de Franquias",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração de Franquias: Valor relativo aos royalties recebidos "
            "ou pagos ou remetidos referentes aos contratos de concessão temporária de "
            "direitos que envolvam uso de marcas, prestação de serviços de assistência "
            "técnica, combinadamente ou não, com qualquer outra modalidade de "
            "transferência de tecnologia necessária à consecução do contrato de "
            "franquia."
        ),
    )

    VL_EXPL_INT = fields.Monetary(
        string="Valor da Exploração dos Direitos Relativos",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração dos Direitos Relativos à Propriedade Intelectual "
            "Referente a Cultivares: Valor relativo aos royalties recebidos ou pagos ou"
            " remetidos referentes à autorização concedida pelo titular da cultivar "
            "protegida para sua produção com fins comerciais, seu oferecimento à venda "
            "ou a comercialização do material de propagação da cultivar, de acordo com "
            "a Lei nº 9.456, de 25 de abril de 1997."
        ),
    )


class RegistroX430(models.AbstractModel):
    """Rendimentos Relativos a Serviços, Juros e Dividendos Recebidos do Brasil
    e do Exterior"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x430"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País ou a dependência de país de residência ou de domicílio da "
            "pessoa física ou jurídica que efetuou o pagamento ou a remessa dos valores"
            " recebidos pela pessoa jurídica declarante, observado o exemplo a seguir: "
            "Exemplo: Pessoa jurídica domiciliada na França possui conta corrente no "
            "Canadá e a partir desta remete valor pela prestação de serviço de "
            "assistência técnica para a pessoa jurídica declarante. Nesse caso, o país "
            "a ser selecionado é a França. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SERV_ASSIST = fields.Monetary(
        string="Valor dos Serviços de Assistência Técnica",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços de Assistência Técnica, Científica, Administrativa e "
            "Assemelhados com Transferência de Tecnologia: Rendimentos recebidos a "
            "título de serviços de assistência técnica, científica, administrativa e "
            "assemelhados referentes aos contratos que, em conformidade com a Lei nº "
            "9.279, de 14 de maio de 1996, estipulam as condições de obtenção de "
            "técnicas, métodos de planejamento e programação, bem como pesquisas, "
            "estudos e projetos destinados à execução ou à prestação de serviços "
            "especializados e que tenham sido objeto de registro no Instituto Nacional "
            "de Propriedade Industrial (INPI)."
        ),
    )

    VL_SERV_SEM_ASSIST = fields.Monetary(
        string="Valor dos Serviços Técnicos e de Assistência",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços Técnicos e de Assistência sem Transferência de "
            "Tecnologia Prestados no Brasil: Rendimentos recebidos a título de serviços"
            " técnicos e de assistência, prestados no Brasil, referentes aos contratos "
            "dispensados de averbação no Instituto Nacional de Propriedade Industrial "
            "(INPI) por não constituírem transferência de tecnologia, tais como: i) "
            "Agenciamento de compras, inclusive serviços de logística relativos ao "
            "embarque de mercadorias e liberação alfandegária e outros de natureza "
            "similar; ii) Beneficiamento de produtos; iii) Homologação e certificação "
            "de qualidade de produtos brasileiros com o objetivo de promover a "
            "exportação; iv) Consultoria nas áreas comercial, financeira, jurídica, "
            "reorganização societária e licitações; v) Estudos de viabilidade "
            "econômica; vi) Serviços de marketing; vii) Serviços realizados sem a "
            "presença de técnicos da empresa tomadora do serviço e que não gerem "
            "quaisquer relatórios ou documentos; viii) Serviços de manutenção de "
            "software realizados sem a presença dos técnicos da empresa tomadora no "
            "local da prestação, tais como os efetuados por meio de “help-desk”. As "
            "pessoas jurídicas que exercem atividades no mercado financeiro, também, "
            "devem informar, neste campo, os rendimentos recebidos pelos seguintes "
            "serviços: i) Administração de fundos, loterias, sociedades de "
            "investimento, dentre outros de natureza similar; ii) Taxas de "
            "administração de consórcios e similares; iii) Tarifas e portes e comissões"
            " por prestação de serviços de cobrança, colocação de títulos e valores "
            "mobiliários por conta e ordem de terceiros; iv) Serviços prestados na "
            "contratação de operações de câmbio, comissão “del credere” relativa à "
            "administração de ativos redescontados junto ao Bacen; v) Serviços "
            "prestados na intermediação de bolsas, custódia, bem como serviços "
            "prestados a partes ligadas;"
        ),
    )

    VL_SERV_SEM_ASSIST_EXT = fields.Monetary(
        string="VL_SERV_SEM_ASSIST_EXT",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços Técnicos e de Assistência sem Transferência de "
            "Tecnologia Prestados no Exterior: Rendimentos recebidos a título de "
            "serviços técnicos e de assistência, prestados no Brasil, referentes aos "
            "contratos dispensados de averbação no Instituto Nacional de Propriedade "
            "Industrial (INPI) por não constituírem transferência de tecnologia, tais "
            "como: i) Agenciamento de compras, inclusive serviços de logística "
            "relativos ao embarque de mercadorias e liberação alfandegária e outros de "
            "natureza similar; ii) Beneficiamento de produtos; iii) Homologação e "
            "certificação de qualidade de produtos brasileiros com o objetivo de "
            "promover a exportação; iv) Consultoria nas áreas comercial, financeira, "
            "jurídica, reorganização societária e licitações; v) Estudos de viabilidade"
            " econômica; vi) Serviços de marketing; vii) Serviços realizados sem a "
            "presença de técnicos da empresa tomadora do serviço e que não gerem "
            "quaisquer relatórios ou documentos; viii) Serviços de manutenção de "
            "software realizados sem a presença dos técnicos da empresa tomadora no "
            "local da prestação, tais como os efetuados por meio de “help-desk”. As "
            "pessoas jurídicas que exercem atividades no mercado financeiro, também, "
            "devem informar, neste campo, os rendimentos recebidos pelos seguintes "
            "serviços: i) Administração de fundos, loterias, sociedades de "
            "investimento, dentre outros de natureza similar; ii) Taxas de "
            "administração de consórcios e similares; iii) Tarifas e portes e comissões"
            " por prestação de serviços de cobrança, colocação de títulos e valores "
            "mobiliários por conta e ordem de terceiros; iv) Serviços prestados na "
            "contratação de operações de câmbio, comissão “del credere” relativa à "
            "administração de ativos redescontados junto ao Bacen; v) Serviços "
            "prestados na intermediação de bolsas, custódia, bem como serviços "
            "prestados a partes ligadas;"
        ),
    )

    VL_JURO = fields.Monetary(
        string="Valor dos Juros sobre o Capital Próprio",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Juros sobre o Capital Próprio: Valor recebido a título de "
            "remuneração dos recursos investidos pela pessoa jurídica em outra pessoa "
            "jurídica domiciliada no Brasil, de que trata o art. 9º da Lei nº 9.249, de"
            " 26 de dezembro de 1995. Informar, também, neste campo o valor recebido a "
            "título de juros sobre o capital próprio correspondente à participação da "
            "pessoa jurídica em empresas residentes ou domiciliadas no exterior. "
            "Atenção: 1) Não informar neste campo o valor correspondente aos juros "
            "recebidos durante o período que anteceder o início das operações sociais "
            "ou de implantação do empreendimento inicial de que trata a alínea “b” do "
            "parágrafo 1º do art. 15 do Decreto-Lei nº 1.598, de 26 de dezembro de "
            "2012. 2) Não informar neste campo o valor relativo aos juros recebidos de "
            "cooperativa da qual a pessoa jurídica seja associada correspondentes à "
            "remuneração de até 12% sobre o capital integralizado, de que trata o "
            "parágrafo único do art. 49 da Lei nº 4.506, de 30 de novembro de 1964, c/c"
            " parágrafo 3º do art. 24 da Lei nº 5.764, de 16 de dezembro de 1971, e o "
            "357 do Decreto nº 9.580/2018."
        ),
    )

    VL_DEMAIS_JUROS = fields.Monetary(
        string="Valor dos Demais Juros",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Demais Juros: Valor recebido a título de juros decorrentes da "
            "remuneração de recursos emprestados pela pessoa jurídica a outras pessoas "
            "físicas ou jurídicas, residentes ou domiciliadas no Brasil ou no exterior "
            "por meio de contratos de financiamento ou de mútuo registrados ou não no "
            "Banco Central do Brasil. Também deve ser informado neste campo o valor "
            "correspondente aos: - juros recebidos durante o período que anteceder o "
            "início das operações sociais ou de implantação do empreendimento inicial "
            "de que trata alínea “b” do parágrafo 1º do art. 15 do Decreto-Lei nº "
            "1.598, de 26 de dezembro de 2012; - juros recebidos de cooperativa da qual"
            " a pessoa jurídica seja associada correspondentes à remuneração de até 12%"
            " sobre o capital integralizado, de que trata o parágrafo único do art. 49 "
            "da Lei nº 4.506, de 30 de novembro de 1964, c/c parágrafo 3º do art. 24 da"
            " Lei nº 5.764, de 16 de dezembro de 1971, e art. 357 do Decreto nº "
            "9.580/2018; - juros recebidos correspondentes a quaisquer transações "
            "realizadas pela pessoa jurídica."
        ),
    )

    VL_DIVID = fields.Monetary(
        string="Valor dos Dividendos",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Dividendos: Lucros ou dividendos recebidos pela pessoa jurídica "
            "em decorrência de participação societária avaliada pelo método da "
            "equivalência patrimonial ou pelo custo de aquisição em outras sociedades "
            "no Brasil ou no exterior."
        ),
    )


class RegistroX450(models.AbstractModel):
    """Pagamentos ou Remessas Relativos a Serviços, Juros e Dividendos a
    Beneficiários do Brasil e do Exterior"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x450"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País ou a dependência de país de residência ou domicílio da pessoa "
            "física ou jurídica destinatária do pagamento ou da remessa efetuados pela "
            "pessoa jurídica declarante, observado o exemplo a seguir: Exemplo: Pessoa "
            "jurídica declarante efetua remessa, por conta e ordem do beneficiário do "
            "pagamento que é residente no Japão, para conta corrente localizada nos "
            "Estados Unidos da América. Nesse caso, o país a ser selecionado é o Japão."
            " Código do país, conforme tabela do Sped (Disponibilizada no programa da "
            "ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )


class RegistroX451(models.AbstractModel):
    """Pagamentos ou Remessas Relativos a Serviços, Juros e Dividendos a
    Beneficiários do Brasil e do Exterior – Demais informações"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x451"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX460(models.AbstractModel):
    "Inovação Tecnológica e Desenvolvimento Tecnológico"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x460"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX470(models.AbstractModel):
    "Capacitação de Informática e Inclusão Digital"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x470"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX480(models.AbstractModel):
    "Benefícios Fiscais – Parte I"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x480"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor", sped_length="19")


class RegistroX485(models.AbstractModel):
    "Benefícios Fiscais – Parte II"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x485"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    TIPO_BENEF = fields.Char(
        string="Tipo do Benefício",
        required=True,
        sped_length="2",
        help=(
            "Tipo do Benefício: 1 – REPES 2 – RECAP 3 – PADIS 4 – REIDI 5 – RECINE 6 – "
            "RETID 7 – ÓLEO BUNKER 8 – REPORTO 9 – RET II 10 - RET - PMCMV e/ou RET – "
            "PCVA 11 – RET - EEI 12 – ENTIDADE BENEFICENTE DE ASSISTÊNCIA SOCIAL IMUNE "
            "DE CONTRIBUIÇÕES SOCIAIS 13 – REPETRO – INDUSTRIALIZAÇÃO 14 – REPETRO - "
            "NACIONAL 15 – REPETRO – PERMANENTE 16 – REPETRO - TEMPORÁRIO"
        ),
    )

    ATO_DECL = fields.Char(
        string="N Número do Ato Declaratório",
        required=True,
        help=(
            "N Número do Ato Declaratório: úmero do Ato Declaratório Executivo (ADE) "
            "emitido pela RFB, que habilitou a pessoa jurídica no: - Repes (Lei nº "
            "11.196, de 2005, art. 1º, § único; Decreto nº 5.712, de 2006, art. 3º, "
            "caput; IN SRF nº 630, de 2006, art. 7º, caput). - Recap (Lei nº 11.196, de"
            " 2005, art. 12, § único; Decreto nº 5.649, de 2005, art. 2º, caput; IN RFB"
            " nº 1911, de 2019, art. 569, caput)."
        ),
    )

    CNPJ_INCORP = fields.Char(
        string="Inscrição da “Incorporação Afetada”",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "Inscrição da “Incorporação Afetada” no Cadastro Nacional da Pessoa "
            "Jurídica (CNPJ) Inscrição no CNPJ (formato NN.NNN.NNN/NNNN-NN - deverá ser"
            " preenchido sem pontos ou barra) de cada incorporação, quantas forem "
            "vinculadas ao evento “109 - Inscrição de Incorporação Imobiliária - "
            "Patrimônio de Afetação', consoante art. 3º, II, da IN RFB nº 1.435, de "
            "2013. Somente preencher quando X485.TIPO_BENEF for igual a “9 – RET-II”."
        ),
    )

    ID_OBRA_2018 = fields.Char(
        string="S Identificação da Obra/Construção",
        xsd_type="numeric_code",
        sped_length="18",
        help=(
            "S Identificação da Obra/Construção - CONTRATO FIRMADO OU OBRAS INICIADAS "
            "ATÉ 31 DE DEZEMBRO DE 2018. omente preencher quando X485.TIPO_BENEF for "
            "igual a “10 - RET - PMCMV e/ou RET – PCVA”."
        ),
    )

    ID_OBRA_2020 = fields.Char(
        string="S Identificação da Obra/Construção (ID_OBRA_2020)",
        xsd_type="numeric_code",
        sped_length="18",
        help=(
            "S Identificação da Obra/Construção - CONTRATO FIRMADO OU OBRAS INICIADAS A"
            " PARTIR DE 1º DE JANEIRO DE 2020. omente preencher quando X485.TIPO_BENEF "
            "for igual a “10 - RET - PMCMV e/ou RET – PCVA”."
        ),
    )

    ID_OBRA_EEI = fields.Char(
        string="Identificação da Obra/Construção",
        xsd_type="numeric_code",
        sped_length="18",
        help=(
            "Identificação da Obra/Construção. Somente preencher quando X485.TIPO_BENEF"
            " for igual a “11 – RET-EEI”."
        ),
    )

    PORT_CEBAS = fields.Char(
        string="Número da Portaria que concedeu",
        xsd_type="numeric_code",
        sped_length="7",
        help=(
            "Número da Portaria que concedeu o CEBAS Atual Número da Portaria, "
            "publicada no Diário Oficial da União (DOU) que concedeu o Certificado de "
            "Entidade Beneficente de Assistência Social (CEBAS) vigente, emitido pela "
            "autoridade executiva federal responsável pela área de saúde, educação ou "
            "assistência social, conforme a área de atuação preponderante da entidade "
            "(Lei Complementar nº 187, de 2021, art. 35). O campo deve ser preenchido "
            "no seguinte formato: NNN/AAAA. Somente preencher quando X485.TIPO_BENEF "
            "for igual a “12 – ENTIDADE BENEFICENTE DE ASSISTÊNCIA SOCIAL IMUNE DE "
            "CONTRIBUIÇÕES SOCIAIS”."
        ),
    )

    DT_DOU_PORT_CEBAS = fields.Date(
        string="Data da Publicação da Portaria que concedeu",
        sped_length="8",
        help=(
            "Data da Publicação da Portaria que concedeu o CEBAS Atual no DOU Data em "
            "que a Portaria que concedeu/renovou o Certificado de Entidade Beneficente "
            "de Assistência Social (CEBAS) atual, emitido pela autoridade executiva "
            "federal responsável pela área de saúde, educação ou assistência social, "
            "conforme a área de atuação preponderante da entidade, foi publicada no "
            "Diário Oficial da União (DOU) (Lei Complementar nº 187, de 2021, art. 35)."
            " Somente preencher quando X485.TIPO_BENEF for igual a “12 – ENTIDADE "
            "BENEFICENTE DE ASSISTÊNCIA SOCIAL IMUNE DE CONTRIBUIÇÕES SOCIAIS”."
        ),
    )

    DT_INI_PORT_CEBAS = fields.Date(
        string="Data de Início de Vigência da Portaria",
        sped_length="8",
        help=(
            "Data de Início de Vigência da Portaria que concedeu o CEBAS Atual Data de "
            "início de vigência da Portaria, publicada no Diário Oficial da União (DOU)"
            " que concedeu/renovou o Certificado de Entidade Beneficente de Assistência"
            " Social (CEBAS) atual, emitido pela autoridade executiva federal "
            "responsável pela área de saúde, educação ou assistência social, conforme a"
            " área de atuação preponderante da entidade (Lei Complementar nº 187, de "
            "2021, arts. 35 a 37). O campo deve ser preenchido no seguinte formato: "
            "DD/MM/AAAA. Somente preencher quando X485.TIPO_BENEF for igual a “12 – "
            "ENTIDADE BENEFICENTE DE ASSISTÊNCIA SOCIAL IMUNE DE CONTRIBUIÇÕES "
            "SOCIAIS”."
        ),
    )

    DT_FIN_PORT_CEBAS = fields.Date(
        string="Data de Fim de Vigência da Portaria que concedeu",
        sped_length="8",
        help=(
            "Data de Fim de Vigência da Portaria que concedeu o CEBAS Atual Data de fim"
            " de vigência da Portaria, publicada no Diário Oficial da União (DOU) que "
            "concedeu/renovou o Certificado de Entidade Beneficente de Assistência "
            "Social (CEBAS) atual, emitido pela autoridade executiva federal "
            "responsável pela área de saúde, educação ou assistência social, conforme a"
            " área de atuação preponderante da entidade (Lei Complementar nº 187, de "
            "2021, arts. 35 a 37). O campo deve ser preenchido no seguinte formato: "
            "DD/MM/AAAA. Somente preencher quando X485.TIPO_BENEF for igual a “12 – "
            "ENTIDADE BENEFICENTE DE ASSISTÊNCIA SOCIAL IMUNE DE CONTRIBUIÇÕES "
            "SOCIAIS”."
        ),
    )


class RegistroX490(models.AbstractModel):
    "Polo Industrial de Manaus e Amazônia Ocidental"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x490"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX500(models.AbstractModel):
    "Zonas de Processamento de Exportação (ZPE)"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x500"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX510(models.AbstractModel):
    "Áreas de Livre Comércio (ALC)"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.x510"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroY520(models.AbstractModel):
    "Pagamentos/Recebimentos do Exterior ou de Não Residentes"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y520"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    TIP_EXT = fields.Char(
        string="Tipo: R",
        required=True,
        sped_length="1",
        help="Tipo: R - Rendimentos Recebidos P – Pagamentos",
    )

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País em que está situada a pessoa física ou jurídica que efetuou o "
            "pagamento ou beneficiária do pagamento. Código do País, conforme tabela do"
            " Sped (Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    FORMA = fields.Integer(
        string="Forma de Recebimento/Pagamento",
        required=True,
        sped_length="1",
        help=(
            "Forma de Recebimento/Pagamento: “1” – Operação de Câmbio “2” – "
            "Transferência Internacional em Reais “3” – Cartão de Crédito “4” – "
            "Depósito em Conta do Exterior (só válido para TIP_EXT='R') “5” – "
            "Utilização de Recursos Mantidos no Exterior (só válido para TIP_EXT='P') "
            "“6” – Em Moeda Nacional ou Estrangeira"
        ),
    )

    NAT_OPER = fields.Char(
        string="Natureza da Operação",
        required=True,
        xsd_type="numeric_code",
        sped_length="5",
        help=(
            "Natureza da Operação: Código da natureza-fato específico correspondente à "
            "motivação do recebimento/pagamento, conforme § 1o do artigo 23 da Lei no "
            "4.131, de 03 de setembro de 1962, e que consta na Circular no 3.690, de 16"
            " de dezembro de 2013, do Banco Central do Brasil. Atenção: As operações "
            "que não se enquadrem em nenhuma das classificações disponíveis serão "
            "identificadas pelo código que indique a melhor aproximação possível da "
            "natureza da transação. Natureza da operação, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). Observação: O "
            "registro Y520 não possui informação de data em seus campos. Portanto, os "
            "códigos utilizados no campo Y520.NAT_OPER devem ser os vigentes em na "
            "darta final da ECF, para todas as operações ocorridas durante o ano da "
            "escrituração."
        ),
    )

    VL_PERIODO = fields.Monetary(
        string="Valor",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor: Total dos valores recebidos ou pagos, provenientes do exterior ou "
            "destinados ao exterior, de acordo com o código indicativo da natureza da "
            "operação."
        ),
    )


class RegistroY570(models.AbstractModel):
    "Demonstrativo do Imposto de Renda e CSLL Retidos na Fonte"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y570"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CNPJ_FON = fields.Char(
        string="CNPJ: CNPJ da fonte pagadora", required=True, sped_length="14"
    )

    NOM_EMP = fields.Char(
        string="Nome Empresarial",
        required=True,
        help=(
            "Nome Empresarial: Nome da pessoa jurídica responsável pela retenção e "
            "recolhimento da fonte que estiver sendo compensado."
        ),
    )

    IND_ORG_PUB = fields.Char(
        string="Indicador de Órgão Público: S",
        required=True,
        sped_length="1",
        help=(
            "Indicador de Órgão Público: S - Sim N – Não Selecione “Sim” ou “Não” em "
            "relação à pessoa jurídica responsável pela retenção e recolhimento da "
            "fonte que estiver sendo compensado. Ao selecionar 'Sim' serão "
            "disponibilizados os códigos de recolhimento utilizados pelos Órgãos "
            "Públicos Federais ou Entidades da Administração Pública Federal, ao "
            "selecionar 'Não', serão disponibilizados os demais códigos."
        ),
    )

    COD_REC = fields.Char(
        string="Código de Receita Utilizado Para Recolhimento",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
        help=(
            "Código de Receita Utilizado Para Recolhimento na Fonte, conforme tabela do"
            " Sped (Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_REND = fields.Monetary(
        string="Rendimento Bruto",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Rendimento Bruto: Valor bruto do rendimento que originou a retenção.",
    )

    IR_RET = fields.Float(
        string="IR Retido na Fonte",
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "IR Retido na Fonte: Valor de todo o imposto de renda retido na fonte "
            "durante o período abrangido pela declaração, incidente sobre as receitas "
            "que compõem a base de cálculo do tributo devido, independentemente de a "
            "empresa ter apurado prejuízo fiscal ou imposto de renda devido menor que o"
            " retido na fonte durante o período."
        ),
    )

    CSLL_RET = fields.Float(
        string="CSLL Retida na Fonte",
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "CSLL Retida na Fonte: Valor de toda a contribuição social sobre o lucro "
            "líquido retida na fonte durante o período abrangido pela declaração, "
            "incidente sobre as receitas que compõem a base de cálculo do tributo "
            "devido, independentemente de a empresa ter apurado base de cálculo "
            "negativa ou CSLL devida menor que a retida na fonte durante o período."
        ),
    )


class RegistroY590(models.AbstractModel):
    "Ativos no Exterior"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y590"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    TIP_ATIVO = fields.Char(
        string="Tipo do Ativo que Possui no Exterior",
        required=True,
        sped_length="14",
        help=(
            "Tipo do Ativo que Possui no Exterior, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    PAIS = fields.Char(
        string="Código do País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "Código do País: País onde se localiza o ativo no exterior, conforme tabela"
            " do Sped (Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DISCRIMINACAO = fields.Char(
        string="Discriminação: Detalhar, neste campo",
        required=True,
        help=(
            "Discriminação: Detalhar, neste campo, as informações correspondentes aos "
            "ativos, tais como: tipo, localização, data de aquisição e de venda, de "
            "quem foi adquirido, a quem foi alienado, instituição que intermediou a "
            "operação, valor de aquisição e/ou de venda em moeda estrangeira, "
            "instituição financeira e agência, tratando-se de aplicação financeira ou "
            "depósito e, na hipótese de participações societárias, espécie de "
            "participação e empresa investida."
        ),
    )

    VL_ANT = fields.Monetary(
        string="Valor Anterior",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Anterior: Informar o valor contábil do ativo no exterior no final do"
            " período anterior. Atenção: 1) Caso o período abrangido pela ECF não se "
            "inicie em 01/01, a exemplo de início de atividades ou ocorrência de "
            "situação especial no ano-calendário, deve ser informado o valor em reais "
            "(R$) do ativo no exterior na data de início do período abrangido pela ECF."
            " 2) Caso o ativo tenha sido adquirido no curso do período abrangido pela "
            "ECF, deve ser informado, neste campo, o valor 'zero' e no campo "
            "“Discriminação” a data e o valor da aquisição."
        ),
    )

    VL_ATUAL = fields.Monetary(
        string="Valor Atual",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Atual: Valor contábil do ativo no final do período atual. Atenção: "
            "Caso o ativo tenha sido alienado no curso do período abrangido pela ECF, "
            "deve ser informado, neste campo, o valor 'zero' e no campo “Discriminação”"
            " a data e o valor da alienação."
        ),
    )


class RegistroY600(models.AbstractModel):
    """Identificação e Remuneração de Sócios, Titulares, Dirigentes e
    Conselheiro"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y600"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_ALT_SOC = fields.Date(
        string="Data da Alteração no Quadro Societário",
        required=True,
        sped_length="8",
        help=(
            "Data da Alteração no Quadro Societário. Pode ser uma data anterior ao ano "
            "da escrituração, inclusive da criação da Pessoa Jurídica. Atenção: No caso"
            " de preenchimento de Y600.DT_FIM_SOC, informar neste campo a data da "
            "última alteração da participação do sócio, antes da data da saída do "
            "quadro societário. Observação: No caso de administradores, diretores, "
            "dirigentes, presidentes ou conselheiros, adotar a data em que efetivamente"
            " começou a executar essas funções na entidade."
        ),
    )

    DT_FIM_SOC = fields.Date(
        string="Data da Saída do Quadro Societário",
        sped_length="8",
        help=(
            "Data da Saída do Quadro Societário. Deve ser preenchida somente se a saída"
            " do quadro societário ocorreu no ano da escrituração."
        ),
    )

    PAIS = fields.Char(
        string="País de Residência ou Domicílio da Pessoa Física",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País de Residência ou Domicílio da Pessoa Física ou Jurídica. Código do "
            "país, conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_QUALIF = fields.Char(
        string="Indicador de Qualificação do Sócio",
        required=True,
        sped_length="2",
        help=(
            "Indicador de Qualificação do Sócio, Titular, Dirigente ou Conselheiro: PF "
            "- Pessoa Física PJ - Pessoa Jurídica FI – Fundo de Investimento"
        ),
    )

    CPF_CNPJ = fields.Char(
        string="CPF ou CNPJ do Sócio, Titular",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "CPF ou CNPJ do Sócio, Titular, Dirigente ou Conselheiro. Obrigatório se "
            "Código do País for igual a '105' (Brasil) Caso contrário, pode ser "
            "preenchido com branco(s). Se IND_QUALIF_SOCIO =” PF” preencher com CPF. "
            "Senão, preencher com CNPJ."
        ),
    )

    NOM_EMP = fields.Char(
        string="Nome/Nome empresarial do Sócio",
        required=True,
        help="Nome/Nome empresarial do Sócio, Titular, Dirigente ou Conselheiro.",
    )

    QUALIF = fields.Char(
        string="S S S O Qualificação do Sócio",
        required=True,
        sped_length="2",
        help=(
            "S S S O Qualificação do Sócio, Titular, Dirigente ou Conselheiro. Se PAIS "
            "= “105” (Brasil) E IND_QUALIF_SOCIO = “PF”: 01 – Acionista Pessoa Física "
            "Domiciliado no Brasil 02 – Sócio Pessoa Física Domiciliado no Brasil 09 – "
            "Titular 10 – Administrador sem Vínculo Empregatício 11 – Diretor sem "
            "Vínculo Empregatício 12 – Presidente sem Vínculo Empregatício 13 – "
            "Administrador com Vínculo Empregatício 14 – Conselheiro de Administração "
            "ou Fiscal 15 – Diretor com Vínculo Empregatício 16 – Fundador 17 – "
            "Presidente com Vínculo Empregatício 18 – Usufrutuário de Quotas ou Ações e"
            " PAIS = “105” (Brasil) E IND_QUALIF_SOCIO = 'PJ': 03 - Acionista Pessoa "
            "Jurídica Domiciliado no Brasil 04 - Sócio Pessoa Jurídica Domiciliado no "
            "Brasil 18 – Usufrutuário de Quotas ou Ações e PAIS diferente de “105” "
            "(Brasil) E IND_QUALIF_SOCIO = 'PF': 05 - Acionista Pessoa Física Residente"
            " ou Domiciliado no Exterior 06 - Sócio Pessoa Física Residente ou "
            "Domiciliado no Exterior 14 – Conselheiro de Administração ou Fiscal 18 – "
            "Usufrutuário de Quotas ou Ações e PAIS diferente de “105” (Brasil) E "
            "IND_QUALIF_SOCIO = 'PJ': 07 - Acionista Pessoa Jurídica Residente ou "
            "Domiciliado no Exterior 08 - Sócio Pessoa Jurídica Residente ou "
            "Domiciliado no Exterior 18 – Usufrutuário de Quotas ou Ações bservação: "
            "Caso o sócio seja também administrador ou diretor, deve selecionar a opção"
            " 02 – Sócio Pessoa Física Domiciliado no Brasil ou 06 – Sócio Pessoa "
            "Física Domiciliado no Exterior."
        ),
    )

    PERC_CAP_TOT = fields.Float(
        string="Percentual Relativo à Participação",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual Relativo à Participação da Pessoa Física ou Jurídica, Sócio, "
            "Titular, Conselheiro ou Dirigente, no Capital Total. Observação: Caso o "
            "valor seja 100,00%, informe somente “100”."
        ),
    )

    PERC_CAP_VOT = fields.Float(
        string="Percentual Relativo à Participação (PERC_CAP_VOT)",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual Relativo à Participação da Pessoa Física ou Jurídica, Sócio, "
            "Titular, Conselheiro ou Dirigente, no Capital Votante. Observação: Caso o "
            "valor seja 100,00%, informe somente “100”."
        ),
    )

    CPF_REP_LEG = fields.Char(
        string="CPF do Representante Legal",
        xsd_type="numeric_code",
        sped_length="11",
        help=(
            "CPF do Representante Legal: No caso de residente ou domiciliado no "
            "exterior ou de pessoa física residente no Brasil legalmente representada."
        ),
    )

    QUALIF_REP_LEG = fields.Char(
        string="Qualificação do Representante Legal",
        xsd_type="numeric_code",
        sped_length="2",
        help=(
            "Qualificação do Representante Legal: Obrigatório se CPF_REP_LEG é "
            "diferente de vazio Se IND_QUALIF_SOCIO = “PF” 01 - Procurador 02 - Curador"
            " 03 - Mãe 04 - Pai 05 - Tutor 06 – Outro Se IND_QUALIF_SOCIO = “PJ” 01 - "
            "Procurador 06 – Outro"
        ),
    )

    VL_REM_TRAB = fields.Monetary(
        string="Remuneração do Trabalho: Valor",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Remuneração do Trabalho: Valor, antes da dedução do imposto de renda "
            "retido na fonte, dos rendimentos pagos e escriturados, nos livros da "
            "escrituração contábil ou no livro Caixa, a título de remuneração a sócios,"
            " dirigentes e conselheiros pela prestação de serviços, ou quaisquer outros"
            " pagamentos, tais como: pró-labore e aluguéis."
        ),
    )

    VL_LUC_DIV = fields.Monetary(
        string="Lucros/Dividendos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Lucros/Dividendos: Valor dos lucros e dividendos efetivamente pagos no "
            "ano-calendário a sócios ou a titular de empresa individual."
        ),
    )

    VL_JUR_CAP = fields.Monetary(
        string="Juros Sobre o Capital Próprio",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Juros Sobre o Capital Próprio: Valor dos juros pagos ou creditados a "
            "titular, ou a sócios ou acionistas, a título de remuneração do capital "
            "próprio, antes de deduzido o imposto de renda na fonte, em conformidade "
            "com o disposto no art. 9o da Lei no 9.249, de 1995."
        ),
    )

    VL_DEM_REND = fields.Monetary(
        string="Demais Rendimentos: Valor",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Demais Rendimentos: Valor, antes da dedução do imposto de renda retido na "
            "fonte, dos demais rendimentos pagos ou creditados a sócios, a acionistas, "
            "a titular de empresa individual, a dirigentes ou a conselheiros, inclusive"
            " os lucros e dividendos não apurados em balanço e distribuídos."
        ),
    )

    VL_IR_RET = fields.Monetary(
        string="IR Retido na Fonte",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "IR Retido na Fonte: Valor do imposto de renda retido na fonte por ocasião "
            "do pagamento de lucros ou dividendos não abrangidos pela isenção, e sobre "
            "os demais rendimentos pagos a sócios, a acionistas, a titular de empresa "
            "individual, a dirigentes ou a conselheiros."
        ),
    )


class RegistroY612(models.AbstractModel):
    """Identificação e Rendimentos de Dirigentes e Conselheiros - Imunes ou
    Isentas"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y612"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CPF = fields.Char(
        string="CPF",
        required=True,
        xsd_type="numeric_code",
        sped_length="11",
        help="CPF: CPF do dirigente ou conselheiro beneficiário dos rendimentos.",
    )

    NOME = fields.Char(
        string="Nome",
        required=True,
        help="Nome: Nome do dirigente ou conselheiro beneficiário dos rendimentos.",
    )

    QUALIF = fields.Char(
        string="Qualificação",
        required=True,
        xsd_type="numeric_code",
        sped_length="2",
        help=(
            "Qualificação: Qualificação do dirigente ou conselheiro beneficiário dos "
            "rendimentos: 10 - Administrador sem Vínculo Empregatício 11 - Diretor sem "
            "Vínculo Empregatício 12 – Presidente sem Vínculo Empregatício 13 - "
            "Administrador com Vínculo Empregatício 14 - Conselheiro de Administração "
            "ou Fiscal 15 - Diretor com Vínculo Empregatício 16 - Fundador 17 - "
            "Presidente com Vínculo Empregatício"
        ),
    )

    VL_REM_TRAB = fields.Monetary(
        string="Rendimentos do Trabalho",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Rendimentos do Trabalho: Valor dos rendimentos pagos e escriturados, nos "
            "livros da escrituração contábil ou no livro Caixa, a título de remuneração"
            " a dirigentes ou conselheiros pela prestação de serviços, ou quaisquer "
            "outros pagamentos, tais como: pró- labore e aluguéis. Esses valores "
            "sujeitam-se à incidência do imposto de renda na fonte e na declaração de "
            "rendimentos dos beneficiários."
        ),
    )

    VL_DEM_REND = fields.Monetary(
        string="Demais Rendimentos",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Demais Rendimentos: Valor de outros rendimentos não classificados como "
            "rendimento do trabalho, escriturados nos livros da escrituração contábil "
            "ou no livro Caixa, pagos aos dirigentes ou conselheiros. Esses valores "
            "sujeitam-se à incidência do imposto de renda na fonte e na declaração de "
            "rendimentos dos beneficiários."
        ),
    )

    VL_IR_RET = fields.Monetary(
        string="IR Retido na Fonte",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "IR Retido na Fonte: Valor do imposto de renda retido na fonte por ocasião "
            "do pagamento dos rendimentos a dirigentes ou conselheiros da pessoa "
            "jurídica imune ou isenta de IRPJ."
        ),
    )


class RegistroY620(models.AbstractModel):
    "Participações Avaliadas pelo Método de Equivalência Patrimonial"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y620"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    DT_EVENTO = fields.Date(
        string="Data do Evento",
        required=True,
        sped_length="8",
        help=(
            "Data do Evento: Data do evento societário que deu causa à classificação "
            "conforme o indicador do tipo de relacionamento (Y620.IND_RELAC) no formato"
            " DDMMYYYY."
        ),
    )

    IND_RELAC = fields.Char(
        string="Indicador do Tipo de Relacionamento",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador do Tipo de Relacionamento: 1 - Controle 2 - Controle Conjunto 3 "
            "- Influência Significativa 4 - Outras causas para aplicar MEP (mesmo grupo"
            " ou controle comum) 5 - Exclusão do MEP"
        ),
    )

    PAIS = fields.Char(
        string="País",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "País: País onde a coligada ou controlada está domiciliada., conforme "
            "tabela do Sped (Disponibilizada no programa da ECF no diretório Arquivos "
            "de Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ: CNPJ da coligada ou controlada",
        sped_length="14",
        help=(
            "CNPJ: CNPJ da coligada ou controlada. Obrigatório se PAIS = 105 (Brasil) "
            "Caso contrário, o campo deve ser nulo"
        ),
    )

    NOM_EMP = fields.Char(
        string="Nome Empresarial",
        required=True,
        help="Nome Empresarial: Nome empresarial da coligada ou controlada.",
    )

    VALOR_REAIS = fields.Char(
        string="Valor Total da Participação em Reais",
        required=True,
        sped_length="19",
        help="Valor Total da Participação em Reais (Cotação da data do evento).",
    )

    VALOR_ESTR = fields.Char(
        string="Valor Total da Participação em Moeda Original",
        required=True,
        sped_length="19",
        help=(
            "Valor Total da Participação em Moeda Original do País da Empresa "
            "Investida."
        ),
    )

    PERC_CAP_TOT = fields.Float(
        string="Percentual de Participação no Capital Total",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=("Percentual de Participação no Capital Total da Coligada ou Controlada."),
    )

    PERC_CAP_VOT = fields.Float(
        string="Percentual de Participação no Capital Votante",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual de Participação no Capital Votante da Coligada ou Controlada."
        ),
    )

    RES_EQ_PAT = fields.Char(
        string="Resultado de Equivalência Patrimonial", sped_length="19"
    )

    DATA_AQUIS = fields.Date(
        string="Data da Primeira Aquisição",
        required=True,
        sped_length="8",
        help=(
            "Data da Primeira Aquisição da Participação Societária Observação: Poderá "
            "ser igual a Y600.DT_EVENTO se a primeira aquisição foi causa do MEP."
        ),
    )

    IND_PROC_CART = fields.Char(
        string="Sumário em Cartório",
        required=True,
        sped_length="1",
        help=(
            "Sumário em Cartório: Informar se houve sumário registrado em cartório "
            "relativo ao Laudo de Avaliação do Valor Justo dos Ativos Líquidos da "
            "Investida (Mais-valia ou menos-valia) de acordo com o art. 178 da "
            "Instrução Normativa RFB nº 1.700, de 14 de março de 2017: S – Sim N = Não"
        ),
    )

    NUM_PROC_CART = fields.Char(
        string="Número do Registro no Cartório",
        help=(
            "Número do Registro no Cartório: Informar o número do registro em cartório "
            "do sumário relativo ao Laudo de Avaliação do Valor Justo dos Ativos "
            "Líquidos da Investida (Mais- valia ou menos-valia) de acordo com o art. "
            "178 da Instrução Normativa RFB nº 1.700, de 14 de março de 2017."
        ),
    )

    NOME_CART = fields.Char(
        string="Nome do Cartório",
        help=(
            "Nome do Cartório: Informar o nome e endereço do cartório onde foi "
            "registrado o sumário relativo ao Laudo de Avaliação do Valor Justo dos "
            "Ativos Líquidos da Investida (Mais- valia ou menos-valia) de acordo com o "
            "art. 178 da Instrução Normativa RFB nº 1.700, de 14 de março de 2017."
        ),
    )

    IND_PROC_RFB = fields.Char(
        string="Laudo Protocolado na RFB",
        required=True,
        sped_length="1",
        help=(
            "Laudo Protocolado na RFB: Informar se houve Laudo de Avaliação do Valor "
            "Justo dos Ativos Líquidos da Investida (Mais-valia ou menos-valia) de "
            "acordo com o art. 178 da Instrução Normativa RFB nº 1.700, de 14 de março "
            "de 2017, protocolado na RFB: S – Sim N = Não Observação: Deverá ser "
            "informado também para os casos de aquisição ou venda ocorridos antes do "
            "período a que se refere essa ECF."
        ),
    )

    NUM_PROC_RFB = fields.Char(
        string="Número do Processo",
        help=(
            "Número do Processo: Informar o número do processo eletrônico do Laudo de "
            "Avaliação do Valor Justo dos Ativos Líquidos da Investida protocolado na "
            "RFB (Mais-valia ou menos-valia) de acordo com o art. 178 da Instrução "
            "Normativa RFB nº 1.700, de 14 de março de 2017."
        ),
    )


class RegistroY630(models.AbstractModel):
    "Fundos/Clubes de Investimento"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y630"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CNPJ = fields.Char(
        string="CNPJ",
        required=True,
        sped_length="14",
        help=(
            "CNPJ: As administradoras de Fundos ou Clubes de Investimento devem "
            "informar, neste campo, o CNPJ de cada Fundo ou Clube de Investimento. Os "
            "fundos de investimento imobiliário de que trata a Lei no 8.668, de 1993, "
            "alterada pelos arts. 2o a 4o e 22 da Lei no 9.779, de 1999, devem informar"
            " o próprio CNPJ."
        ),
    )

    QTE_QUOT = fields.Integer(
        string="Quantidade de Quotistas no Final do Período",
        required=True,
        help=(
            "Quantidade de Quotistas no Final do Período: Quantidade de quotistas do "
            "fundo ou clube, existente no final do período de apuração, para cada CNPJ "
            "informado. Atenção: No caso de encerramento indicar a quantidade de "
            "quotistas do fundo ou clube apurada/levantada pelo Administrador para a "
            "data da Assembleia de quotistas para fins de deliberar o encerramento, ou "
            "na data do evento de encerramento."
        ),
    )

    QTE_QUOTA = fields.Integer(
        string="Quantidade de Quotas no Final do Período",
        required=True,
        help=(
            "Quantidade de Quotas no Final do Período: Quantidade de quotas do fundo ou"
            " clube, existente no final do período de apuração, para cada CNPJ "
            "informado. Atenção: No caso de encerramento indicar a quantidade de quotas"
            " do fundo ou clube apurada/levantada pelo Administrador para a data da "
            "Assembleia de quotistas para fins de deliberar o encerramento, ou na data "
            "do evento de encerramento."
        ),
    )

    PATR_FIN_PER = fields.Float(
        string="Patrimônio no Final do Período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Patrimônio no Final do Período: Patrimônio do fundo ou clube, existente no"
            " final do período de apuração, para cada CNPJ informado. Atenção: No caso "
            "de encerramento indicar o patrimônio do fundo ou clube apurado/levantado "
            "pelo Administrador para a data da Assembleia de quotistas para fins de "
            "deliberar o encerramento, ou na data do evento de encerramento."
        ),
    )

    DAT_ABERT = fields.Date(
        string="Data de Abertura",
        required=True,
        xsd_type="numeric_code",
        sped_length="8",
        help=(
            "Data de Abertura: Indicar a data de abertura do fundo ou clube de "
            "investimento, para cada CNPJ informado."
        ),
    )

    DAT_ENCER = fields.Date(
        string="Data de Encerramento",
        xsd_type="numeric_code",
        sped_length="8",
        help=(
            "Data de Encerramento: Indicar a data de encerramento do fundo ou clube de "
            "investimento, para cada CNPJ informado."
        ),
    )


class RegistroY640(models.AbstractModel):
    "Participações em Consórcios de Empresas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y640"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CNPJ = fields.Char(
        string="CNPJ",
        required=True,
        sped_length="14",
        help=(
            "CNPJ: CNPJ do consórcio no qual a pessoa jurídica participou no período a "
            "que se refere esta declaração."
        ),
    )

    COND_DECL = fields.Integer(
        string="Condição do Declarante no Consórcio",
        required=True,
        sped_length="1",
        help=(
            "Condição do Declarante no Consórcio: 1 – Líder 2 – Participante Atenção: "
            "No caso de alteração da condição de liderança do consórcio no decorrer do "
            "ano- calendário, considera-se líder a pessoa jurídica que se enquadrar "
            "nessa condição no último dia do período a que se refere esta declaração ou"
            " na data de extinção do consórcio."
        ),
    )

    VL_CONS = fields.Monetary(
        string="Receita do Consórcio",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receita do Consórcio: O líder indicará, neste campo, o valor do somatório "
            "das receitas auferidas por todos os consorciados no período considerado. "
            "Atenção: Este campo não deve ser preenchido para participante que não seja"
            " líder. Obrigatório se COND_DECL='1'. Senão, não deve ser preenchido."
        ),
    )

    CNPJ_LID = fields.Char(
        string="CNPJ da Empresa Líder do Consórcio", required=True, sped_length="14"
    )

    VL_DECL = fields.Monetary(
        string="Receita do Declarante no Consórcio",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receita do Declarante no Consórcio: Receita auferida pelo declarante no "
            "período a que se refere esta declaração, observado o disposto no caput do "
            "art. 3o da IN RFB no 1.199, de 2011."
        ),
    )


class RegistroY650(models.AbstractModel):
    "Participantes do Consórcio"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y650"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CNPJ = fields.Char(
        string="CNPJ da Empresa Participante do Consórcio",
        required=True,
        sped_length="14",
    )

    VL_PART = fields.Monetary(
        string="Receita do Participante do Consórcio",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )


class RegistroY660(models.AbstractModel):
    "Dados de Sucessoras"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y660"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CNPJ = fields.Char(
        string="CNPJ da Pessoa Jurídica Resultante do Evento",
        required=True,
        sped_length="14",
    )

    NOM_EMP = fields.Char(
        string="Nome Empresarial da Pessoa Jurídica Resultante",
        required=True,
        help="Nome Empresarial da Pessoa Jurídica Resultante do Evento.",
    )

    PERC_PAT_LIQ = fields.Float(
        string="Percentual do Patrimônio Líquido Destinado",
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual do Patrimônio Líquido Destinado: Percentual do patrimônio "
            "líquido da empresa sucedida destinado à pessoa jurídica resultante do "
            "evento."
        ),
    )


class RegistroY672(models.AbstractModel):
    "Outras Informações (Lucro Presumido ou Lucro Arbitrado)"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y672"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    VL_CAPITAL_ANT = fields.Monetary(
        string="Capital Registrado do Ano Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Capital Registrado do Ano Anterior: Valor do capital registrado, em órgão "
            "competente, no fim do “Ano Imediatamente Anterior”."
        ),
    )

    VL_CAPITAL = fields.Monetary(
        string="Capital Registrado",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Capital Registrado: Valor do capital registrado, em órgão competente, no "
            "fim do “Ano da Escrituração”."
        ),
    )

    VL_ESTOQUE_ANT = fields.Monetary(
        string="Estoques do Ano Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Estoques do Ano Anterior: Valor dos estoques no fim do “Ano Imediatamente "
            "Anterior”."
        ),
    )

    VL_ESTOQUES = fields.Monetary(
        string="Estoques",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Estoques: Valor dos estoques no fim do “Ano da Escrituração”.",
    )

    VL_CAIXA_ANT = fields.Monetary(
        string="Saldo de Caixa e Bancos do Ano Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Caixa e Bancos do Ano Anterior: Valor resultante da soma do saldo"
            " de caixa e dos saldos bancários registrados na escrituração comercial ou "
            "no livro Caixa, no fim do “Ano Imediatamente Anterior”."
        ),
    )

    VL_CAIXA = fields.Monetary(
        string="Saldo de Caixa e Bancos",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Caixa e Bancos: Valor resultante da soma do saldo de caixa e dos "
            "saldos bancários registrados na escrituração comercial ou no livro Caixa, "
            "no fim do “Ano da Escrituração”."
        ),
    )

    VL_APLIC_FIN_ANT = fields.Monetary(
        string="Saldo de Aplicações Financeiras do Ano Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Aplicações Financeiras do Ano Anterior: Saldo das aplicações "
            "financeiras, seja no mercado de renda fixa, seja no mercado de renda "
            "variável, no fim do “Ano Imediatamente Anterior”."
        ),
    )

    VL_APLIC_FIN = fields.Monetary(
        string="Saldo de Aplicações Financeiras",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Aplicações Financeiras: Saldo das aplicações financeiras, seja no"
            " mercado de renda fixa, seja no mercado de renda variável, no fim do “Ano "
            "da Escrituração”."
        ),
    )

    VL_CTA_REC_ANT = fields.Monetary(
        string="Contas a Receber do Ano Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Receber do Ano Anterior: Saldo das contas a receber no fim do "
            "“Ano Imediatamente Anterior”."
        ),
    )

    VL_CTA_REC = fields.Monetary(
        string="Contas a Receber",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Receber: Saldo das contas a receber no fim do “Ano da "
            "Escrituração”."
        ),
    )

    VL_CTA_PAG_ANT = fields.Monetary(
        string="Contas a Pagar do Ano Anterior",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Pagar do Ano Anterior: Saldo das contas a pagar no fim do “Ano "
            "Imediatamente Anterior”."
        ),
    )

    VL_CTA_PAG = fields.Monetary(
        string="Contas a Pagar",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Pagar: Saldo das contas a pagar no fim do “Ano da Escrituração”."
        ),
    )

    VL_COMPRA_MERC = fields.Monetary(
        string="Compras de Mercadorias no Ano-Calendário",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Compras de Mercadorias no Ano-Calendário: Valor das compras de mercadorias"
            " adquiridas no ano-calendário para revenda e as aquisições de materiais "
            "empregados nos produtos produzidos e serviços prestados."
        ),
    )

    VL_COMPRA_ATIVO = fields.Monetary(
        string="Compras de Elementos do Ativo no Ano-Calendário",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Compras de Elementos do Ativo no Ano-Calendário, Exceto os Classificáveis "
            "no Ativo Circulante e Ativo Não Circulante Realizável a Longo Prazo: Valor"
            " das aquisições de elementos do ativo no ano-calendário, exceto os "
            "classificáveis no ativo circulante e ativo não circulante realizável a "
            "longo prazo."
        ),
    )

    VL_RECEITAS = fields.Monetary(
        string="Receitas e Rendimentos Não Tributáveis",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receitas e Rendimentos Não Tributáveis ou Tributados Exclusivamente na "
            "Fonte; Informar, neste campo, o valor das seguintes receitas e "
            "rendimentos: a) as recuperações de créditos que não representem ingressos "
            "de novas receitas; b) a reversão de saldo de provisões anteriormente "
            "constituídas; c) os lucros e dividendos decorrentes de participações "
            "societárias avaliadas pelo custo de aquisição e a contrapartida do ajuste "
            "por aumento do valor de investimentos avaliados pelo método da "
            "equivalência patrimonial; d) as importâncias recebidas na forma do caput "
            "do art. 18 da Lei nº 11.196, de 2005, desde que utilizadas integralmente "
            "na realização da pesquisa ou desenvolvimento de inovação tecnológica; e e)"
            " as receitas decorrentes de valores em espécie pagos ou creditados pelos "
            "Estados, Distrito Federal e Municípios, relativos ao Imposto sobre "
            "Operações relativas à Circulação de Mercadorias e sobre Prestações de "
            "Serviços de Transporte Interestadual e Intermunicipal e de Comunicação - "
            "ICMS e ao Imposto sobre Serviços de Qualquer Natureza - ISS, no âmbito de "
            "programas de concessão de crédito voltados ao estímulo à solicitação de "
            "documento fiscal na aquisição de mercadorias e serviços. (Art. 4º, da Lei "
            "nº 11.945, de 4 de junho de 2009). f) de debêntures emitidas por SPE e de "
            "fundos de investimentos, tributados exclusivamente na fonte, à alíquota de"
            " 15% (quinze por cento), quando auferidos por pessoa jurídica tributada "
            "com base no presumido ou arbitrado (arts. 2º e 3º da Lei nº 12.431, de "
            "2011)."
        ),
    )

    TOT_ATIVO = fields.Float(
        string="Total do Ativo",
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Total do Ativo: Valor total do Ativo no fim do “Ano da Declaração”.",
    )

    IND_AVAL_ESTOQ = fields.Char(
        string="Método de Avaliação de Estoques",
        sped_length="1",
        help=(
            "Método de Avaliação de Estoques: 1 – Custo Médio Ponderado 2 – PEPS "
            "(Primeiro que entra, primeiro que sai) 3 – Arbitramento - art. 296, Inc. I"
            " e II, do RIR/99 4 – Custo Específico 5 – Valor Realizável Líquido 6 – "
            "Inventário Periódico 7 – Outros 8 – Não há (Exemplo: Empresas Prestadoras "
            "de Serviços)"
        ),
    )


class RegistroY680(models.AbstractModel):
    """Mês das Informações de Optantes pelo Refis (Lucro Real, Presumido e
    Arbitrado)"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y680"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    MES = fields.Char(
        string="Mês",
        required=True,
        sped_length="2",
        help=(
            "Mês: 01 – Janeiro 02 – Fevereiro 03 – Março 04 – Abril 05 – Maio 06 – "
            "Junho 07 – Julho 08 – Agosto 09 – Setembro 10 – Outubro 11 – Novembro 12 –"
            " Dezembro"
        ),
    )

    reg_Y681_ids = fields.One2many(
        "l10n_br_sped.ecf.y681",
        "reg_Y681_ids_RegistroY680_id",
        string="Y681 Informações de Optantes pelo Refis",
        sped_card="[0;12]",
        sped_required=True,
        help=(
            "Y681 Informações de Optantes pelo Refis (Lucro Real, Presumido e "
            "Arbitrado)"
        ),
    )


class RegistroY681(models.AbstractModel):
    """Informações de Optantes pelo Refis (Lucro Real, Presumido e
    Arbitrado)"""

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y681"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 3

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_Y681_ids_RegistroY680_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.y680",
        string="Mês das Informações de Optantes pelo Refis",
        required=True,
        ondelete="cascade",
        help=(
            "Mês das Informações de Optantes pelo Refis (Lucro Real, Presumido e "
            "Arbitrado)"
        ),
    )


class RegistroY682(models.AbstractModel):
    "Informações de Optantes pelo Refis - Imunes ou Isentas"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y682"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    MES = fields.Char(
        string="Mês",
        required=True,
        sped_length="2",
        help=(
            "Mês: 01 – Janeiro 02 – Fevereiro 03 – Março 04 – Abril 05 – Maio 06 – "
            "Junho 07 – Julho 08 – Agosto 09 – Setembro 10 – Outubro 11 – Novembro 12 –"
            " Dezembro"
        ),
    )

    ACRES_PATR = fields.Float(
        string="Acréscimo Patrimonial no Mês",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )


class RegistroY720(models.AbstractModel):
    "Informações de Períodos Anteriores"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y720"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    LUC_LIQ = fields.Float(
        string="O Lucro líquido antes da incidência",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "O Lucro líquido antes da incidência do imposto sobre a renda e da "
            "contribuição social sobre o lucro líquido do último período de apuração "
            "informado, sem a atualização pela taxa referencial do Selic, pois o "
            "sistema efetuará o cálculo automaticamente. bservação: De acordo com o "
            "parágrafo único do art. 6º da Instrução Normativa RFB no 2.004, de 18 de "
            "janeiro de 2022, na aplicação da multa de que trata o caput, quando não "
            "houver lucro líquido, antes do Imposto de Renda e da Contribuição Social, "
            "no período de apuração a que se refere a escrituração, deverá ser "
            "utilizado o último lucro líquido, antes do Imposto de Renda e da "
            "Contribuição Social informado, atualizado pela taxa referencial do Sistema"
            " Especial de Liquidação e de Custódia - Selic, até o termo final de "
            "encerramento do período a que se refere a escrituração."
        ),
    )

    DT_LUC_LIQ = fields.Date(
        string="Data do final do período de apuração",
        required=True,
        sped_length="8",
        help=("Data do final do período de apuração do lucro líquido informado acima."),
    )

    REC_BRUT_ANT = fields.Float(
        string="Receita bruta do período anterior",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    INTIMACAO = fields.Char(
        string="Houve termo de intimação pela RFB",
        required=True,
        sped_length="1",
        help=(
            "Houve termo de intimação pela RFB para a entrega desta ECF? S – Sim N – "
            "Não"
        ),
    )

    INT_ATRASO = fields.Char(
        string="A transmissão desta ECF está dentro",
        sped_length="1",
        help=(
            "A transmissão desta ECF está dentro do prazo previsto na intimação? S – "
            "Sim N – Não"
        ),
    )


class RegistroY750(models.AbstractModel):
    "Informações da ECF Calculadas pelo PGE"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y750"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    CODIGO = fields.Char(
        string="Código",
        required=True,
        sped_length="6",
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no item III "
            "deste registro e no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroY800(models.AbstractModel):
    "Outras Informações"

    _description = textwrap.dedent(f"    {__doc__}")
    _name = "l10n_br_sped.ecf.10.y800"
    _inherit = "l10n_br_sped.mixin.ecf"
    _sped_level = 2

    TIPO_DOC = fields.Char(
        string="Tipo do Documento: 001",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=(
            "Tipo do Documento: 001 - Memória de Cálculo - Incorporação 002 - Laudo de "
            "Avaliação a Valor Justo 003 – Outros"
        ),
    )

    DESCRICAO = fields.Char(string="Descrição do Conteúdo do Documento", required=True)

    HASH = fields.Char(
        string="Hash do arquivo incluído na escrituração",
        required=True,
        sped_length="41",
        help=(
            "Hash do arquivo incluído na escrituração. Este campo não deve ser "
            "informado no arquivo de importação pois será calculado pelo sistema (deve "
            "ser informado vazio)."
        ),
    )

    ARQ_RTF = fields.Char(
        string="Sequência de Bytes",
        required=True,
        sped_length="Não há limite",
        help=(
            "Sequência de Bytes: Sequência de bytes que representem um único arquivo no"
            " formato RTF (Rich Text Format)."
        ),
    )

    IND_FIM_RTF = fields.Char(
        string="Indicador de Fim do Arquivo RTF",
        required=True,
        sped_length="7",
        help="Indicador de Fim do Arquivo RTF. Texto fixo contendo “Y800FIM”.",
    )
