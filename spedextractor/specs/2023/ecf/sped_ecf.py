# Copyright 2022 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo

"""
STRUCTURE SPED ECF

<BLOCO 0>

  - 0010 PARÂMETROS DE TRIBUTAÇÃO

  - 0020 PARÂMETROS COMPLEMENTARES

  - 0021 PARÂMETROS DE IDENTIFICAÇÃO DOS TIPOS DE PROGRAMA

  - 0030 DADOS CADASTRAIS

  - 0035 IDENTIFICAÇÃO DAS SCP

  - 0930 IDENTIFICAÇÃO DOS SIGNATÁRIOS DA ECF

<BLOCO E>

  - E010 SALDOS FINAIS RECUPERADOS DA ECF ANTERIOR
    ≡ E015 contas contábeis mapeadas

  - E020 SALDOS FINAIS DAS CONTAS DA PARTE B DO E

  - E030 IDENTIFICAÇÃO DO PERÍODO
    ≡ E155 detalhes dos saldos contábeis calculados com base nas ecd
    ≡ E355 Detalhes dos Saldos das Contas de Result...

<BLOCO J>

  - J050 PLANO DE CONTAS DO CONTRIBUINTE
    ≡ J051 plano de contas referencial
    ≡ J053 subcontas correlatas

  - J100 CENTRO DE CUSTOS

<BLOCO K>

  - K030 Identificação dos Períodos e Formas de A...
    ≡ K155 detalhes dos saldos contábeis
      ≡ K156 
    ≡ K355 Saldos Finais das Contas Contábeis de Re...
      ≡ K356 

  - K915 JUSTIFICATIVA PARA DIVERGÊNCIA NAS CONTAS PATRIMONIAIS

  - K935 JUSTIFICATIVA PARA DIVERGÊNCIA NAS CONTAS DE RESULTADO

<BLOCO L>

  - L030 Identificação dos Períodos e Formas de A...
    ≡ L100 balanço patrimonial
    ≡ L200 método de avaliação do estoque final
    ≡ L210 informativo da composição de custos
    ≡ L300 demonstração do resultado líquido no período fiscal

<BLOCO M>

  - M010 IDENTIFICAÇÃO DA CONTA NA PARTE B E

  - M030 Identificação do Período e Forma de Apur...
    ≡ M300 demonstração do lucro real
      ≡ M305 
      ≡ M310 
        ≡ M312 
      ≡ M315 
    ≡ M350 demonstração da base de cálculo da csll
      ≡ M355 
      ≡ M360 
        ≡ M362 
      ≡ M365 
    ≡ M410 lançamentos na conta da parte b do e
      ≡ M415 
    ≡ M500 controle de saldos das contas da parte b do e
    ≡ M510 controle de saldos das contas padrão da parte b do e

<BLOCO N>

  - N030 Identificação do Período e Forma de Apur...
    ≡ N500 Base de Cálculo do IRPJ Sobre o Lucro Re...
    ≡ N600 demonstração do lucro da exploração
    ≡ N610 cálculo da isenção e redução do imposto sobre lucro real
    ≡ N615 informações da base de cálculo de incentivos fiscais
    ≡ N620 apuração do irpj mensal por estimativa
    ≡ N630 apuração do irpj com base no lucro real
    ≡ N650 Base de Cálculo da CSLL Após Compensaçõe...
    ≡ N660 apuração da csll mensal por estimativa
    ≡ N670 apuração da csll com base no lucro real

<BLOCO P>

  - P030 Identificação dos Períodos e Forma de Ap...
    ≡ P100 balanço patrimonial
    ≡ P130 demonstração das receitas incentivadas do lucro presumido
    ≡ P150 demonstração do resultado
    ≡ P200 apuração da base de cálculo do lucro presumido
    ≡ P230 cálculo da isenção e redução do lucro presumido
    ≡ P300 cálculo do irpj com base no lucro presumido
    ≡ P400 Apuração da Base de Cálculo da CSLL com ...
    ≡ P500 cálculo da csll com base no lucro líquido

<BLOCO Q>

  - Q100 DEMONSTRATIVO DO LIVRO CAIXA

<BLOCO T>

  - T030 Identificação dos Períodos e Forma de Ap...
    ≡ T120 Apuração da Base de Cálculo do IRPJ com ...
    ≡ T150 cálculo do imposto de renda com base no lucro arbitrado
    ≡ T170 Apuração da Base de Cálculo da CSLL com ...
    ≡ T181 cálculo da csll com base no lucro arbitrado

<BLOCO U>

  - U030 Identificação dos Períodos e Formas de A...
    ≡ U100 balanço patrimonial
    ≡ U150 demonstração do resultado
    ≡ U180 cálculo do irpj das empresas imunes ou isentas
    ≡ U182 cálculo da csll das empresas imunes ou isentas

<BLOCO V>

  - V010 DEREX – INSTITUIÇÃO
    ≡ V020 derex
    ≡ V030 derex - período – mês
      ≡ V100 

<BLOCO W>

  - W100 Informações Sobre o Grupo Multinacional ...
    ≡ W200 declaração país a país
      ≡ W250 

  - W300 OBSERVAÇÕES ADICIONAIS

<BLOCO X>

  - X280 ATIVIDADES INCENTIVADAS

  - X291 OPERAÇÕES COM O EXTERIOR

  - X292 OPERAÇÕES COM O EXTERIOR

  - X300 OPERAÇÕES COM O EXTERIOR
    ≡ X305 tipos de ajustes do preço parâmetro da exportação
    ≡ X310 operações com o exterior

  - X320 OPERAÇÕES COM O EXTERIOR
    ≡ X325 tipos de ajustes do preço parâmetro da importação
    ≡ X330 operações com o exterior

  - X340 IDENTIFICAÇÃO DA PARTICIPAÇÃO NO EXTERIOR
    ≡ X350 participações no exterior
    ≡ X351 Demonstrativo de Resultados e de Imposto...
    ≡ X352 Demonstrativo de Resultados no Exterior ...
    ≡ X353 demonstrativo de consolidação
    ≡ X354 demonstrativo de prejuízos acumulados
    ≡ X355 demonstrativo de rendas ativas e passivas
    ≡ X356 demonstrativo de estrutura societária
    ≡ X357 investidoras diretas

  - X390 ORIGEM E APLICAÇÃO DE RECURSOS

  - X400 Comércio Eletrônico e Tecnologia da Info...

  - X410 COMÉRCIO ELETRÔNICO – INFORMAÇÃO DE HOMEPAGE/SERVIDOR

  - X420 Royalties Recebidos ou Pagos a Beneficiá...

  - X430 RENDIMENTOS RELATIVOS A SERVIÇOS

  - X450 PAGAMENTOS OU REMESSAS RELATIVOS A SERVIÇOS

  - X460 INOVAÇÃO TECNOLÓGICA E DESENVOLVIMENTO TECNOLÓGICO

  - X470 CAPACITAÇÃO DE INFORMÁTICA E INCLUSÃO DIGITAL

  - X480 REPES

  - X490 POLO INDUSTRIAL DE MANAUS E AMAZÔNIA OCIDENTAL

  - X500 ZONAS DE PROCESSAMENTO DE EXPORTAÇÃO

  - X510 ÁREAS DE LIVRE COMÉRCIO (ALC)

<BLOCO Y>

  - Y520 PAGAMENTOS/RECEBIMENTOS DO EXTERIOR OU DE NÃO RESIDENTES

  - Y570 DEMONSTRATIVO DO IMPOSTO DE RENDA E CSLL RETIDOS NA FONTE

  - Y590 ATIVOS NO EXTERIOR

  - Y600 IDENTIFICAÇÃO E REMUNERAÇÃO DE SÓCIOS

  - Y612 IDENTIFICAÇÃO E RENDIMENTOS DE DIRIGENTES E CONSELHEIROS

  - Y620 Participações Avaliadas pelo Método de E...

  - Y630 FUNDOS/CLUBES DE INVESTIMENTO

  - Y640 PARTICIPAÇÕES EM CONSÓRCIOS DE EMPRESAS

  - Y650 PARTICIPANTES DO CONSÓRCIO

  - Y660 DADOS DE SUCESSORAS

  - Y672 OUTRAS INFORMAÇÕES

  - Y680 MÊS DAS INFORMAÇÕES DE OPTANTES PELO REFIS
    ≡ Y681 informações de optantes pelo refis

  - Y682 INFORMAÇÕES DE OPTANTES PELO REFIS

  - Y720 INFORMAÇÕES DE PERÍODOS ANTERIORES

  - Y800 OUTRAS INFORMAÇÕES

<BLOCO 9>

  - 9100 AVISOS DA ESCRITURAÇÃO

  - 9900 REGISTROS DO ARQUIVO

<BLOCO 9>
"""

import textwrap
from odoo import fields, models


class Registro0010(models.Model):
    "Parâmetros de Tributação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.0010"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro0010"

    HASH_ECF_ANTERIOR = fields.Char(
        string="ANTERIOR",
        help=(
            "Hashcode da ECF do período imediatamente anterior a ser "
            "recuperado. Campo preenchido automaticamente pelo sistema."
        ),
    )

    OPT_REFIS = fields.Char(
        string="Indicador de Optante pelo Refis: S",
        required=True,
        help=(
            "Indicador de Optante pelo Refis: S - Sim N – Não A pessoa "
            "jurídica deve assinalar este campo quando for optante pelo "
            "Programa de Recuperação Fiscal (Refis). Atenção: Este campo só "
            "deve ser assinalado pela pessoa jurídica optante pelo Programa de"
            " Recuperação Fiscal (Refis), instituído pela Lei nº 9.964, de 10 "
            "de abril de 2000, e que dele não tenha sido excluída. A pessoa "
            "jurídica que for apenas optante pelo Parcelamento Especial (Paes)"
            " de que trata a Lei nº 10.684, de 30 de maio de 2003, e outros "
            "reparcelamentos não deve assinalar este campo."
        ),
    )

    FORMA_TRIB = fields.Integer(
        string="Forma de Tributação: 1 – Lucro Real",
        required=True,
        help=(
            "Forma de Tributação: 1 – Lucro Real. 2 – Lucro Real/Arbitrado. 3 "
            "– Lucro Presumido/Real. 4 – Lucro Presumido/Real/Arbitrado. 5 – "
            "Lucro Presumido."
        ),
    )

    FORMA_APUR = fields.Char(
        string="APUR",
        help=(
            "Indicador do Período de Apuração do IRPJ e da CSLL: T – "
            "Trimestral A – Anual"
        ),
    )

    COD_QUALIF_PJ = fields.Char(
        string="PJ",
        help=(
            "Qualificação da Pessoa Jurídica: 01 – PJ em Geral 02 – PJ "
            "Componente do Sistema Financeiro 03 – Sociedades Seguradoras, de "
            "Capitalização ou Entidade Aberta de Previdência Complementar "
            "Atenção: Não preencher no caso de imunes e isentas (preencher o "
            "0010.TIP_ENT)."
        ),
    )

    FORMA_TRIB_PER = fields.Char(
        string="PER",
        help=(
            "Forma de Tributação no Período: Forma de tributação no período "
            "considerando para cada trimestre no formato XXXX onde X é igual "
            "a: 0 – ZERO – Não informado – trimestre não compreendido no "
            "período de apuração. R – Real P – Presumido A – Arbitrado E – "
            "Real Estimativa (somente utilizado no caso da observação abaixo)."
            " Observação: Caso 0010.FORMA_TRIB seja igual “3” (Presumido/Real)"
            " ou “4” (Presumido/Real/Arbitrado) e houver opção pelo REFIS "
            "(0010.OPT_REFIS), o período tributado pelo lucro real deve ter "
            "somente a forma de apuração trimestral (Caso em que deve ser "
            "utilizado “R” em 0010.FORMA_TRIB_PER) ou somente a forma de "
            "apuração correspondente à anual/estimativa (Caso em que deve ser "
            "utilizado “E” em 0010.FORMA_TRIB_PER) ."
        ),
    )

    MES_BAL_RED = fields.Char(
        string="RED",
        help=(
            "Forma de Apuração da Estimativa Mensal: Indicação da forma de "
            "apuração da estimativa mensal, quando 0010.FORMA_APUR = “A”, "
            "considerando o formato XXXXXXXXXXXX onde X é referente a um mês e"
            " é igual a: 0 – Fora do Período: Fora do período de apuração/ "
            "Forma de tributação diferente de “R” ou “E”. E – Receita Bruta: "
            "Estimativa com base na receita bruta e acréscimos. B – Balanço ou"
            " Balancete: Estimativa com base no balanço ou balancete de "
            "suspensão/redução. Os meses correspondentes a trimestres marcados"
            " em 0010.FORMA_TRIB_PER como diferente de “R” e “E” devem estar "
            "preenchidos com zero “0”. Os meses correspondentes a trimestres "
            "marcados em 0010.FORMA_TRIB_PER iguais a “R” ou “E” devem estar "
            "preenchidos com “E” ou “B”."
        ),
    )

    TIP_ESC_PRE = fields.Char(
        string="PRE",
        help=(
            "A Escrituração: C – Obrigada a entregar a ECD ou entrega "
            "facultativa (haverá recuperação dos dados). L – Não obrigada a "
            "entregar a ECD/Livro Caixa (Opção do Lucro Presumido - parágrafo "
            "único do art. 45 da Lei nº 8.981, de 1995). tenção: - Este campo "
            "deve ser preenchido pelas pessoas jurídicas tributadas pelo lucro"
            " presumido e as imunes ou isentas. - Caso a pessoa jurídica "
            "entregue a ECD facultativamente e não queira recuperar os dados "
            "da ECD, deve utilizar a opção “L”."
        ),
    )

    TIP_ENT = fields.Integer(
        string="ENT",
        help=(
            "C C C C C Tipo de Pessoa Jurídica Imune ou Isenta: 01 – "
            "Assistência Social 02 – Educacional 03 – Sindicato de "
            "Trabalhadores 04 – Associação Civil 05 – Cultural 06 – Entidade "
            "Fechada de Previdência Complementar 07 – Filantrópica 08 – "
            "Sindicato 09 – Recreativa 10 – Científica 11 – Associação de "
            "Poupança e Empréstimo 12 – Entidade Aberta de Previdência "
            "Complementar (Sem Fins Lucrativos) 13 – Fifa e Entidades "
            "Relacionadas 14 – CIO e Entidades Relacionadas 15 – Partidos "
            "Políticos 99 – Outras. Observação: Este campo é obrigatório para "
            "0010.FORMA_TRIB igual a “8” (Imune do IRPJ) ou “9” (Isenta do "
            "IRPJ). aso 0010.TIP_ENT = “01”, “02”, “03”, “04”, “05”, “07”, "
            "“08”, “09”, “10”, “13”, “14” ou “99”, os planos referenciais "
            "serão U100A e U150A. aso 0010.TIP_ENT = “11”, os planos "
            "referenciais serão U100B e U150B. aso 0010.TIP_ENT = “12”, os "
            "planos referenciais serão U100C e U150C. aso 0010.TIP_ENT = “06”,"
            " os planos referenciais serão U100D e U150D. aso 0010.TIP_ENT = "
            "“15”, os planos referenciais serão U100E e U150E."
        ),
    )

    FORMA_APUR_I = fields.Char(
        string="I",
        help=(
            "Apuração do IRPJ para Imunes ou Isentas: Existência ou não de "
            "atividade não abrangida pela imunidade ou isenção e tributada "
            "pelo IRPJ (para imunes ou isentas): A – Anual T – Trimestral D – "
            "Desobrigada"
        ),
    )

    APUR_CSLL = fields.Char(
        string="Apuração da CSLL para Imunes ou Isentas: A – Anual",
        help=(
            "Apuração da CSLL para Imunes ou Isentas: A – Anual, se optou pela"
            " apuração da CSLL sobre a base de cálculo estimada, facultada a "
            "opção pelo levantamento de balanço ou balancete de suspensão ou "
            "redução. T – Trimestral, no caso de ter adotado a apuração "
            "trimestral da CSLL. D – Desobrigada, na hipótese de pessoa "
            "jurídica imune ou isenta da CSLL. Atenção: 1) As entidades sem "
            "fins lucrativos de que trata o inciso I do art. 12 do Decreto nº "
            "3.048, de 6 de maio de 1999, que não se enquadram na imunidade e "
            "isenção da Lei nº 9.532, de 10 de dezembro de 1997, estão "
            "sujeitas à CSLL, devendo apurar a base de cálculo e a "
            "contribuição devida nos termos da legislação comercial. 2) As "
            "associações de poupança e empréstimo devem apurar a contribuição "
            "social sobre o lucro líquido. 3) São isentas da CSLL as entidades"
            " fechadas de previdência complementar, relativamente aos fatos "
            "geradores ocorridos a partir de 1º de janeiro de 2002. "
            "Observação: Este campo é obrigatório para 0010.FORMA_TRIB igual a"
            " “8” (Imune do IRPJ) ou “9” (Isenta do IRPJ)."
        ),
    )

    IND_REC_RECEITA = fields.Integer(
        string="RECEITA",
        help=(
            "Critério de reconhecimento de receitas para empresas tributadas "
            "pelo Lucro Presumido (Art. 215, § 9º, Instrução Normativa RFB nº "
            "1.700/2017): 1. Regime de caixa 2. Regime de competência"
        ),
    )


class Registro0020(models.Model):
    "Parâmetros Complementares"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.0020"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro0020"

    IND_ALIQ_CSLL = fields.Integer(
        string="CSLL",
        required=True,
        help=(
            "PJ Sujeita à Alíquota da CSLL de 9% ou 15% ou 20%: 1 – Alíquota "
            "de 9% 5 – Alíquota de 20%-25% 6 – Alíquota de 15%-20%"
        ),
    )

    IND_QTE_SCP = fields.Integer(
        string="Quantidade total de SCP do Sócio Ostensivo de SCP", required=True
    )

    IND_ADM_FUN_CLU = fields.Char(
        string="CLU",
        required=True,
        help=("Administradora de Fundos e Clubes de Investimento: S – Sim N – " "Não"),
    )

    IND_PART_CONS = fields.Char(
        string="CONS",
        required=True,
        help=(
            "Participações em Consórcios de Empresas: S – Sim N – Não A pessoa"
            " jurídica participante de consórcio constituído nos termos do "
            "disposto nos arts. 278 e 279 da Lei nº 6.404, de 15 de dezembro "
            "de 1976, deve assinalar este campo. Atenção: Somente deve ser "
            "assinalado este campo quando houver receita de pelo menos uma "
            "consorciada."
        ),
    )

    IND_OP_EXT = fields.Char(
        string="EXT",
        required=True,
        help=(
            "Operações com o Exterior: S – Sim N – Não A pessoa jurídica, "
            "inclusive instituição financeira ou companhia seguradora, "
            "conforme relacionadas no § 1º do art. 22 da Lei nº 8.212, de "
            "1991, e no inciso II do art. 14 da Lei nº 9.718, de 1998, que "
            "realizou exportação/importação de bens, serviços ou direitos ou "
            "auferiu receitas financeiras ou incorreu em despesas financeiras "
            "em operações efetuadas com pessoa física ou jurídica residente ou"
            " domiciliada no exterior, ainda que essas operações não tenham "
            "sido realizadas com pessoa vinculada ou com pessoa residente ou "
            "domiciliada em país ou dependência com tributação favorecida ou "
            "cuja legislação interna oponha sigilo relativo à composição "
            "societária de pessoas jurídicas ou a sua titularidade, deve "
            "assinalar este campo. Deve também assinalar este campo a pessoa "
            "jurídica, inclusive instituição financeira ou companhia "
            "seguradora, que realizar as operações acima referidas por "
            "intermédio de interposta pessoa."
        ),
    )

    IND_OP_VINC = fields.Char(
        string="VINC",
        required=True,
        help=(
            "Operações com Pessoa Vinculada/Interposta Pessoa / País com "
            "Tributação Favorecida. S – Sim N – Não Deve assinalar este campo,"
            " a pessoa jurídica, inclusive instituição financeira ou companhia"
            " seguradora, conforme relacionadas no § 1º do art. 22 da Lei nº "
            "8.212, de 1991, e no inciso II do art. 14 da Lei nº 9.718, de "
            "1998, que realizou exportação/importação de bens, serviços ou "
            "direitos ou auferiu receitas financeiras ou incorreu em despesas "
            "financeiras em operações efetuadas com pessoa física ou jurídica "
            "residente ou domiciliada no exterior, considerada pela legislação"
            " brasileira: a) pessoa vinculada; b) pessoa residente ou "
            "domiciliada em países com tributação favorecida ou cuja "
            "legislação interna oponha sigilo relativo à composição societária"
            " de pessoas jurídicas ou a sua titularidade; e c) a partir de 1º "
            "de janeiro de 2009, pessoa residente ou domiciliada no exterior, "
            "que goze, nos termos da legislação, de regime fiscal privilegiado"
            " (Art. 24-A da Lei nº 9.430, de 1996, instituído pela Lei nº "
            "11.727, de 2008). Deve também assinalar este campo a pessoa "
            "jurídica, inclusive instituição financeira ou companhia "
            "seguradora, que realizar as operações acima referidas por "
            "intermédio de interposta pessoa."
        ),
    )

    IND_PJ_ENQUAD = fields.Char(
        string="ENQUAD",
        required=True,
        help=(
            "PJ Enquadrada nos artigos 48 ou 49 da Instrução Normativa RFB nº "
            "1.312/2012: S – Sim N – Não"
        ),
    )

    IND_PART_EXT = fields.Char(
        string="EXT (IND_PART_EXT)",
        required=True,
        help=(
            "Participações no Exterior: A pessoa jurídica deve assinalar este "
            "campo, caso tenha participações no exterior. S – Sim N – Não"
        ),
    )

    IND_ATIV_RURAL = fields.Char(
        string="RURAL",
        required=True,
        help=(
            "Atividade Rural: A pessoa jurídica deve assinalar este campo, "
            "caso explore atividade rural. S – Sim N – Não"
        ),
    )

    IND_LUC_EXP = fields.Char(
        string="EXP",
        required=True,
        help=(
            "Existência de Lucro da Exploração: S – Sim N – Não Este campo "
            "deve ser assinalado pelas pessoas jurídicas que adotam a forma de"
            " tributação pelo lucro real, inclusive se optantes pelo Refis, "
            "que gozem de benefícios fiscais calculados com base no lucro da "
            "exploração."
        ),
    )

    IND_RED_ISEN = fields.Char(
        string="ISEN",
        required=True,
        help=(
            "Isenção e Redução do Imposto para Lucro Presumido: S – Sim N – "
            "Não A pessoa jurídica tributada pelo lucro presumido e optante "
            "pelo Refis deve assinalar este campo caso usufrua benefícios "
            "fiscais relativos a isenção ou redução do imposto de renda."
        ),
    )

    IND_FIN = fields.Char(
        string="FIN",
        required=True,
        help=(
            "Indicativo da Existência de FINOR/FINAM: S – Sim N – Não Este "
            "campo deve ser assinalado pelas pessoas jurídicas ou grupos de "
            "empresas coligadas de que trata o art. 9º da Lei nº 8.167, de "
            "1991, alterado pela Medida Provisória nº 2.199-14, de 24 de "
            "agosto de 2001, titulares de empreendimento de setor da economia "
            "considerado, em ato do Poder Executivo, prioritário para o "
            "desenvolvimento regional, aprovado ou protocolizado até 2 de maio"
            " de 2001 nas áreas da Sudam e da Sudene ou do Grupo Executivo "
            "para Recuperação Econômica do Estado do Espírito Santo (Geres) "
            "(MP nº 2.199-14, de 2001, art. 4º, e MP nº 2.145, de 2 de maio de"
            " 2001, art. 50, XX, atuais MP nº 2.156-5, de 2001, art. 32, "
            "XVIII, e nº 2.157-5, de 2001, art. 32, IV)."
        ),
    )

    IND_PART_COLIG = fields.Char(
        string="COLIG",
        required=True,
        help=(
            "Participação Avaliada pelo Método de Equivalência Patrimonial: S "
            "– Sim N – Não A pessoa jurídica domiciliada no Brasil, que teve "
            "participações permanentes, no ano- calendário, em capital de "
            "pessoa jurídica domiciliada no Brasil ou no exterior, "
            "considerada, pela legislação brasileira, avaliada pelo método de "
            "equivalência patrimonial, deve assinalar este campo."
        ),
    )

    IND_REC_EXT = fields.Char(
        string="EXT (IND_REC_EXT)",
        required=True,
        help=(
            "Recebimentos do Exterior ou de Não Residentes: S – Sim N – Não "
            "Deve assinalar este campo, a pessoa jurídica que recebeu, durante"
            " o ano-calendário, de pessoas físicas ou jurídicas, residentes ou"
            " domiciliadas no exterior ou de não-residentes: - quaisquer "
            "valores mediante operações de câmbio de qualquer natureza; - "
            "quaisquer valores por intermédio de transferências internacionais"
            " em reais (TIR), ou seja, provenientes de conta bancária em reais"
            " (R$) titulada por não-residente; - valores iguais ou superiores "
            "a R$ 120.000,00 (cento e vinte mil reais), equivalentes a R$ "
            "10.000,00 por mês, por intermédio de cartões de crédito; - "
            "quaisquer valores por intermédio de depósitos em contas bancárias"
            " mantidas no exterior."
        ),
    )

    IND_ATIV_EXT = fields.Char(
        string="EXT (IND_ATIV_EXT)",
        required=True,
        help=(
            "Ativos no Exterior: S – Sim N – Não Preenchida por todas as "
            "pessoas jurídicas (Sim), salvo quando o valor contábil total dos "
            "ativos a declarar, convertido para Reais no final do período "
            "abrangido pela ECF, for inferior a R$ 100.000,00 (cem mil reais) "
            "(Não)."
        ),
    )

    IND_PGTO_EXT = fields.Char(
        string="EXT (IND_PGTO_EXT)",
        required=True,
        help=(
            "Pagamentos ao Exterior ou a Não Residentes: S – Sim N – Não Deve "
            "assinalar este campo, a pessoa jurídica que tiver pagado, "
            "creditado, entregado, empregado ou remetido, durante o ano-"
            "calendário, a pessoas físicas ou jurídicas, residentes ou "
            "domiciliadas no exterior ou a não-residentes: - quaisquer valores"
            " mediante operações de câmbio de qualquer natureza; - quaisquer "
            "valores por intermédio de transferências internacionais em reais "
            "(TIR), ou seja, pela utilização de reais (R$) para crédito de "
            "conta bancária titulada por não-residentes; - valores iguais ou "
            "superiores a R$ 120.000,00 (cento e vinte mil reais), "
            "equivalentes a R$ 10.000,00 por mês, por intermédio de cartões de"
            " crédito; - quaisquer valores mediante a utilização de recursos "
            "mantidos no exterior."
        ),
    )

    IND_E - COM_TI = fields.Char(
        string="TI",
        required=True,
        help=(
            "Comércio Eletrônico e Tecnologia da Informação: S – Sim N – Não A"
            " pessoa jurídica que efetuou durante o ano-calendário vendas de "
            "bens (tangíveis ou intangíveis) ou tiver prestado serviços, por "
            "meio da Internet, para pessoas físicas e jurídicas, residentes ou"
            " domiciliadas no Brasil ou no exterior, deve assinalar este "
            "campo. Ao assinalar este campo, são disponibilizados os registros"
            " X400 (Comércio Eletrônico e Tecnologia da Informação) e X410 "
            "(Comércio Eletrônico)."
        ),
    )

    IND_ROY_REC = fields.Char(
        string="REC",
        required=True,
        help=(
            "Royalties Recebidos do Brasil e do Exterior: S – Sim N – Não A "
            "pessoa jurídica que tiver recebido, durante o ano-calendário, de "
            "pessoas físicas ou jurídicas, residentes ou domiciliadas no "
            "Brasil ou no exterior, rendimentos a título de royalties "
            "relativos a: exploração econômica dos direitos patrimoniais do "
            "autor, de marcas, de patentes e de desenho industrial; exploração"
            " de know-how; exploração de franquias e exploração dos direitos "
            "relativos à propriedade intelectual referente a cultivares, deve "
            "preencher este campo com “Sim”."
        ),
    )

    IND_ROY_PAG = fields.Char(
        string="PAG",
        required=True,
        help=(
            "Royalties Pagos a Beneficiários do Brasil e do Exterior: S – Sim "
            "N – Não A pessoa jurídica que tiver efetuado pagamento ou "
            "remessa, durante o ano-calendário, a pessoas físicas ou "
            "jurídicas, residentes ou domiciliadas no Brasil ou no exterior, a"
            " título de royalties relativos a: exploração econômica dos "
            "direitos patrimoniais do autor, de marcas, de patentes e de "
            "desenho industrial; exploração de know-how; exploração de "
            "franquias e exploração dos direitos relativos à propriedade "
            "intelectual referente a cultivares, deve preencher este campo com"
            " “Sim”."
        ),
    )

    IND_REND_SERV = fields.Char(
        string="Rendimentos Relativos a Serviços",
        required=True,
        help=(
            "Rendimentos Relativos a Serviços, Juros e Dividendos Recebidos do"
            " Brasil e do Exterior: S – Sim N – Não A pessoa jurídica que "
            "tiver recebido, durante o ano-calendário, de pessoas físicas ou "
            "jurídicas, residentes ou domiciliadas no Brasil ou no exterior, "
            "rendimentos relativos a: serviços de assistência técnica, "
            "científica, administrativa e semelhantes que impliquem "
            "transferência de tecnologia; serviços técnicos e de assistência "
            "que não impliquem transferência de tecnologia; juros sobre "
            "capital próprio, bem como juros decorrentes de contratos de mútuo"
            " entre empresas ligadas e juros decorrentes de contratos de "
            "financiamento; dividendos decorrentes de participações em outras "
            "empresas, deve preencher este campo com “Sim”."
        ),
    )

    IND_PGTO_REM = fields.Char(
        string="Pagamentos ou Remessas a Título de Serviços",
        required=True,
        help=(
            "Pagamentos ou Remessas a Título de Serviços, Juros e Dividendos a"
            " Beneficiários do Brasil e do Exterior: S – Sim N – Não A pessoa "
            "jurídica que tiver pagado ou remetido, durante o ano-calendário, "
            "a pessoas físicas ou jurídicas, residentes ou domiciliadas no "
            "Brasil ou no exterior, valores relativos a: serviços de "
            "assistência técnica, científica, administrativa e semelhantes que"
            " impliquem transferência de tecnologia; serviços técnicos e de "
            "assistência que não impliquem transferência de tecnologia; juros "
            "sobre capital próprio, bem como juros decorrentes de contratos de"
            " mútuo entre empresas ligadas e juros decorrentes de contratos de"
            " financiamento; dividendos decorrentes de participações em outras"
            " empresas, deve preencher este campo com “Sim”."
        ),
    )

    IND_INOV_TEC = fields.Char(
        string="TEC",
        required=True,
        help=(
            "Inovação Tecnológica e Desenvolvimento Tecnológico: S – Sim N – "
            "Não A pessoa jurídica beneficiária de incentivos fiscais "
            "relativos às atividades de pesquisa tecnológica e desenvolvimento"
            " de inovação tecnológica de que tratam os arts. 17 a 26 da Lei nº"
            " 11.196, de 21 de novembro de 2005, ou a pessoa jurídica "
            "executora dos programas de desenvolvimento tecnológico industrial"
            " ou agropecuário (PDTI/PDTA) de que trata a Lei nº 8.661, de "
            "1993, aprovados até 31 de dezembro de 2005, que não tenha migrado"
            " para o regime estabelecido nos arts. 17 a 26 da Lei nº 11.196, "
            "de 2005, deve preencher este campo com “Sim”."
        ),
    )

    IND_CAP_INF = fields.Char(
        string="INF",
        required=True,
        help=(
            "Capacitação de Informática e Inclusão Digital: S – Sim N – Não A "
            "pessoa jurídica que tiver investido em atividades de pesquisa e "
            "desenvolvimento em tecnologia da informação no âmbito dos "
            "programas de capacitação e competitividade dos setores de "
            "informática e automação e tecnologias da informação de que trata "
            "a Lei nº 8.248, de 23 de outubro de 1991, a Lei nº 10.176, de 11 "
            "de janeiro de 2001, e a Lei nº 11.077, de 30 de dezembro de 2004,"
            " regulamentadas pelo Decreto nº 5.906, de 26 de setembro de 2006,"
            " ou tiver efetuado venda a varejo nos termos dos arts. 28 a 30 da"
            " Lei nº 11.196, de 2005, que dispõem sobre o programa de inclusão"
            " digital, deve preencher este campo com “Sim”."
        ),
    )

    IND_PJ_HAB = fields.Char(
        string="PJ Habilitada no Repes",
        required=True,
        help=(
            "PJ Habilitada no Repes, Recap, Padis, PATVD, Reidi, Repenec, "
            "Reicomp, Retaero, Recine, Resíduos Sólidos, Recopa, Copa do "
            "Mundo, Retid, REPNBL-Redes, Reif e Olimpíadas: S – Sim N – Não A "
            "pessoa jurídica habilitada no Regime Especial de Tributação para "
            "a Plataforma de Exportação de Serviços de Tecnologia da "
            "Informação (Repes) ou no Regime Especial de Aquisição de Bens de "
            "Capital para Empresas Exportadoras (Recap) instituídos pela Lei "
            "nº 11.196, de 2005, regulamentados pelos Decretos nº 5.712, de 2 "
            "de março de 2006, e nº 5.649, de 29 de dezembro de 2005, "
            "respectivamente, deve assinalar este campo. Também deve assinalar"
            " este campo a pessoa jurídica executora de projeto aprovado no "
            "âmbito do Programa de Apoio ao Desenvolvimento Tecnológico da "
            "Indústria de Semicondutores (Padis) ou do Programa de Apoio ao "
            "Desenvolvimento Tecnológico da Indústria de Equipamentos para TV "
            "Digital (PATVD), instituídos pela Lei nº 11.484, de 2007. Este "
            "campo deve também ser assinalado pela pessoa jurídica habilitada "
            "ou co-habilitada no Regime Especial de Incentivos e "
            "Desenvolvimento da Infraestrutura (Reidi), instituído pela Lei nº"
            " 11.488, de 15 de junho de 2007, e regulamentado pelo Decreto nº "
            "6.144, de 3 de julho de 2007, com alterações introduzidas pelo "
            "Decreto nº 6.167, de 24 de julho de 2007. Habilitada ou co-"
            "habilitada no Regime Especial de Incentivos para o "
            "Desenvolvimento da Infraestrutura da Indústria Petrolífera das "
            "Regiões Norte, Nordeste e Centro-Oeste (Repenec), instituído pela"
            " Lei nº 12.249, de 2010, regulamentado pelo Decreto nº 7.320, de "
            "28 de setembro de 2010. Habilitada no Regime Especial de "
            "Incentivo a Computadores para Uso Educacional (REICOMP), "
            "instituído pela Lei nº 12.715, de 17 de setembro de 2012. "
            "Habilitada no Regime Especial para a Indústria Aeronáutica "
            "Brasileira (Retaero), instituído pela Lei nº 12.249, de 2010."
        ),
    )

    IND_POLO_AM = fields.Char(
        string="AM",
        required=True,
        help=(
            "Pólo Industrial de Manaus e Amazônia Ocidental: S – Sim N – Não A"
            " pessoa jurídica que estiver localizada na área de atuação da "
            "Superintendência da Zona Franca de Manaus (Suframa) que seja "
            "beneficiária dos incentivos de que trata o Decreto-lei nº 288, de"
            " 28 de fevereiro de 1967, e alterações posteriores; a Lei nº "
            "8.387, de 30 de dezembro de 1991, e alterações posteriores; ou o "
            "Decreto-lei nº 356, de 15 de agosto de 1968, e alterações "
            "posteriores (Amazônia Ocidental), deve preencher este campo com "
            "“Sim”."
        ),
    )

    IND_ZON_EXP = fields.Char(
        string="EXP (IND_ZON_EXP)",
        required=True,
        help=(
            "Zonas de Processamento de Exportação: S – Sim N – Não A pessoa "
            "jurídica autorizada a operar em Zonas de Processamento de "
            "Exportação, voltadas para a produção de bens a serem "
            "comercializados no exterior, de acordo com o estabelecido pela "
            "Lei nº 11.508, de 20 de julho de 2007 e pela Lei nº 11.732, de 30"
            " de junho de 2008, deve preencher este campo com “Sim”."
        ),
    )

    IND_AREA_COM = fields.Char(
        string="COM",
        required=True,
        help=(
            "Áreas de Livre Comércio: S – Sim N – Não A pessoa jurídica "
            "autorizada a operar nas Áreas de Livre Comércio de Boa Vista, "
            "Bonfim, Tabatinga, Macapá e Santana, Brasiléia, Cruzeiro do Sul "
            "ou Guajará-Mirim, beneficiária dos incentivos de que tratam a Lei"
            " nº 8.256, de 25 de novembro de 1991, a Lei nº 11.732, de 30 de "
            "junho de 2008, a Lei nº 7.965, de 22 de dezembro de 1989, a Lei "
            "nº 8.387, de 30 de dezembro de 1991, o Decreto nº 517, de 8 de "
            "maio de 1992, a Lei nº 8.857, de 8 de março de 1994, e a Lei nº "
            "8.210, de 19 de julho de 1991, e alterações posteriores, deve "
            "preencher este campo com “Sim”."
        ),
    )

    IND_PAIS_A_PAIS = fields.Char(
        string="PAIS",
        required=True,
        help=(
            "Enditdade Integrante de Grupo Multinacional: A pessoa jurídica é "
            "entidade integrante de grupo multinacional, nos termos da "
            "Instrução Normativa RFB nº 1.681/2016? S - Sim N - Não"
        ),
    )

    IND_DEREX = fields.Char(
        string="DEREX",
        required=True,
        help=(
            "Declaração sobre utilização dos recursos em moeda estrangeira "
            "decorrentes do recebimento de exportações (DEREX) S – Sim N – Não"
        ),
    )


class Registro0021(models.Model):
    "Parâmetros de Identificação dos Tipos de Programa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.0021"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro0021"

    IND_REPES = fields.Char(
        string="REPES",
        help=(
            "Regime Especial de Tributação para a Plataforma de Exportação de "
            "Serviços de Tecnologia da Informação (Repes): S - Sim N – Não"
        ),
    )

    IND_RECAP = fields.Char(
        string="RECAP",
        help=(
            "Regime Especial de Aquisição de Bens de Capital para Empresas "
            "Exportadoras (Recap): S - Sim N – Não"
        ),
    )

    IND_PADIS = fields.Char(
        string="PADIS",
        help=(
            "Programa de Apoio ao Desenvolvimento Tecnológico da Indústria de "
            "Semicondutores (Padis): S - Sim N – Não"
        ),
    )

    IND_PATVD = fields.Char(
        string="PATVD",
        help=(
            "Programa de Apoio ao Desenvolvimento Tecnológico da Indústria de "
            "Equipamentos para TV Digital (PATVD): S - Sim N – Não"
        ),
    )

    IND_REIDI = fields.Char(
        string="REIDI",
        help=(
            "Regime Especial de Incentivos para o Desenvolvimento da "
            "Infraestrutura (Reidi): S - Sim N – Não"
        ),
    )

    IND_REPENEC = fields.Char(
        string="REPENEC",
        help=(
            "Regime Especial de Incentivos para o Desenvolvimento da "
            "Infraestrutura da Indústria Petrolífera das Regiões Norte, "
            "Nordeste e Centro-Oeste (Repenec): S - Sim N – Não"
        ),
    )

    IND_REICOMP = fields.Char(
        string="REICOMP",
        help=(
            "Regime Especial de Incentivo a Computadores para Uso Educacional "
            "(Reicomp): S - Sim N – Não"
        ),
    )

    IND_RETAERO = fields.Char(
        string="Regime Especial para a Indústria Aeronáutica Brasileira",
        help=(
            "Regime Especial para a Indústria Aeronáutica Brasileira "
            "(Retaero): S - Sim N – Não"
        ),
    )

    IND_RECINE = fields.Char(
        string="RECINE",
        help=(
            "Regime Especial de Tributação para Desenvolvimento da Atividade "
            "de Exibição Cinematográfica (Recine): S - Sim N – Não"
        ),
    )

    IND_RESIDUOS_SOLIDOS = fields.Char(
        string="SOLIDOS",
        help=(
            "Estabelecimentos industriais façam jus a crédito presumido do IPI"
            " na aquisição de resíduos sólidos, de que trata a Lei nº 12.375, "
            "de 30 de dezembro de 2010: S - Sim N – Não"
        ),
    )

    IND_RECOPA = fields.Char(
        string="Regime Especial de Tributação para construção",
        help=(
            "Regime Especial de Tributação para construção, ampliação, reforma"
            " ou modernização de estádios de futebol (Recopa): S - Sim N – Não"
        ),
    )

    IND_COPA_DO_MUNDO = fields.Char(
        string="Habilitada para fins de fruição dos benefícios fiscais",
        help=(
            "Habilitada para fins de fruição dos benefícios fiscais, não "
            "abrangidos na alínea anterior, relativos à realização, no Brasil,"
            " da Copa das Confederações FIFA 2013 e da Copa do Mundo FIFA "
            "2014, de que trata a Lei nº 12.350, de 2010, regulamentada pelo "
            "Decreto nº 7.578, e 11 de outubro de 2011: S - Sim N - Não"
        ),
    )

    IND_RETID = fields.Char(
        string="Regime Especial Tributário para a Indústria de Defesa",
        help=(
            "Regime Especial Tributário para a Indústria de Defesa (Retid): S "
            "- Sim N - Não"
        ),
    )

    IND_REPNBL_REDES = fields.Char(
        string="REDES",
        help=(
            "Regime Especial de Tributação do Programa Nacional de Banda Larga"
            " para Implantação de Redes de Telecomunicações (REPNBL-Redes): S "
            "- Sim N - Não"
        ),
    )

    IND_REIF = fields.Char(
        string="REIF",
        help=(
            "Regime Especial de Incentivo ao Desenvolvimento da Infraestrutura"
            " da Indústria de Fertilizantes (REIF): S - Sim N - Não"
        ),
    )

    IND_OLIMPIADAS = fields.Char(
        string="OLIMPIADAS",
        help=(
            "Habilitada para fins de fruição dos benefícios fiscais, relativos"
            " à realização, no Brasil, dos Jogos Olímpicos de 2016 e dos Jogos"
            " Paraolímpicos de 2016, de que trata a Lei nº 12.780, de 2013: S "
            "- Sim N - Não"
        ),
    )


class Registro0030(models.Model):
    "Dados Cadastrais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.0030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro0030"

    COD_NAT = fields.Integer(
        string="Código da natureza jurídica",
        required=True,
        help=(
            "Código da natureza jurídica, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_LOC"
            "AL$SPEDECF_NATUREZA_JURIDICA)."
        ),
    )

    CNAE_FISCAL = fields.Integer(
        string="Código da atividade econômica",
        required=True,
        help=(
            "Código da atividade econômica (CNAE-Fiscal), conforme tabela do "
            "Sped (Disponibilizada no programa da ECF no diretório Arquivos de"
            " Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_LOCAL$SPEDECF_CNAE). "
            "Atenção: Se houver mais de uma atividade, indicar a de maior "
            "faturamento."
        ),
    )

    ENDERECO = fields.Char(string="Endereço da pessoa jurídica", required=True)

    NUM = fields.Char(string="Número", required=True)

    COMPL = fields.Char(string="Complemento")

    BAIRRO = fields.Char(string="Bairro/Distrito", required=True)

    UF = fields.Char(
        string="UF",
        required=True,
        help=(
            "UF, conforme do tabela do Sped (Disponibilizada no programa da "
            "ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_GLOBAL$UF_SIG_NOM)."
        ),
    )

    COD_MUN = fields.Char(
        string="Código do Município",
        required=True,
        help=(
            "Código do Município, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas Sped"
            "/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_GLOBAL$SPEDCONTABIL_MUNICIP"
            "IOS)."
        ),
    )

    CEP = fields.Char(string="Código de Endereçamento Postal (CEP)", required=True)

    NUM_TEL = fields.Integer(string="DDD + Número do Telefone")

    EMAIL = fields.Char(string="Correio eletrônico", required=True)


class Registro0035(models.Model):
    "Identificação das SCP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.0035"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro0035"

    COD_SCP = fields.Char(
        string="CNPJ da SCP (Art",
        required=True,
        help=(
            "CNPJ da SCP (Art. 4º, XVII, da Instrução Normativa RFB nº 1.634, "
            "de 6 de maio de 2016)."
        ),
    )

    NOME_SCP = fields.Char(string="Descrição da SCP")


class Registro0930(models.Model):
    "Identificação dos Signatários da ECF"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.0930"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro0930"

    IDENT_NOM = fields.Char(string="Nome do Signatário", required=True)

    IDENT_CPF_CNPJ = fields.Integer(
        string="CNPJ",
        required=True,
        help=(
            "CPF/CNPJ: O tamanho do campo deve ser exatamente o informado na "
            "coluna “Tamanho”."
        ),
    )

    IDENT_QUALIF = fields.Char(
        string="Código de qualificação do assinante",
        required=True,
        help=(
            "Código de qualificação do assinante, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas/SPEDECF_LOC"
            "AL$SPEDECF_QUALIF_ASSINANTE)."
        ),
    )

    IND_CRC = fields.Char(
        string="CRC",
        help=(
            "Número de inscrição do contabilista no Conselho Regional de "
            "Contabilidade."
        ),
    )

    EMAIL = fields.Char(string="E-mail do signatário", required=True)

    FONE = fields.Char(string="DDD e telefone do signatário", required=True)


class RegistroE010(models.Model):
    "Saldos Finais Recuperados da ECF Anterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.E010"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroE010"

    COD_NAT = fields.Char(string="Natureza da Conta", required=True)

    COD_CTA_REF = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help="Código da Conta Referencial (Analíticas e Sintéticas).",
    )

    DESC_CTA_REF = fields.Char(string="Descrição da Conta Referencial", required=True)

    VAL_CTA_REF = fields.Char(string="Valor Total da Conta Referencial", required=True)

    IND_VAL_CTA_REF = fields.Char(
        string="REF",
        required=True,
        help=(
            "Indicador do Valor Total da Conta Referencial: C – Credor D – " "Devedor"
        ),
    )

    reg_E015_ids = fields.One2many(
        "l10n_br_sped.ecf.1.E015",
        "reg_E015_ids_RegistroE010_id",
        string="Contas Contábeis Mapeadas",
    )


class RegistroE015(models.Model):
    "Contas Contábeis Mapeadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.E015"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroE015"

    COD_CTA = fields.Char(
        string="Código da Conta Contábil Analítica",
        required=True,
        help="Código da Conta Contábil Analítica (K155).",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    DESC_CTA = fields.Char(string="Descrição da Conta", required=True)

    VAL_CTA = fields.Monetary(
        string="CTA",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo Final da Conta: Saldo final da conta do registro K156 do "
            "último período da ECF imediatamente anterior, referente a conta "
            "contábil e centro de custos identificados no registro K155 pai."
        ),
    )

    IND_VAL_CTA = fields.Char(
        string="Indicador do Saldo Final da Conta: C – Credor D – Devedor",
        required=True,
    )

    reg_E015_ids_RegistroE010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.E010",
        string="Saldos Finais Recuperados da ECF Anterior",
        required=True,
    )


class RegistroE020(models.Model):
    """Saldos Finais das Contas da Parte B do e-Lalur da ECF Imediatamente
    Anterior"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.E020"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroE020"

    COD_CTA_B = fields.Char(
        string="B",
        required=True,
        help=(
            "Código da Conta da Parte B: Código unívoco atribuído pela empresa"
            " à conta no e-Lalur."
        ),
    )

    DESC_CTA_LAL = fields.Char(string="Descrição da Conta")

    DT_AP_LAL = fields.Date(
        string="LAL",
        help=(
            "Data de Criação: Data final do período de apuração em que a conta"
            " foi criada."
        ),
    )

    DT_LIM_LAL = fields.Date(
        string="Data Limite para a Exclusão",
        help=(
            "Data Limite para a Exclusão, Adição ou Compensação do Valor "
            "Controlado, se houver."
        ),
    )

    TRIBUTO = fields.Char(
        string="TRIBUTO",
        help=(
            "Indicador de Tributo da Adição/Exclusão: I – Imposto de Renda "
            "Pessoa Jurídica C – Contribuição Social sobre o Lucro Líquido A –"
            " Ambos (IRPJ e CSLL)"
        ),
    )

    VL_SALDO_FIN = fields.Monetary(
        string="Saldo Final do Período Anterior",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SALDO_FIN = fields.Char(
        string="FIN",
        help=(
            "Indicador de Saldo Final do Período Anterior: D – Para prejuízos "
            "ou valores que reduzam o lucro real ou a base de cálculo da "
            "contribuição social em períodos subsequentes. C – Para valores "
            "que aumentam o lucro real ou a base de cálculo na contribuição "
            "social em períodos subsequentes."
        ),
    )

    COD_PB_RFB = fields.Char(string="Código da tabela padrão da Parte B", required=True)


class RegistroE030(models.Model):
    "Identificação do Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.E030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroE030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="APUR",
        required=True,
        help=(
            "I R S Período de Apuração [para 0010.FORMA_APUR = “A”]: A00 – "
            "Anual A01 – Rec. Bruta de janeiro /Balanço suspensão redução até "
            "janeiro A02 – Rec. Bruta de fevereiro /Balanço suspensão redução "
            "até fevereiro A03 – Rec. Bruta de março /Balanço suspensão "
            "redução até março A04 – Rec. Bruta de abril /Balanço suspensão "
            "redução até abril A05 – Rec. Bruta de maio /Balanço suspensão "
            "redução até maio A06 – Rec. Bruta de junho /Balanço suspensão "
            "redução até junho A07 – Rec. Bruta de julho /Balanço suspensão "
            "redução até julho A08 – Rec. Bruta de agosto /Balanço suspensão "
            "redução até agosto A09 – Rec. Bruta de setembro /Balanço "
            "suspensão redução até setembro A10 – Rec. Bruta de "
            "outubro/Balanço suspensão redução até outubro A11 – Rec. Bruta de"
            " novembro /Balanço suspensão redução até novembro A12 – Rec. "
            "Bruta de dezembro/Balanço suspensão redução até dezembro ndicador"
            " do período de referência [para 0010.FORMA_APUR = “T” OU "
            "(0010.FORMA_APUR = “A” E 0010.FORMA_TRIB = “2”)]: T01 – 1º "
            "Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – 4º "
            "Trimestre Regra: O período deve estar compreendido entre a data "
            "início e data fim da escrituração. egra: SE 0010.FORMA_APUR = “A”"
            " - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] "
            "como “B” E 0010.FORMA_APUR = “T” - Deve existir um registro "
            "[T01..T04] para cada trimestre marcado no "
            "0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_E155_ids = fields.One2many(
        "l10n_br_sped.ecf.1.E155",
        "reg_E155_ids_RegistroE030_id",
        string="Detalhes dos Saldos Contábeis Calculados com Base nas ECD",
    )

    reg_E355_ids = fields.One2many(
        "l10n_br_sped.ecf.1.E355",
        "reg_E355_ids_RegistroE030_id",
        string="ids",
        help=("Detalhes dos Saldos das Contas de Resultado Antes do Encerramento"),
    )


class RegistroE155(models.Model):
    "Detalhes dos Saldos Contábeis Calculados com Base nas ECD"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.E155"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroE155"

    COD_CTA = fields.Char(string="Código da Conta Analítica", required=True)

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_INI = fields.Monetary(
        string="Valor do Saldo Inicial do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_INI = fields.Char(
        string="INI",
        required=True,
        help=("Indicador da Situação do Saldo Inicial: D – Devedor C – Credor"),
    )

    VL_DEB = fields.Monetary(
        string="Valor Total dos Débitos no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor Total dos Créditos no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_E155_ids_RegistroE030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.E030",
        string="Identificação do Período",
        required=True,
    )


class RegistroE355(models.Model):
    "Detalhes dos Saldos das Contas de Resultado Antes do Encerramento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.E355"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroE355"

    COD_CTA = fields.Char(
        string="Código da Conta Analítica de Resultado", required=True
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final Antes do Lançamento de Encerramento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final: D – Devedor",
        required=True,
        help=("Indicador da Situação do Saldo Final: D – Devedor. C – Credor."),
    )

    reg_E355_ids_RegistroE030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.E030",
        string="Identificação do Período",
        required=True,
    )


class RegistroJ050(models.Model):
    "Plano de Contas do Contribuinte"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.J050"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroJ050"

    DT_ALT = fields.Date(
        string="Data de Atualização",
        required=True,
        help="Data de Atualização (inclusão/ alteração).",
    )

    COD_NAT = fields.Char(
        string="NAT",
        required=True,
        help=(
            "Código da Natureza da Conta Analítica ou Sintética: 01 – Contas "
            "do Ativo 02 – Contas do Passivo 03 – Contas do Patrimônio Líquido"
            " 04 – Contas de Resultado 05 – Contas de Compensação 09 – Outras"
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do Tipo de Conta: S",
        required=True,
        help=(
            "Indicador do Tipo de Conta: S - Sintética (grupo de contas) A - "
            "Analítica (conta)"
        ),
    )

    NÍVEL = fields.Integer(
        string="NÍVEL",
        required=True,
        help=(
            "Nível da Conta Analítica/Sintética: Número crescente a partir da "
            "conta de menor detalhamento. Deve ser acrescido de “1” a cada "
            "mudança de nível. Exemplo: Nível 1 = Ativo Nível 2 = Ativo "
            "Circulante Nível 3 = Disponível Nível 4 = Caixa Geral Nível 5 = "
            "Caixa"
        ),
    )

    COD_CTA = fields.Char(string="Código da Conta Analítica/Sintética", required=True)

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    CTA = fields.Char(string="Nome da Conta Analítica", required=True)

    reg_J051_ids = fields.One2many(
        "l10n_br_sped.ecf.1.J051",
        "reg_J051_ids_RegistroJ050_id",
        string="Plano de Contas Referencial",
    )

    reg_J053_ids = fields.One2many(
        "l10n_br_sped.ecf.1.J053",
        "reg_J053_ids_RegistroJ050_id",
        string="Subcontas Correlatas",
    )


class RegistroJ051(models.Model):
    "Plano de Contas Referencial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.J051"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroJ051"

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    COD_CTA_REF = fields.Char(
        string="REF",
        required=True,
        help=(
            "Código da Conta no Plano de Contas Referencial Definido em "
            "0010.COD_QUALIF_PJ, conforme tabela publicada no Sped."
        ),
    )

    reg_J051_ids_RegistroJ050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.J050",
        string="Plano de Contas do Contribuinte",
        required=True,
    )


class RegistroJ053(models.Model):
    "Subcontas Correlatas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.J053"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroJ053"

    COD_IDT = fields.Char(
        string="Código de Identificação do Grupo Formado por Conta",
        required=True,
        help=(
            "Código de Identificação do Grupo Formado por Conta-Subconta(s). "
            "(Criado pela pessoa jurídica)."
        ),
    )

    COD_CNT_CORR = fields.Char(
        string="Código da Subconta Correlata",
        required=True,
        help=(
            "Código da Subconta Correlata. (Deve estar no plano de contas e só"
            " pode estar relacionada a um único grupo)"
        ),
    )

    NAT_SUB_CNT = fields.Char(
        string="Natureza da Subconta Correlata",
        required=True,
        help=(
            "Natureza da Subconta Correlata. (Conforme tabela de natureza da "
            "subconta )"
        ),
    )

    reg_J053_ids_RegistroJ050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.J050",
        string="Plano de Contas do Contribuinte",
        required=True,
    )


class RegistroJ100(models.Model):
    "Centro de Custos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.J100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroJ100"

    DT_ALT = fields.Date(string="Data da Inclusão/Alteração", required=True)

    COD_CCUS = fields.Char(string="Código do Centro de Custos", required=True)

    CCUS = fields.Char(string="Nome do Centro de Custos", required=True)


class RegistroK030(models.Model):
    """Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no
    Ano-Calendário"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="I P Período de Apuração [para 0010.FORMA_APUR = “A” ou",
        required=True,
        help=(
            "I P Período de Apuração [para 0010.FORMA_APUR = “A” ou "
            "(0010.FORMA_APUR_I = “A” OU 0010.APUR_CSLL = “A” E "
            "0010.TIP_ESC_PRE = “C”)]: A00 – Anual A01 – Rec. Bruta de janeiro"
            " /Balanço suspensão redução até janeiro A02 – Rec. Bruta de "
            "fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. "
            "Bruta de abril /Balanço suspensão redução até abril A05 – Rec. "
            "Bruta de maio /Balanço suspensão redução até maio A06 – Rec. "
            "Bruta de junho /Balanço suspensão redução até junho A07 – Rec. "
            "Bruta de julho /Balanço suspensão redução até julho A08 – Rec. "
            "Bruta de agosto /Balanço suspensão redução até agosto A09 – Rec. "
            "Bruta de setembro /Balanço suspensão redução até setembro A10 – "
            "Rec. Bruta de outubro/Balanço suspensão redução até outubro A11 –"
            " Rec. Bruta de novembro /Balanço suspensão redução até novembro "
            "A12 – Rec. Bruta de dezembro/Balanço suspensão redução até "
            "dezembro ndicador do período de referência [para 0010.FORMA_APUR "
            "= “T” OU (0010.FORMA_APUR = “A” E 0010.FORMA_TRIB = “2”) ou "
            "(0010.FORMA_APUR_I = “T” OU 0010.APUR_CSLL = “T” E "
            "0010.TIP_ESC_PRE = “C”)]: T01 – 1º Trimestre T02 – 2º Trimestre "
            "T03 – 3º Trimestre T04 – 4º Trimestre Regra: O período deve estar"
            " compreendido entre a data início e data fim da escrituração. "
            "eríodo de Apuração [para 0010.FORMA_APUR_I = “D” OU "
            "0010.APUR_CSLL = “D” E 0010.TIP_ESC_PRE = “C”)]: A00 – Anual"
        ),
    )

    reg_K155_ids = fields.One2many(
        "l10n_br_sped.ecf.1.K155",
        "reg_K155_ids_RegistroK030_id",
        string="Detalhes dos Saldos Contábeis",
        help=(
            "Detalhes dos Saldos Contábeis (Depois do Encerramento do "
            "Resultado do Período)"
        ),
    )

    reg_K355_ids = fields.One2many(
        "l10n_br_sped.ecf.1.K355",
        "reg_K355_ids_RegistroK030_id",
        string="ids",
        help=(
            "Saldos Finais das Contas Contábeis de Resultado Antes do " "Encerramento"
        ),
    )


class RegistroK155(models.Model):
    """Detalhes dos Saldos Contábeis (Depois do Encerramento do Resultado do
    Período)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K155"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK155"

    COD_CTA = fields.Char(string="Código da Conta Analítica Patrimonial", required=True)

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_INI = fields.Monetary(
        string="Valor do Saldo Inicial do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_INI = fields.Char(
        string="INI",
        required=True,
        help=("Indicador da Situação do Saldo Inicial: D – Devedor C – Credor"),
    )

    VL_DEB = fields.Monetary(
        string="Valor Total dos Débitos no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor Total dos Créditos no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_K155_ids_RegistroK030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.K030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL"
            " no Ano-Calendário"
        ),
    )

    reg_K156_ids = fields.One2many(
        "l10n_br_sped.ecf.1.K156",
        "reg_K156_ids_RegistroK155_id",
        string="Mapeamento Referencial do Saldo",
    )


class RegistroK156(models.Model):
    "Mapeamento Referencial do Saldo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K156"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK156"

    COD_CTA_REF = fields.Char(
        string="Código da Conta no Plano de Contas Referencial",
        required=True,
        help=(
            "Código da Conta no Plano de Contas Referencial, conforme tabela "
            "do Sped. (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SLD_INI = fields.Monetary(
        string="Valor do Saldo Inicial do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_INI = fields.Char(
        string="INI",
        required=True,
        help=("Indicador da Situação do Saldo Inicial: D – Devedor C – Credor"),
    )

    VL_DEB = fields.Monetary(
        string="Valor Total dos Débitos no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor Total dos Créditos no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_K156_ids_RegistroK155_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.K155",
        string="Detalhes dos Saldos Contábeis",
        required=True,
        help=(
            "Detalhes dos Saldos Contábeis (Depois do Encerramento do "
            "Resultado do Período)"
        ),
    )


class RegistroK355(models.Model):
    """Saldos Finais das Contas Contábeis de Resultado Antes do Encerramento"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K355"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK355"

    COD_CTA = fields.Char(
        string="Código da Conta Analítica de Resultado", required=True
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos")

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final Antes do Lançamento de Encerramento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="Indicador da Situação do Saldo Final: D – Devedor",
        required=True,
        help=("Indicador da Situação do Saldo Final: D – Devedor. C – Credor."),
    )

    reg_K355_ids_RegistroK030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.K030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL"
            " no Ano-Calendário"
        ),
    )

    reg_K356_ids = fields.One2many(
        "l10n_br_sped.ecf.1.K356",
        "reg_K356_ids_RegistroK355_id",
        string="ids",
        help=(
            "Mapeamento Referencial dos Saldos Finais das Contas de Resultado "
            "Antes do Encerramento"
        ),
    )


class RegistroK356(models.Model):
    """Mapeamento Referencial dos Saldos Finais das Contas de Resultado Antes
    do Encerramento"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K356"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK356"

    COD_CTA_REF = fields.Char(
        string="Código da Conta no Plano de Contas Referencial",
        required=True,
        help=(
            "Código da Conta no Plano de Contas Referencial, conforme tabela "
            "do Sped. (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do Saldo Final Antes do Lançamento de Encerramento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_SLD_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_K356_ids_RegistroK355_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.K355",
        string="id",
        required=True,
        help=(
            "Saldos Finais das Contas Contábeis de Resultado Antes do " "Encerramento"
        ),
    )


class RegistroK915(models.Model):
    "Justificativa para Divergência nas Contas Patrimoniais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K915"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK915"

    PER_APUR = fields.Char(
        string="Período de Apuração [para 0010.FORMA_APUR = “A” ou",
        required=True,
        help=(
            "Período de Apuração [para 0010.FORMA_APUR = “A” ou "
            "(0010.FORMA_APUR_I = “A” OU 0010.APUR_CSLL = “A” E "
            "0010.TIP_ESC_PRE = “C”)]: A00 – Anual A01 – Rec. Bruta de janeiro"
            " /Balanço suspensão redução até janeiro A02 – Rec. Bruta de "
            "fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. "
            "Bruta de abril /Balanço suspensão redução até abril A05 – Rec. "
            "Bruta de maio /Balanço suspensão redução até maio A06 – Rec. "
            "Bruta de junho /Balanço suspensão redução até junho A07 – Rec. "
            "Bruta de julho /Balanço suspensão redução até julho A08 – Rec. "
            "Bruta de agosto /Balanço suspensão redução até agosto A09 – Rec. "
            "Bruta de setembro /Balanço suspensão redução até setembro A10 – "
            "Rec. Bruta de outubro/Balanço suspensão redução até outubro A11 –"
            " Rec. Bruta de novembro /Balanço suspensão redução até novembro "
            "A12 – Rec. Bruta de dezembro/Balanço suspensão redução até "
            "dezembro"
        ),
    )

    COD_CTA = fields.Char(string="Código da conta contábil", required=True)

    COD_CCUS = fields.Char(string="Código do centro de custos")

    ID_REGRA = fields.Char(
        string="Identificação da regra que foi descumprida",
        required=True,
        help=(
            "Identificação da regra que foi descumprida. O sistema deverá "
            "preencher com as seguintes regras: "
            "REGRA_COMPATIBILIDADE_K155_E155: (Verifica se os valores "
            "utilizados no registro K155 são iguais aos valores calculados do "
            "registro E155.) ou REGRA_COMPATIBILIDADE_E155_K155: Verifica se "
            "os campos do registro E155 com algum valor maior que zero, são "
            "referenciados no registro K155 para o mesmo período de apuração."
        ),
    )

    VL_SLD_INI_ESP = fields.Monetary(
        string="ESP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo inicial recuperado da ECD para o período fiscal. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante"
            " a validação do arquivo da ECF."
        ),
    )

    IND_VL_SLD_INI_ESP = fields.Char(
        string="ESP (IND_VL_SLD_INI_ESP)",
        help=(
            "Indicador de situação do saldo inicial esperado: D – Devedor; e C"
            " – Credor. Este campo será calculado automaticamente pelo PGE da "
            "ECF durante a validação do arquivo da ECF."
        ),
    )

    VL_DEB_ESP = fields.Monetary(
        string="ESP (VL_DEB_ESP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de débitos recuperado da ECD para o período fiscal. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante"
            " a validação do arquivo da ECF."
        ),
    )

    VL_CRED_ESP = fields.Monetary(
        string="ESP (VL_CRED_ESP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de créditos recuperado da ECD para o período fiscal. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante"
            " a validação do arquivo da ECF."
        ),
    )

    VL_SLD_FIN_ESP = fields.Monetary(
        string="ESP (VL_SLD_FIN_ESP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final recuperado da ECD para o período fiscal. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante"
            " a validação do arquivo da ECF."
        ),
    )

    IND_VL_SLD_FIN_ESP = fields.Char(
        string="ESP (IND_VL_SLD_FIN_ESP)",
        help=(
            "Indicador de situação do saldo final esperado: D – Devedor; e C –"
            " Credor. Este campo será calculado automaticamente pelo PGE da "
            "ECF durante a validação do arquivo da ECF."
        ),
    )

    SLD_INI_PRE = fields.Monetary(
        string="Saldo inicial preenchido no registro K155",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SLD_INI_PRE = fields.Char(
        string="PRE",
        help=(
            "Indicador de situação do saldo inicial preenchido no registro "
            "K155: D – Devedor; e C – Credor."
        ),
    )

    VL_DEB_PRE = fields.Monetary(
        string="Valor total dos débitos preenchido no registro K155",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_PRE = fields.Monetary(
        string="Valor total dos créditos preenchido no registro K155",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    SLD_FIN_PRE = fields.Monetary(
        string="Saldo final preenchido no registro K155",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SLD_FIN_PRE = fields.Char(
        string="PRE (IND_SLD_FIN_PRE)",
        help=(
            "Indicador de situação do saldo final preenchido no registro K155:"
            " D – Devedor; e C – Credor."
        ),
    )

    JUSTIFICATIVA = fields.Char(
        string="JUSTIFICATIVA",
        required=True,
        help=(
            "Justificativa da divergência entre o(s) valor(es) calculado(s) "
            "pelo PGE da ECF e o(s) valor(es) preenchido(s)."
        ),
    )


class RegistroK935(models.Model):
    "Justificativa para Divergência nas Contas de Resultado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.K935"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroK935"

    PER_APUR = fields.Char(
        string="Período de Apuração [para 0010.FORMA_APUR = “A” ou",
        required=True,
        help=(
            "Período de Apuração [para 0010.FORMA_APUR = “A” ou "
            "(0010.FORMA_APUR_I = “A” OU 0010.APUR_CSLL = “A” E "
            "0010.TIP_ESC_PRE = “C”)]: A00 – Anual A01 – Rec. Bruta de janeiro"
            " /Balanço suspensão redução até janeiro A02 – Rec. Bruta de "
            "fevereiro /Balanço suspensão redução até fevereiro A03 – Rec. "
            "Bruta de março /Balanço suspensão redução até março A04 – Rec. "
            "Bruta de abril /Balanço suspensão redução até abril A05 – Rec. "
            "Bruta de maio /Balanço suspensão redução até maio A06 – Rec. "
            "Bruta de junho /Balanço suspensão redução até junho A07 – Rec. "
            "Bruta de julho /Balanço suspensão redução até julho A08 – Rec. "
            "Bruta de agosto /Balanço suspensão redução até agosto A09 – Rec. "
            "Bruta de setembro /Balanço suspensão redução até setembro A10 – "
            "Rec. Bruta de outubro/Balanço suspensão redução até outubro A11 –"
            " Rec. Bruta de novembro /Balanço suspensão redução até novembro "
            "A12 – Rec. Bruta de dezembro/Balanço suspensão redução até "
            "dezembro"
        ),
    )

    COD_CTA = fields.Char(string="Código da conta contábil", required=True)

    COD_CCUS = fields.Char(string="Código do centro de custos")

    ID_REGRA = fields.Char(
        string="R Identificação da regra que foi descumprida",
        required=True,
        help=(
            "R Identificação da regra que foi descumprida. O sistema deverá "
            "preencher com as seguintes regras: "
            "EGRA_COMPATIBILIDADE_K355_E355: Verifica se os valores utilizados"
            " no registro K355 são iguais aos valores calculados do registro "
            "E355. ou REGRA_COMPATIBILIDADE_E355_K355: Verifica se os campos "
            "do registro E355 com algum valor maior que zero, são "
            "referenciados no registro K355 para o mesmo período de apuração."
        ),
    )

    VL_SLD_FIN_ESP = fields.Monetary(
        string="ESP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final recuperado da ECD para o período fiscal. "
            "Este campo será calculado automaticamente pelo PGE da ECF durante"
            " a validação do arquivo da ECF."
        ),
    )

    IND_VL_SLD_FIN_ESP = fields.Char(
        string="ESP (IND_VL_SLD_FIN_ESP)",
        help=(
            "Indicador de situação do saldo final esperado: D – Devedor; e C –"
            " Credor. Este campo será calculado automaticamente pelo PGE da "
            "ECF durante a validação do arquivo da ECF."
        ),
    )

    SLD_FIN_PRE = fields.Monetary(
        string="Saldo final preenchido no registro K355",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SLD_FIN_PRE = fields.Char(
        string="PRE",
        help=(
            "Indicador de situação do saldo final preenchido no registro K355:"
            " D – Devedor; e C – Credor."
        ),
    )

    JUSTIFICATIVA = fields.Char(
        string="JUSTIFICATIVA",
        required=True,
        help=(
            "Justificativa da divergência entre o(s) valor(es) calculado(s) "
            "pelo PGE da ECF e o(s) valor(es) preenchido(s)."
        ),
    )


class RegistroL030(models.Model):
    """Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no
    Ano-Calendário"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.L030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroL030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="APUR",
        required=True,
        help=(
            "Período de apuração [para 0010.FORMA_APUR = “A”]: A00 – Receita "
            "Bruta/ Balanço de Suspensão e Redução Anual A01 – Balanço de "
            "Suspensão e Redução até Janeiro A02 – Balanço de Suspensão e "
            "Redução até Fevereiro A03 – Balanço de Suspensão e Redução até "
            "Março A04 – Balanço de Suspensão e Redução até Abril A05 – "
            "Balanço de Suspensão e Redução até Maio A06 – Balanço de "
            "Suspensão e Redução até Junho A07 – Balanço de Suspensão e "
            "Redução até Julho A08 – Balanço de Suspensão e Redução até Agosto"
            " A09 – Balanço de Suspensão e Redução até Setembro A10 – Balanço "
            "de Suspensão e Redução até Outubro A11 – Balanço de Suspensão e "
            "Redução até Novembro A12 – Balanço de Suspensão e Redução até "
            "Dezembro Indicador do período de referência [para 0010.FORMA_APUR"
            " = “T” OU (0010.FORMA_APUR = “A” E 0010.FORMA_TRIB = “2”)]: T01 –"
            " 1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – 4º "
            "Trimestre Regra: O período deve estar compreendido entre a data "
            "início e data fim da escrituração. Regra: SE 0010.FORMA_APUR = "
            "“A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] "
            "como “B” SE 0010.FORMA_APUR = “T” - Deve existir um registro "
            "[T01..T04] para cada trimestre marcado no "
            "0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_L100_ids = fields.One2many(
        "l10n_br_sped.ecf.1.L100",
        "reg_L100_ids_RegistroL030_id",
        string="Balanço Patrimonial",
    )

    reg_L200_ids = fields.One2many(
        "l10n_br_sped.ecf.1.L200",
        "reg_L200_ids_RegistroL030_id",
        string="Método de Avaliação do Estoque Final",
    )

    reg_L210_ids = fields.One2many(
        "l10n_br_sped.ecf.1.L210",
        "reg_L210_ids_RegistroL030_id",
        string="Informativo da Composição de Custos",
    )

    reg_L300_ids = fields.One2many(
        "l10n_br_sped.ecf.1.L300",
        "reg_L300_ids_RegistroL030_id",
        string="Demonstração do Resultado Líquido no Período Fiscal",
    )


class RegistroL100(models.Model):
    "Balanço Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.L100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroL100"

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme "
            "tabela dinâmica do Sped (Disponibilizada no item II deste "
            "registro e no programa da ECF, no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta: S – Sintética A – Analítica", required=True
    )

    NIVEL = fields.Integer(string="Nível da Conta")

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        help=(
            "Natureza da Conta, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    VAL_CTA_REF_INI = fields.Monetary(
        string="Saldo Inicial da Conta Referencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_CTA_REF_INI = fields.Char(
        string="INI",
        required=True,
        help=("Indicador da Situação do Saldo Inicial: D – Devedor C – Credor"),
    )

    VAL_CTA_REF_DEB = fields.Monetary(
        string="Valor Total dos Débitos: Somatório dos valores mapeados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CTA_REF_CRED = fields.Monetary(
        string="Valor Total dos Créditos: Somatório dos valores mapeados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CTA_REF_FIN = fields.Char(
        string="Saldo Final da Conta Referencial", required=True
    )

    IND_VAL_CTA_REF_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_L100_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.L030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL"
            " no Ano-Calendário"
        ),
    )


class RegistroL200(models.Model):
    "Método de Avaliação do Estoque Final"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.L200"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroL200"

    IND_AVAL_ESTOQ = fields.Char(
        string="ESTOQ",
        required=True,
        help=(
            "Método de Avaliação do Estoque Final: 1 – Custo Médio Ponderado 2"
            " – PEPS (Primeiro que entra, primeiro que sai) 3 – Arbitramento -"
            " art. 296, Inc. I e II, do RIR/99 4 – Custo Específico 5 – Valor "
            "Realizável Líquido 6 – Inventário Periódico 7 – Outros 8 – Não há"
            " (Exemplo: Empresas Prestadoras de Serviços)"
        ),
    )

    reg_L200_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.L030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL"
            " no Ano-Calendário"
        ),
    )


class RegistroL210(models.Model):
    "Informativo da Composição de Custos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.L210"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroL210"

    CODIGO = fields.Char(
        string="Código da Conta de Custos",
        required=True,
        help=(
            "Código da Conta de Custos (Analítica), conforme tabela dinâmica "
            "do Sped."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta de Custos")

    VALOR = fields.Char(string="Saldo Final da Conta de Custos Antes do Encerramento")

    reg_L210_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.L030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL"
            " no Ano-Calendário"
        ),
    )


class RegistroL300(models.Model):
    "Demonstração do Resultado Líquido no Período Fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.L300"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroL300"

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme "
            "tabela dinâmica do Sped (Disponibilizada no item III deste "
            "registro e no programa da ECF, no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta: S – Sintética A – Analítica", required=True
    )

    NIVEL = fields.Integer(string="Nível da Conta")

    COD_NAT = fields.Char(string="Natureza da Conta: 04 – Contas de Resultado")

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    VALOR = fields.Monetary(
        string="Saldo Final da Conta Referencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do Sinal do Saldo Final: C – Credor D – Devedor",
        required=True,
    )

    reg_L300_ids_RegistroL030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.L030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL"
            " no Ano-Calendário"
        ),
    )


class RegistroM010(models.Model):
    "Identificação da Conta na Parte B e-Lalur e do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M010"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM010"

    COD_CTA_B = fields.Char(
        string="Código Unívoco Atribuído pela Pessoa Jurídica à Conta no e",
        required=True,
        help=("Código Unívoco Atribuído pela Pessoa Jurídica à Conta no e-Lalur"),
    )

    DESC_CTA_LAL = fields.Char(string="Descrição da Conta", required=True)

    DT_AP_LAL = fields.Date(
        string="LAL",
        required=True,
        help=(
            "Data Final: Data final do período de apuração em que a conta foi "
            "criada."
        ),
    )

    COD_PB_RFB = fields.Char(
        string="O Código da tabela padrão da Parte B",
        required=True,
        help=(
            "O Código da tabela padrão da Parte B. Vide planilha PARTEB_PADRAO"
            " do arquivo "
            "“Tabelas_Dinamicas_ECF_Leiaute_8_AC2021_SIT_ESP_2022.xlsx” a "
            "partir do linkhttp://sped.rfb.gov.br/pasta/show/1644. s "
            "relacionamentos possíveis das contas padrão da Parte B do e-Lalur"
            " e do e-Lacs com as linhas da Parte A constam da planilha "
            "PARTEB_PARTEA do mesmo arquivo."
        ),
    )

    DT_LIM_LAL = fields.Date(
        string="Data Limite: Data limite para a exclusão",
        help=(
            "Data Limite: Data limite para a exclusão, adição ou compensação "
            "do valor controlado, se houver."
        ),
    )

    COD_TRIBUTO = fields.Char(
        string="TRIBUTO",
        required=True,
        help=(
            "Indicador do Tributo da Adição/Exclusão: I – Imposto de Renda "
            "Pessoa Jurídica C – Contribuição Social sobre o Lucro Líquido;"
        ),
    )

    VL_SALDO_INI = fields.Monetary(
        string="Saldo Inicial: Saldo no período inicial desta escrituração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo Inicial: Saldo no período inicial desta escrituração. Se "
            "M010.DT_AP_LAL for no período da escrituração, então o valor deve"
            " ser zero"
        ),
    )

    IND_VL_SALDO_INI = fields.Char(
        string="INI",
        required=True,
        help=(
            "Indicador do Saldo Inicial: D – Para prejuízos ou valores que "
            "reduzam o lucro real ou a base de cálculo da contribuição social "
            "em períodos subsequentes. C – Para valores que aumentem o lucro "
            "real ou a base de cálculo da contribuição social em períodos "
            "subsequentes."
        ),
    )

    CNPJ_SIT_ESP = fields.Integer(
        string="ESP",
        help=(
            "E CNPJ da outra pessoa jurídica relacionada com evento originário"
            " da conta. xemplos: 1- Identificar a investida no caso de valores"
            " (ganhos/perdas no novo AVJ) da participação societária anterior,"
            " nos caso de aquisições em estágios. 2- Identificar a investida "
            "no caso de amortização de mais-valia e menos-valia. 3- "
            "Identificar a investida no caso de impairment de goodwill, mais-"
            "valia e menos-valia. 4- Identificar a investida no caso de ganho "
            "por compra vantajosa. 5- Identificar a investida no caso registro"
            " do ágio gerado na aquisição de participação societária ocorrida "
            "até 31/12/2009. 6 - Identificar a investida no caso de ágio "
            "gerado pela sistemática de transição disciplinada no art. 65, Lei"
            " Nº 12.973/14. 7 - Identificar a pessoa jurídica antecessora no "
            "caso de conta incorporada devido a evento societário."
        ),
    )


class RegistroM030(models.Model):
    """Identificação do Período e Forma de Apuração do IRPJ e da CSLL das
    Empresas Tributadas pelo Lucro Real"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="APUR",
        required=True,
        help=(
            "I S Período de apuração [para 0010.FORMA_APUR = “A”]: A00 – "
            "Receita Bruta/ Balanço de Suspensão e Redução Anual A01 – Balanço"
            " de Suspensão e Redução até Janeiro A02 – Balanço de Suspensão e "
            "Redução até Fevereiro A03 – Balanço de Suspensão e Redução até "
            "Março A04 – Balanço de Suspensão e Redução até Abril A05 – "
            "Balanço de Suspensão e Redução até Maio A06 – Balanço de "
            "Suspensão e Redução até Junho A07 – Balanço de Suspensão e "
            "Redução até Julho A08 – Balanço de Suspensão e Redução até Agosto"
            " A09 – Balanço de Suspensão e Redução até Setembro A10 – Balanço "
            "de Suspensão e Redução até Outubro A11 – Balanço de Suspensão e "
            "Redução até Novembro A12 – Balanço de Suspensão e Redução até "
            "Dezembro ndicador do período de referência [para 0010.FORMA_APUR "
            "= “T” OU (0010.FORMA_APUR = “A” E 0010.FORMA_TRIB = “2”)]: T01 – "
            "1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – 4º "
            "Trimestre Regra: O período deve estar compreendido entre a data "
            "início e data fim da escrituração. Regra: SE 0010.FORMA_APUR = "
            "“A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] "
            "como “B” E 0010.FORMA_APUR = “T” - Deve existir um registro "
            "[T01..T04] para cada trimestre marcado no "
            "0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_M300_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M300",
        "reg_M300_ids_RegistroM030_id",
        string="Demonstração do Lucro Real",
    )

    reg_M350_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M350",
        "reg_M350_ids_RegistroM030_id",
        string="Demonstração da Base de Cálculo da CSLL",
    )

    reg_M410_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M410",
        "reg_M410_ids_RegistroM030_id",
        string="Lançamentos na Conta da Parte B do e",
        help=(
            "Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem "
            "Reflexo na Parte A"
        ),
    )

    reg_M500_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M500",
        "reg_M500_ids_RegistroM030_id",
        string="Controle de Saldos das Contas da Parte B do e",
        help=("Controle de Saldos das Contas da Parte B do e-Lalur e do e-Lacs"),
    )

    reg_M510_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M510",
        "reg_M510_ids_RegistroM030_id",
        string="Controle de Saldos das Contas Padrão da Parte B do e",
        help=(
            "Controle de Saldos das Contas Padrão da Parte B do e- Lalur e do " "e-Lacs"
        ),
    )


class RegistroM300(models.Model):
    "Demonstração do Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M300"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM300"

    CODIGO = fields.Char(
        string="Código do Lançamento no e-Lalur",
        required=True,
        help=(
            "Código do Lançamento no e-Lalur, conforme tabela dinâmica do Sped"
            " (Disponibilizada no item III deste registro e no programa da ECF"
            " no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição do Tipo de Lançamento no e",
        help=(
            "Descrição do Tipo de Lançamento no e-Lalur, conforme tabela "
            "dinâmica do Sped (Disponibilizada no item III deste registro e no"
            " programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    TIPO_LANCAMENTO = fields.Char(
        string="O Indicador do Tipo de Lançamento: A",
        help=(
            "O Indicador do Tipo de Lançamento: A- Adição E - Exclusão. P - "
            "Compensação de Prejuízo L - Lucro bservação: O tipo “R” (Rótulo) "
            "é para linhas de títulos, que aparecem na interface do programa. "
            "Portanto, não deve ser utilizado neste campo."
        ),
    )

    IND_RELACAO = fields.Integer(
        string="Indicador de Relacionamento do Lançamento da Parte A: 1",
        help=(
            "Indicador de Relacionamento do Lançamento da Parte A: 1 - Com "
            "Conta da Parte B 2 - Com Conta Contábil 3 – Com Conta da parte B "
            "e Conta Contábil 4 - Sem Relacionamento Observação: O valor do "
            "lançamento do tipo 3 pode considerar o saldo contas da parte B ou"
            " somatório dos saldos das contas da parte B com os saldos das "
            "contas contábeis. Para isso, o valor do lançamento correto na "
            "parte A deve ser preenchido pela empresa."
        ),
    )

    VALOR = fields.Char(string="Valor do Lançamento no e-Lalur")

    HIST_LAN_LAL = fields.Char(string="Histórico do Lançamento no e-Lalur")

    reg_M300_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )

    reg_M305_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M305",
        "reg_M305_ids_RegistroM300_id",
        string="ids",
        help=("Contas da Parte B Relacionadas ao Lançamento da Parte A do " "e-Lalur"),
    )

    reg_M310_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M310",
        "reg_M310_ids_RegistroM300_id",
        string="ids (reg_M310_ids)",
        help=("Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur"),
    )

    reg_M315_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M315",
        "reg_M315_ids_RegistroM300_id",
        string="ids (reg_M315_ids)",
        help=(
            "Identificação de Processos Judiciais e Administrativos Referentes"
            " ao Lançamento"
        ),
    )


class RegistroM305(models.Model):
    "Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lalur"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M305"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM305"

    COD_CTA_B = fields.Char(
        string="B",
        required=True,
        help=(
            "Código da Conta na Parte B: Código unívoco atribuído pelo "
            "contribuinte à conta no e-Lalur no registro M010."
        ),
    )

    VL_CTA = fields.Monetary(
        string="CTA",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "O Valor Total dos Lançamentos: Valor total dos lançamentos "
            "adicionados ou excluídos da conta. bservação: Valor deve ser "
            "menor ou igual ao saldo disponível do mesmo período de apuração "
            "da conta na parte B do registro M410."
        ),
    )

    IND_VL_CTA = fields.Char(
        string="CTA (IND_VL_CTA)",
        required=True,
        help=(
            "Indicador do Valor Total dos Lançamentos: D – Para prejuízos ou "
            "valores que reduzam o lucro real em períodos subsequentes. C – "
            "Para valores que aumentam o lucro real em períodos subsequentes."
        ),
    )

    reg_M305_ids_RegistroM300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M300",
        string="Demonstração do Lucro Real",
        required=True,
    )


class RegistroM310(models.Model):
    "Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M310"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM310"

    COD_CTA = fields.Char(
        string="Código da Conta Contábil",
        required=True,
        help=(
            "Código da Conta Contábil (Plano de Contas da Pessoa Jurídica): "
            "Código da conta ou subconta contábil onde está registrado o valor"
            " a ser adicionado ou excluído, quando possível sua identificação "
            "(deve existir no J050)."
        ),
    )

    COD_CCUS = fields.Char(
        string="Código do Centro de Custos",
        help="Código do Centro de Custos (deve existir no J100).",
    )

    VL_CTA = fields.Monetary(
        string="Valor da Conta Utilizado no Lançamento da Parte A",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_CTA = fields.Char(
        string="Indicador do Valor do Lançamento: D – Devedor",
        required=True,
        help="Indicador do Valor do Lançamento: D – Devedor. C – Credor.",
    )

    reg_M310_ids_RegistroM300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M300",
        string="Demonstração do Lucro Real",
        required=True,
    )

    reg_M312_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M312",
        "reg_M312_ids_RegistroM310_id",
        string="Números dos Lançamentos Relacionados à Conta Contábil",
    )


class RegistroM312(models.Model):
    "Números dos Lançamentos Relacionados à Conta Contábil"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M312"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM312"

    NUM_LCTO = fields.Char(
        string="Número do Lançamento Descrito na ECD",
        required=True,
        help=(
            "Número do Lançamento Descrito na ECD (Escrituração Contábil "
            "Digital) no campo 2 (NUM_LCTO) registro “I200 – Lançamento "
            "Contábil”."
        ),
    )

    reg_M312_ids_RegistroM310_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M310",
        string="id",
        required=True,
        help=("Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur"),
    )


class RegistroM315(models.Model):
    """Identificação de Processos Judiciais e Administrativos Referentes ao
    Lançamento"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M315"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM315"

    IND_PROC = fields.Char(
        string="Tipo do Processo: 1",
        required=True,
        help="Tipo do Processo: 1 - Judicial 2 – Administrativo",
    )

    NUM_PROC = fields.Char(string="Número do Processo", required=True)

    reg_M315_ids_RegistroM300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M300",
        string="Demonstração do Lucro Real",
        required=True,
    )


class RegistroM350(models.Model):
    "Demonstração da Base de Cálculo da CSLL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M350"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM350"

    CODIGO = fields.Char(
        string="Código do Lançamento no e-Lalur",
        required=True,
        help=(
            "Código do Lançamento no e-Lalur, conforme tabela dinâmica do Sped"
            " (Disponibilizada no item III deste registro e no programa da ECF"
            " no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição do Tipo de Lançamento no e",
        help=(
            "Descrição do Tipo de Lançamento no e-Lalur, conforme tabela "
            "dinâmica do Sped (Disponibilizada no item III deste registro e no"
            " programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    TIPO_LANCAMENTO = fields.Char(
        string="O Indicador do Tipo de Lançamento: A",
        help=(
            "O Indicador do Tipo de Lançamento: A- Adição E - Exclusão. P - "
            "Compensação de Prejuízo L - Lucro bservação: O tipo “R” (Rótulo) "
            "é para linhas de títulos, que aparecem na interface do programa. "
            "Portanto, não deve ser utilizado neste campo."
        ),
    )

    IND_RELACAO = fields.Integer(
        string="Indicador de Relacionamento do Lançamento da Parte A: 1",
        help=(
            "Indicador de Relacionamento do Lançamento da Parte A: 1 - Com "
            "Conta da Parte B 2 - Com Conta Contábil 3 – Com Conta da parte B "
            "e Conta Contábil 4 - Sem Relacionamento Observação: O valor do "
            "lançamento do tipo 3 pode considerar o saldo contas da parte B ou"
            " somatório dos saldos das contas da parte B com os saldos das "
            "contas contábeis. Para isso, o valor do lançamento correto na "
            "parte A deve ser preenchido pela empresa."
        ),
    )

    VALOR = fields.Char(string="Valor do Lançamento no e-Lalur")

    HIST_LAN_LAL = fields.Char(string="Histórico do Lançamento no e-Lalur")

    reg_M350_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )

    reg_M355_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M355",
        "reg_M355_ids_RegistroM350_id",
        string="ids",
        help=("Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lacs"),
    )

    reg_M360_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M360",
        "reg_M360_ids_RegistroM350_id",
        string="ids (reg_M360_ids)",
        help=("Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs"),
    )

    reg_M365_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M365",
        "reg_M365_ids_RegistroM350_id",
        string="ids (reg_M365_ids)",
        help=(
            "Identificação de Processos Judiciais e Administrativos Referentes"
            " ao Lançamento"
        ),
    )


class RegistroM355(models.Model):
    "Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M355"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM355"

    COD_CTA_B = fields.Char(
        string="B",
        required=True,
        help=(
            "Código da Conta na Parte B: Código unívoco atribuído pelo "
            "contribuinte à conta no e-Lacs no registro M010."
        ),
    )

    VL_CTA = fields.Monetary(
        string="CTA",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "O Valor Total dos Lançamentos: Valor total dos lançamentos "
            "adicionados ou excluídos da conta. bservação: Valor deve ser "
            "menor ou igual ao saldo disponível do mesmo período de apuração "
            "da conta na parte B do registro M410."
        ),
    )

    IND_VL_CTA = fields.Char(
        string="CTA (IND_VL_CTA)",
        required=True,
        help=(
            "Indicador do Valor Total dos Lançamentos: D – Para prejuízos ou "
            "valores que reduzam o lucro real em períodos subsequentes. C – "
            "Para valores que aumentam o lucro real em períodos subsequentes."
        ),
    )

    reg_M355_ids_RegistroM350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M350",
        string="Demonstração da Base de Cálculo da CSLL",
        required=True,
    )


class RegistroM360(models.Model):
    "Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M360"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM360"

    COD_CTA = fields.Char(
        string="Código da Conta Contábil",
        required=True,
        help=(
            "Código da Conta Contábil (Plano de Contas da Pessoa Jurídica): "
            "Código da conta ou subconta contábil onde está registrado o valor"
            " a ser adicionado ou excluído, quando possível sua identificação "
            "(deve existir no J050)."
        ),
    )

    COD_CCUS = fields.Char(
        string="Código do Centro de Custos",
        help="Código do Centro de Custos (deve existir no J100).",
    )

    VL_CTA = fields.Monetary(
        string="Valor da Conta Utilizado no Lançamento da Parte A",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VL_CTA = fields.Char(
        string="Indicador do Valor do Lançamento: D – Devedor",
        required=True,
        help="Indicador do Valor do Lançamento: D – Devedor. C – Credor.",
    )

    reg_M360_ids_RegistroM350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M350",
        string="Demonstração da Base de Cálculo da CSLL",
        required=True,
    )

    reg_M362_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M362",
        "reg_M362_ids_RegistroM360_id",
        string="Números dos Lançamentos Relacionados à Conta Contábil",
    )


class RegistroM362(models.Model):
    "Números dos Lançamentos Relacionados à Conta Contábil"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M362"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM362"

    NUM_LCTO = fields.Char(
        string="Número do Lançamento Descrito na ECD",
        required=True,
        help=(
            "Número do Lançamento Descrito na ECD (Escrituração Contábil "
            "Digital) no campo 2 (NUM_LCTO) registro “I200 – Lançamento "
            "Contábil”."
        ),
    )

    reg_M362_ids_RegistroM360_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M360",
        string="id",
        required=True,
        help=("Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs"),
    )


class RegistroM365(models.Model):
    """Identificação de Processos Judiciais e Administrativos Referentes ao
    Lançamento"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M365"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM365"

    IND_PROC = fields.Char(
        string="Tipo do Processo: 1",
        required=True,
        help="Tipo do Processo: 1 - Judicial 2 – Administrativo",
    )

    NUM_PROC = fields.Char(string="Número do Processo", required=True)

    reg_M365_ids_RegistroM350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M350",
        string="Demonstração da Base de Cálculo da CSLL",
        required=True,
    )


class RegistroM410(models.Model):
    """Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem Reflexo na
    Parte A"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M410"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM410"

    COD_CTA_B = fields.Char(
        string="Código da Conta do Lançamento",
        help="Código da Conta do Lançamento (conta da Parte B)",
    )

    COD_TRIBUTO = fields.Char(
        string="TRIBUTO",
        required=True,
        help=(
            "Código do Tributo: I – Imposto de Renda C – Contribuição Social "
            "sobre o Lucro Líquido"
        ),
    )

    VAL_LAN_LALB_PB = fields.Monetary(
        string="Valor do Lançamento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_LAN_LALB_PB = fields.Char(
        string="Indicador do Lançamento: CR – Crédito DB – Débito PF",
        required=True,
        help=(
            "Indicador do Lançamento: CR – Crédito DB – Débito PF - Prejuízo "
            "do exercício. BC - Base de cálculo negativa da CSLL. Observação: "
            "O indicador PF refere-se ao prejuízo apurado no exercício em "
            "curso."
        ),
    )

    COD_CTA_B_CTP = fields.Char(
        string="Código Unívoco da Contrapartida",
        help=(
            "Código Unívoco da Contrapartida (conta da Parte B), caso seja "
            "necessária a transferência de saldo de uma conta na parte B para "
            "outra conta na parte B. Não preencher quando: "
            "IND_VAL_LAN_LA_LB_PB for igual a “PF” ou “BC”."
        ),
    )

    HIST_LAN_LALB = fields.Char(string="Histórico do Lançamento", required=True)

    IND_LAN_ANT = fields.Char(
        string="ANT",
        required=True,
        help=(
            "Lançamento para Realização de Valores Cuja Tributação Tenha Sido "
            "Diferida: S – Sim N – Não Observação: Marca-se “Sim” neste campo "
            "quando o contribuinte, em período anterior, realizou valores "
            "controlados na parte B do e-Lalur/e-Lacs e deve reajustar os "
            "saldos das contas em início de período de apuração tributado pelo"
            " lucro real."
        ),
    )

    reg_M410_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )

    reg_M415_ids = fields.One2many(
        "l10n_br_sped.ecf.1.M415",
        "reg_M415_ids_RegistroM410_id",
        string="ids",
        help=(
            "Identificação de Processos Judiciais e Administrativos Referentes"
            " ao Lançamento"
        ),
    )


class RegistroM415(models.Model):
    """Identificação de Processos Judiciais e Administrativos Referentes ao
    Lançamento"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M415"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM415"

    IND_PROC = fields.Char(
        string="Tipo do Processo: 1",
        required=True,
        help="Tipo do Processo: 1 - Judicial 2 – Administrativo",
    )

    NUM_PROC = fields.Char(string="Número do Processo", required=True)

    reg_M415_ids_RegistroM410_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M410",
        string="Lançamentos na Conta da Parte B do e",
        required=True,
        help=(
            "Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem "
            "Reflexo na Parte A"
        ),
    )


class RegistroM500(models.Model):
    "Controle de Saldos das Contas da Parte B do e-Lalur e do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M500"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM500"

    COD_CTA_B = fields.Char(
        string="Código Unívoco Atribuído Pelo Contribuinte à Conta no e",
        required=True,
        help=(
            "Código Unívoco Atribuído Pelo Contribuinte à Conta no e-Lalur e "
            "no e-Lacs (deve existir no M010.COD_CTA_B)"
        ),
    )

    COD_TRIBUTO = fields.Char(
        string="TRIBUTO",
        required=True,
        help=(
            "Código do Tributo: I – Imposto de Renda C – Contribuição Social "
            "Sobre o Lucro Líquido"
        ),
    )

    SD_INI_LAL = fields.Monetary(
        string="Saldo Inicial da Conta no Período de Apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SD_INI_LAL = fields.Char(
        string="LAL",
        required=True,
        help=(
            "Indicador de Saldo Inicial: D – Para prejuízos ou valores que "
            "serão excluídos do lucro real ou da base de cálculo da "
            "contribuição social em períodos subsequentes. C – Para valores "
            "que serão adicionados ao lucro real ou à base de cálculo da "
            "contribuição social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTE_A = fields.Monetary(
        string="A",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B com Reflexo na Parte A no " "Período."
        ),
    )

    IND_VL_LCTO_PARTE_A = fields.Char(
        string="A (IND_VL_LCTO_PARTE_A)",
        required=True,
        help=(
            "Indicador do Somatório dos Lançamentos da Parte B com Reflexo na "
            "Parte A no período: C – Para prejuízos ou valores que serão "
            "excluídos do lucro real ou da base de cálculo da contribuição "
            "social em períodos subsequentes. D – Para valores que serão "
            "adicionados ao lucro real ou à base de cálculo da contribuição "
            "social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTEB = fields.Monetary(
        string="PARTEB",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B Sem Reflexo na Parte A no "
            "Período (entre contas da parte B)."
        ),
    )

    IND_VL_LCTO_PARTEB = fields.Char(
        string="PARTEB (IND_VL_LCTO_PARTEB)",
        required=True,
        help=(
            "Indicador Somatório dos Lançamentos da Parte B Sem Reflexo na "
            "Parte A no Período (entre contas da parte B): C – Para prejuízos "
            "ou valores que serão excluídos do lucro real ou da base de "
            "cálculo da contribuição social em períodos subsequentes. D – Para"
            " valores que serão adicionados ao lucro real ou à base de cálculo"
            " da contribuição social em períodos subsequentes."
        ),
    )

    SD_FIM_LAL = fields.Monetary(
        string="Saldo Final da Conta no Período de Apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SD_FIM_LAL = fields.Char(
        string="LAL (IND_SD_FIM_LAL)",
        required=True,
        help=(
            "Indicador de Saldo Final: D – Para prejuízos ou valores que serão"
            " excluídos do lucro real ou da base de cálculo da contribuição "
            "social em períodos subsequentes. C – Para valores que serão "
            "adicionados ao lucro real ou à base de cálculo da contribuição "
            "social em períodos subsequentes."
        ),
    )

    reg_M500_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroM510(models.Model):
    """Controle de Saldos das Contas Padrão da Parte B do e- Lalur e do
    e-Lacs"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.M510"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroM510"

    COD_PB_RFB = fields.Char(
        string="Código da Conta Padrão da Parte B",
        required=True,
        help=(
            "Código da Conta Padrão da Parte B (deve existir no " "M010.COD_PB_RFB)."
        ),
    )

    DESCRICAO_PB_RFB = fields.Char(
        string="Descrição da Conta Padrão da Parte B", required=True
    )

    COD_TRIBUTO = fields.Char(
        string="TRIBUTO",
        required=True,
        help=(
            "Código do Tributo: I – Imposto de Renda C – Contribuição Social "
            "Sobre o Lucro Líquido"
        ),
    )

    SD_INI_LAL = fields.Monetary(
        string="Saldo Inicial da Conta no Período de Apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SD_INI_LAL = fields.Char(
        string="LAL",
        required=True,
        help=(
            "Indicador de Saldo Inicial: D – Para prejuízos ou valores que "
            "serão excluídos do lucro real ou da base de cálculo da "
            "contribuição social em períodos subsequentes. C – Para valores "
            "que serão adicionados ao lucro real ou à base de cálculo da "
            "contribuição social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTE_A = fields.Monetary(
        string="A",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B com Reflexo na Parte A no " "Período."
        ),
    )

    IND_VL_LCTO_PARTE_A = fields.Char(
        string="A (IND_VL_LCTO_PARTE_A)",
        required=True,
        help=(
            "Indicador do Somatório dos Lançamentos da Parte B com Reflexo na "
            "Parte A no período: C – Para prejuízos ou valores que serão "
            "excluídos do lucro real ou da base de cálculo da contribuição "
            "social em períodos subsequentes. D – Para valores que serão "
            "adicionados ao lucro real ou à base de cálculo da contribuição "
            "social em períodos subsequentes."
        ),
    )

    VL_LCTO_PARTEB = fields.Monetary(
        string="PARTEB",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Somatório dos Lançamentos da Parte B Sem Reflexo na Parte A no "
            "Período (entre contas da parte B)."
        ),
    )

    IND_VL_LCTO_PARTEB = fields.Char(
        string="PARTEB (IND_VL_LCTO_PARTEB)",
        required=True,
        help=(
            "Indicador Somatório dos Lançamentos da Parte B Sem Reflexo na "
            "Parte A no Período (entre contas da parte B): C – Para prejuízos "
            "ou valores que serão excluídos do lucro real ou da base de "
            "cálculo da contribuição social em períodos subsequentes. D – Para"
            " valores que serão adicionados ao lucro real ou à base de cálculo"
            " da contribuição social em períodos subsequentes."
        ),
    )

    SD_FIM_LAL = fields.Monetary(
        string="Saldo Final da Conta no Período de Apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_SD_FIM_LAL = fields.Char(
        string="LAL (IND_SD_FIM_LAL)",
        required=True,
        help=(
            "Indicador de Saldo Final: D – Para prejuízos ou valores que serão"
            " excluídos do lucro real ou da base de cálculo da contribuição "
            "social em períodos subsequentes. C – Para valores que serão "
            "adicionados ao lucro real ou à base de cálculo da contribuição "
            "social em períodos subsequentes."
        ),
    )

    reg_M510_ids_RegistroM030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.M030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN030(models.Model):
    """Identificação do Período e Forma de Apuração do IRPJ e da CSLL das
    Empresas Tributadas pelo Lucro Real"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="APUR",
        required=True,
        help=(
            "I S Período de apuração [para 0010.FORMA_APUR = “A”]: A00 – "
            "Receita Bruta/ Balanço de Suspensão e Redução Anual A01 – Balanço"
            " de Suspensão e Redução até Janeiro A02 – Balanço de Suspensão e "
            "Redução até Fevereiro A03 – Balanço de Suspensão e Redução até "
            "Março A04 – Balanço de Suspensão e Redução até Abril A05 – "
            "Balanço de Suspensão e Redução até Maio A06 – Balanço de "
            "Suspensão e Redução até Junho A07 – Balanço de Suspensão e "
            "Redução até Julho A08 – Balanço de Suspensão e Redução até Agosto"
            " A09 – Balanço de Suspensão e Redução até Setembro A10 – Balanço "
            "de Suspensão e Redução até Outubro A11 – Balanço de Suspensão e "
            "Redução até Novembro A12 – Balanço de Suspensão e Redução até "
            "Dezembro ndicador do período de referência [para 0010.FORMA_APUR "
            "= “T” OU (0010.FORMA_APUR = “A” E 0010.FORMA_TRIB = “2”)]: T01 – "
            "1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – 4º "
            "Trimestre Regra: O período deve estar compreendido entre a data "
            "início e data fim da escrituração. Regra: SE 0010.FORMA_APUR = "
            "“A” - Deve existir um registro A00. - Deve existir um registro "
            "[A01..A012] para cada mês marcado no 0010.MES_BAL_RED [1..12] "
            "como “B” ou E. E 0010.FORMA_APUR = “T” - Deve existir um registro"
            " [T01..T04] para cada trimestre marcado no "
            "0010.FORMA_TRIB_PER[1..4] como “R”"
        ),
    )

    reg_N500_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N500",
        "reg_N500_ids_RegistroN030_id",
        string="ids",
        help=(
            "Base de Cálculo do IRPJ Sobre o Lucro Real Após as Compensações "
            "de Prejuízos"
        ),
    )

    reg_N600_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N600",
        "reg_N600_ids_RegistroN030_id",
        string="Demonstração do Lucro da Exploração",
    )

    reg_N610_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N610",
        "reg_N610_ids_RegistroN030_id",
        string="Cálculo da Isenção e Redução do Imposto sobre Lucro Real",
    )

    reg_N615_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N615",
        "reg_N615_ids_RegistroN030_id",
        string="Informações da Base de Cálculo de Incentivos Fiscais",
    )

    reg_N620_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N620",
        "reg_N620_ids_RegistroN030_id",
        string="Apuração do IRPJ Mensal por Estimativa",
    )

    reg_N630_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N630",
        "reg_N630_ids_RegistroN030_id",
        string="Apuração do IRPJ Com Base no Lucro Real",
    )

    reg_N650_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N650",
        "reg_N650_ids_RegistroN030_id",
        string="ids (reg_N650_ids)",
        help=(
            "Base de Cálculo da CSLL Após Compensações das Bases de Cálculo " "Negativa"
        ),
    )

    reg_N660_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N660",
        "reg_N660_ids_RegistroN030_id",
        string="Apuração da CSLL Mensal por Estimativa",
    )

    reg_N670_ids = fields.One2many(
        "l10n_br_sped.ecf.1.N670",
        "reg_N670_ids_RegistroN030_id",
        string="Apuração da CSLL Com Base no Lucro Real",
    )


class RegistroN500(models.Model):
    """Base de Cálculo do IRPJ Sobre o Lucro Real Após as Compensações de
    Prejuízos"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N500"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN500"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N500_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN600(models.Model):
    "Demonstração do Lucro da Exploração"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N600"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN600"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N600_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN610(models.Model):
    "Cálculo da Isenção e Redução do Imposto sobre Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N610"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN610"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N610_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN615(models.Model):
    "Informações da Base de Cálculo de Incentivos Fiscais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N615"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN615"

    BASE_CALC = fields.Monetary(
        string="CALC",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "B Base de Cálculo: Base de cálculo dos incentivos fiscais: Para "
            "fins de determinação da base de cálculo dos incentivos, deve-se "
            "observar a forma de apuração do imposto de renda da pessoa "
            "jurídica, as deduções permitidas. a) Regra Geral: O valor desta "
            "linha, quando a apuração do imposto de renda for com base no "
            "lucro real trimestral e no lucro real apurado em 31 de dezembro "
            "do ano-calendário (ajuste anual) será calculado pela seguinte "
            "fórmula: ASE_CALC = A - (B + C + D + E + F + G + H + I + J + L + "
            "M+ N + O + P), onde: A = Imposto de Renda devido à alíquota de "
            "15% (Linha N630/3) B = Atividades Culturais e Artísticas (Linha "
            "N630/6) (art. 18, e §§ 1º e 3º, e art. 25 e 26 da Lei nº 8.313, "
            "de 1991, com as alterações do art. 1º, da Lei nº 9.874, de 1999, "
            "do art. 53 da MP nº 2.228, de 2001) C = Operações de Aquisição de"
            " Vale-Cultura (Linha N630/7) (Lei nº 12.761/2012, art. 10) D = "
            "Programa de Alimentação ao Trabalhador (Linha N630/8) E = "
            "Desenvolvimento Tecnológico Industrial/Agropecuário (Linha "
            "N630/9) F = Atividade Audiovisual (Linha N630/10) G = Fundo dos "
            "Direitos da Criança e do Adolescente (Linha N630/11) H = Fundos "
            "Nacional, Estaduais ou Municipais do Idoso (Linha N630/12) (Lei "
            "nº 12.213, de 2010, art. 3º). I = Atividades de Caráter "
            "Desportivo (Linha N630/13) J = Programa Nacional de Apoio à "
            "Atenção Oncológica - PRONON (Linha N630/14) - (Lei nº "
            "12.715/2012, arts. 1º e 4º) L = Programa Nacional de Apoio à "
            "Atenção da Saúde da Pessoa com Deficiência - PRONAS/PCD (Linha "
            "N630/15) (Lei nº 12.715, de 2012, arts. 3º e 4º) M= Valor da "
            "Remuneração da Prorrogação da Licença-Maternidade (Linha N630/16)"
            " (Lei nº 11.770, de 2008, art. 5º) N = 3,33 x Redução por "
            "Reinvestimento (Linha N630/18) O = Imposto devido no Brasil à "
            "alíquota de 15% incidente sobre lucros, rendimentos e ganhos de "
            "capital oriundos do exterior (Linha N630/19) P = Imposto de renda"
            " sobre a diferença entre o Custo Orçado e o Custo Efetivo (Linha "
            "N630/27)"
        ),
    )

    PER_INCEN_FINOR = fields.Float(
        string="Percentual do Incentivo FINOR",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Percentual do Incentivo FINOR (até 6%).",
    )

    VL_LIQ_INCEN_FINOR = fields.Char(
        string="Valor Líquido do Incentivo FINOR", required=True
    )

    PER_INCEN_FINAM = fields.Float(
        string="Percentual do Incentivo FINAM",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Percentual do Incentivo FINAM (até 6%).",
    )

    VL_LIQ_INCEN_FINAM = fields.Char(
        string="Valor Líquido do Incentivo FINAM", required=True
    )

    VL_TOTAL = fields.Char(string="Total dos Incentivos", required=True)

    reg_N615_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN620(models.Model):
    "Apuração do IRPJ Mensal por Estimativa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N620"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN620"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N620_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN630(models.Model):
    "Apuração do IRPJ Com Base no Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N630"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN630"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N630_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN650(models.Model):
    """Base de Cálculo da CSLL Após Compensações das Bases de Cálculo
    Negativa"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N650"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN650"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N650_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN660(models.Model):
    "Apuração da CSLL Mensal por Estimativa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N660"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN660"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N660_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroN670(models.Model):
    "Apuração da CSLL Com Base no Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.N670"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroN670"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_N670_ids_RegistroN030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.N030",
        string="id",
        required=True,
        help=(
            "Identificação do Período e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Real"
        ),
    )


class RegistroP030(models.Model):
    """Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das
    Empresas Tributadas pelo Lucro Presumido"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="A00 – Anual",
        required=True,
        help=(
            "A00 – Anual (para registrar o Balanço Patrimonial anual e a DRE "
            "anual) T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre "
            "T04 – 4º Trimestre Regra: O período deve estar compreendido entre"
            " a data início e data fim da escrituração. SE 0010.FORMA_APUR = "
            "“T” - Deve existir um registro [T01..T04] para cada trimestre "
            "marcado no 0010.FORMA_TRIB_PER[1..4] como “P”"
        ),
    )

    reg_P100_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P100",
        "reg_P100_ids_RegistroP030_id",
        string="Balanço Patrimonial",
    )

    reg_P130_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P130",
        "reg_P130_ids_RegistroP030_id",
        string="Demonstração das Receitas Incentivadas do Lucro Presumido",
    )

    reg_P150_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P150",
        "reg_P150_ids_RegistroP030_id",
        string="Demonstração do Resultado",
    )

    reg_P200_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P200",
        "reg_P200_ids_RegistroP030_id",
        string="Apuração da Base de Cálculo do Lucro Presumido",
    )

    reg_P230_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P230",
        "reg_P230_ids_RegistroP030_id",
        string="Cálculo da Isenção e Redução do Lucro Presumido",
    )

    reg_P300_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P300",
        "reg_P300_ids_RegistroP030_id",
        string="Cálculo do IRPJ com Base no Lucro Presumido",
    )

    reg_P400_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P400",
        "reg_P400_ids_RegistroP030_id",
        string="ids",
        help=("Apuração da Base de Cálculo da CSLL com Base no Lucro Presumido"),
    )

    reg_P500_ids = fields.One2many(
        "l10n_br_sped.ecf.1.P500",
        "reg_P500_ids_RegistroP030_id",
        string="Cálculo da CSLL com Base no Lucro Líquido",
    )


class RegistroP100(models.Model):
    "Balanço Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP100"

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme "
            "tabela dinâmica do Sped (Disponibilizada no item II deste "
            "registro e no programa da ECF, no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta: S – Sintética A – Analítica", required=True
    )

    NIVEL = fields.Integer(string="Nível da Conta")

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        help=(
            "Natureza da Conta, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    VAL_CTA_REF_INI = fields.Monetary(
        string="Saldo Inicial da Conta Referencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_CTA_REF_INI = fields.Char(
        string="INI",
        required=True,
        help=("Indicador da Situação do Saldo Inicial: D – Devedor C – Credor"),
    )

    VAL_CTA_REF_DEB = fields.Monetary(
        string="Valor Total dos Débitos: Somatório dos valores mapeados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CTA_REF_CRED = fields.Monetary(
        string="Valor Total dos Créditos: Somatório dos valores mapeados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CTA_REF_FIN = fields.Char(
        string="Saldo Final da Conta Referencial", required=True
    )

    IND_VAL_CTA_REF_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_P100_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP130(models.Model):
    "Demonstração das Receitas Incentivadas do Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P130"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP130"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P130_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP150(models.Model):
    "Demonstração do Resultado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P150"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP150"

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme "
            "tabela dinâmica do Sped (Disponibilizada no item III deste "
            "registro e no programa da ECF, no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta: S – Sintética A – Analítica", required=True
    )

    NIVEL = fields.Integer(string="Nível da Conta")

    COD_NAT = fields.Char(string="Natureza da Conta: 04 – Contas de Resultado")

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    VALOR = fields.Monetary(
        string="Saldo Final da Conta Referencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do Sinal do Saldo Final: C – Credor D – Devedor",
        required=True,
    )

    reg_P150_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP200(models.Model):
    "Apuração da Base de Cálculo do Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P200"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP200"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P200_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP230(models.Model):
    "Cálculo da Isenção e Redução do Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P230"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP230"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P230_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP300(models.Model):
    "Cálculo do IRPJ com Base no Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P300"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP300"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P300_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP400(models.Model):
    "Apuração da Base de Cálculo da CSLL com Base no Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P400"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP400"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P400_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroP500(models.Model):
    "Cálculo da CSLL com Base no Lucro Líquido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.P500"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroP500"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_P500_ids_RegistroP030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.P030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL "
            "das Empresas Tributadas pelo Lucro Presumido"
        ),
    )


class RegistroQ100(models.Model):
    "Demonstrativo do Livro Caixa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Q100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroQ100"

    DATA = fields.Integer(
        string="Data da entrada ou da saída dos recursos", required=True
    )

    NUM_DOC = fields.Char(string="Número do documento")

    HIST = fields.Char(string="Histórico", required=True)

    VL_ENTRADA = fields.Monetary(
        string="Valor de entrada dos recursos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SAIDA = fields.Monetary(
        string="Valor de saída dos recursos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    SLD_FIN = fields.Char(string="Saldo Final", required=True)


class RegistroT030(models.Model):
    """Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das
    Empresas Tributadas pelo Lucro Arbitrado"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.T030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroT030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="APUR",
        required=True,
        help=(
            "S T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º Trimestre T04 – "
            "4º Trimestre Regra: o período deve estar compreendido entre a "
            "data início e data fim da escrituração. E 0010.FORMA_APUR = “T” -"
            " Deve existir um registro [T01..T04] para cada trimestre marcado "
            "no 0010.FORMA_TRIB_PER[1..4] como “A”"
        ),
    )

    reg_T120_ids = fields.One2many(
        "l10n_br_sped.ecf.1.T120",
        "reg_T120_ids_RegistroT030_id",
        string="ids",
        help=("Apuração da Base de Cálculo do IRPJ com Base no Lucro Arbitrado"),
    )

    reg_T150_ids = fields.One2many(
        "l10n_br_sped.ecf.1.T150",
        "reg_T150_ids_RegistroT030_id",
        string="Cálculo do Imposto de Renda com Base no Lucro Arbitrado",
    )

    reg_T170_ids = fields.One2many(
        "l10n_br_sped.ecf.1.T170",
        "reg_T170_ids_RegistroT030_id",
        string="ids (reg_T170_ids)",
        help=("Apuração da Base de Cálculo da CSLL com Base no Lucro Arbitrado"),
    )

    reg_T181_ids = fields.One2many(
        "l10n_br_sped.ecf.1.T181",
        "reg_T181_ids_RegistroT030_id",
        string="Cálculo da CSLL com Base no Lucro Arbitrado",
    )


class RegistroT120(models.Model):
    "Apuração da Base de Cálculo do IRPJ com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.T120"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroT120"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T120_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.T030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das"
            " Empresas Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroT150(models.Model):
    "Cálculo do Imposto de Renda com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.T150"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroT150"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T150_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.T030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das"
            " Empresas Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroT170(models.Model):
    "Apuração da Base de Cálculo da CSLL com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.T170"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroT170"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T170_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.T030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das"
            " Empresas Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroT181(models.Model):
    "Cálculo da CSLL com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.T181"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroT181"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_T181_ids_RegistroT030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.T030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das"
            " Empresas Tributadas pelo Lucro Arbitrado"
        ),
    )


class RegistroU030(models.Model):
    """Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das
    Empresas Imunes e Isentas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.U030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroU030"

    DT_INI = fields.Date(string="Data do Início do Período", required=True)

    DT_FIN = fields.Date(string="Data do Fim do período", required=True)

    PER_APUR = fields.Char(
        string="Período de apuração",
        required=True,
        help=(
            "Período de apuração (para 0010.APUR_CSLL = “A”): A00 – Anual A01 "
            "– Rec. Bruta de janeiro /Balanço suspensão redução até janeiro "
            "A02 – Rec. Bruta de fevereiro /Balanço suspensão redução até "
            "fevereiro A03 – Rec. Bruta de março /Balanço suspensão redução "
            "até março A04 – Rec. Bruta de abril /Balanço suspensão redução "
            "até abril A05 – Rec. Bruta de maio /Balanço suspensão redução até"
            " maio A06 – Rec. Bruta de junho /Balanço suspensão redução até "
            "junho A07 – Rec. Bruta de julho /Balanço suspensão redução até "
            "julho A08 – Rec. Bruta de agosto /Balanço suspensão redução até "
            "agosto A09 – Rec. Bruta de setembro /Balanço suspensão redução "
            "até setembro A10 – Rec. Bruta de outubro/Balanço suspensão "
            "redução até outubro A11 – Rec. Bruta de novembro /Balanço "
            "suspensão redução até novembro A12 – Rec. Bruta de "
            "dezembro/Balanço suspensão redução até dezembro Período de "
            "apuração (para 0010.APUR_CSLL = “T”): T01 – 1º Trimestre T02 – 2º"
            " Trimestre T03 – 3º Trimestre T04 – 4º Trimestre"
        ),
    )

    reg_U100_ids = fields.One2many(
        "l10n_br_sped.ecf.1.U100",
        "reg_U100_ids_RegistroU030_id",
        string="Balanço Patrimonial",
    )

    reg_U150_ids = fields.One2many(
        "l10n_br_sped.ecf.1.U150",
        "reg_U150_ids_RegistroU030_id",
        string="Demonstração do Resultado",
    )

    reg_U180_ids = fields.One2many(
        "l10n_br_sped.ecf.1.U180",
        "reg_U180_ids_RegistroU030_id",
        string="Cálculo do IRPJ das Empresas Imunes ou Isentas",
    )

    reg_U182_ids = fields.One2many(
        "l10n_br_sped.ecf.1.U182",
        "reg_U182_ids_RegistroU030_id",
        string="Cálculo da CSLL das Empresas Imunes ou Isentas",
    )


class RegistroU100(models.Model):
    "Balanço Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.U100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroU100"

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme "
            "tabela dinâmica do Sped (Disponibilizada no item II deste "
            "registro e no programa da ECF, no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta: S – Sintética A – Analítica", required=True
    )

    NIVEL = fields.Integer(string="Nível da Conta")

    COD_NAT = fields.Char(
        string="Natureza da Conta",
        help=(
            "Natureza da Conta, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    VAL_CTA_REF_INI = fields.Monetary(
        string="Saldo Inicial da Conta Referencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_CTA_REF_INI = fields.Char(
        string="INI",
        required=True,
        help=("Indicador da Situação do Saldo Inicial: D – Devedor C – Credor"),
    )

    VAL_CTA_REF_DEB = fields.Monetary(
        string="Valor Total dos Débitos: Somatório dos valores mapeados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CTA_REF_CRED = fields.Monetary(
        string="Valor Total dos Créditos: Somatório dos valores mapeados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CTA_REF_FIN = fields.Char(
        string="Saldo Final da Conta Referencial", required=True
    )

    IND_VAL_CTA_REF_FIN = fields.Char(
        string="FIN",
        required=True,
        help="Indicador da Situação do Saldo Final: D – Devedor C – Credor",
    )

    reg_U100_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.U030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL"
            " das Empresas Imunes e Isentas"
        ),
    )


class RegistroU150(models.Model):
    "Demonstração do Resultado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.U150"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroU150"

    CODIGO = fields.Char(
        string="Código da Conta Referencial",
        required=True,
        help=(
            "Código da Conta Referencial (Analíticas e Sintéticas), conforme "
            "tabela dinâmica do Sped (Disponibilizada no item III deste "
            "registro e no programa da ECF, no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(string="Descrição da Conta Referencial")

    TIPO = fields.Char(
        string="Indicador do Tipo de Conta: S – Sintética A – Analítica", required=True
    )

    NIVEL = fields.Integer(string="Nível da Conta")

    COD_NAT = fields.Char(string="Natureza da Conta: 04 – Contas de Resultado")

    COD_CTA_SUP = fields.Char(
        string="Código da Conta Sintética de Nível Imediatamente Superior"
    )

    VALOR = fields.Monetary(
        string="Saldo Final da Conta Referencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador do Sinal do Saldo Final: C – Credor D – Devedor",
        required=True,
    )

    reg_U150_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.U030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL"
            " das Empresas Imunes e Isentas"
        ),
    )


class RegistroU180(models.Model):
    "Cálculo do IRPJ das Empresas Imunes ou Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.U180"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroU180"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_U180_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.U030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL"
            " das Empresas Imunes e Isentas"
        ),
    )


class RegistroU182(models.Model):
    "Cálculo da CSLL das Empresas Imunes ou Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.U182"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroU182"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_U182_ids_RegistroU030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.U030",
        string="id",
        required=True,
        help=(
            "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL"
            " das Empresas Imunes e Isentas"
        ),
    )


class RegistroV010(models.Model):
    "DEREX – Instituição"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.V010"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroV010"

    NOME_INSTITUICAO = fields.Char(string="Nome da Instituição", required=True)

    PAIS = fields.Char(string="Código do País da Instituição", required=True)

    TIP_MOEDA = fields.Char(
        string="Deve ser selecionada a moeda utilizada na Declaração", required=True
    )

    reg_V020_ids = fields.One2many(
        "l10n_br_sped.ecf.1.V020",
        "reg_V020_ids_RegistroV010_id",
        string="DEREX",
        help="DEREX - Responsável pela Movimentação",
    )

    reg_V030_ids = fields.One2many(
        "l10n_br_sped.ecf.1.V030",
        "reg_V030_ids_RegistroV010_id",
        string="DEREX - Período – Mês",
    )


class RegistroV020(models.Model):
    "DEREX - Responsável pela Movimentação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.V020"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroV020"

    NOME = fields.Char(string="Nome do responsável", required=True)

    ENDERECO = fields.Char(string="Endereço do responsável", required=True)

    TIPO_DO_C = fields.Char(string="Tipo de documento do responsável", required=True)

    NI = fields.Char(string="Número do documento do responsável", required=True)

    IDENT_CONTA = fields.Char(string="Identificação das contas", required=True)

    reg_V020_ids_RegistroV010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.V010",
        string="DEREX – Instituição",
        required=True,
    )


class RegistroV030(models.Model):
    "DEREX - Período – Mês"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.V030"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroV030"

    MES = fields.Char(string="Mês", required=True)

    reg_V030_ids_RegistroV010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.V010",
        string="DEREX – Instituição",
        required=True,
    )

    reg_V100_ids = fields.One2many(
        "l10n_br_sped.ecf.1.V100",
        "reg_V100_ids_RegistroV030_id",
        string="ids",
        help=(
            "Demonstrativo dos recursos em moeda estrangeira decorrentes do "
            "recebimento de exportações"
        ),
    )


class RegistroV100(models.Model):
    """Demonstrativo dos recursos em moeda estrangeira decorrentes do
    recebimento de exportações"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.V100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroV100"

    CODIGO = fields.Char(
        string="Identificação da linha",
        required=True,
        help="Identificação da linha, conforme tabela publicada pela RFB.",
    )

    DESCRICAO = fields.Char(
        string="Descrição da linha",
        help="Descrição da linha, conforme tabela publicada pela RFB",
    )

    VALOR = fields.Char(string="Valor da Linha")

    reg_V100_ids_RegistroV030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.V030",
        string="DEREX - Período – Mês",
        required=True,
    )


class RegistroW100(models.Model):
    "Informações Sobre o Grupo Multinacional e a Entidade Declarante"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.W100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroW100"

    NOME_MULTINACIONAL = fields.Char(
        string="MULTINACIONAL",
        required=True,
        help=(
            "Nome do Grupo Multinacional: Deve ser identificado o nome do "
            "grupo multinacional o qual o contribuinte integra."
        ),
    )

    IND_CONTROLADORA = fields.Char(
        string="CONTROLADORA",
        required=True,
        help=(
            "A Identifica se a Entidade é a Controladora Final do Grupo "
            "Multinacional. Entidade é controladora final do grupo "
            "multinacional, conforme definição estabelecida no artigo 2º, "
            "inciso VI, da Instrução Normativa RFB nº 1.681/2016.? S - Sim N –"
            " Não"
        ),
    )

    NOME_CONTROLADORA = fields.Char(
        string="Nome da Controladora Final",
        required=True,
        help=(
            "Nome da Controladora Final. Observação: Caso a entidade não seja "
            "a controladora final do grupo multinacional do qual faz parte, "
            "deve identificar a entidade que possui essa posição, por meio do "
            "nome legal completo da entidade, incluindo a designação doméstica"
            " da forma legal, conforme indicado em seus documentos de "
            "constituição ou similares."
        ),
    )

    JURISDICAO_CONTROLADORA = fields.Char(
        string="CONTROLADORA (JURISDICAO_CONTROLADORA)",
        required=True,
        help=(
            "Jurisdição de Residência para fins Tributários do Controlador "
            "Final, conforme tabela do Sped (Disponibilizada no programa da "
            "ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    TIN_CONTROLADORA = fields.Char(
        string="Tax Identification Number",
        required=True,
        help=(
            "Tax Identification Number (TIN): Número de identificação fiscal "
            "utilizado pela administração tributária da jurisdição de "
            "residência para fins tributários do controlador final do grupo "
            "multinacional. Caso não exista o número, o campo deve ser "
            "preenchido com a expressão NOTIN. Se o controlador final for "
            "residente no Brasil, informar o CNPJ. Observação: Este campo não "
            "deve ser preenchido quando a declarante da ECF for a controladora"
            " final (W100.IND_CONTROLADORA = Sim)."
        ),
    )

    IND_ENTREGA = fields.Integer(
        string="ENTREGA",
        required=True,
        help=(
            "E Identifica a Entidade Responsável pela Entrega da Declaração "
            "País-a-País (entidade declarante). ntidade responsável pela "
            "entrega da Declaração País-a-País: 1 - Grupo multinacional "
            "dispensado da entrega da Declaração País-a-País. 2 - Controlador "
            "final do grupo multinacional. 3 - Própria entidade declarante da "
            "ECF, na condição de Entidade Substituta ou de Preenchimento Local"
            " 4 - Outra entidade, na condição de Entidade Substituta ou de "
            "Preenchimento Local"
        ),
    )

    IND_MODALIDADE = fields.Integer(
        string="MODALIDADE",
        required=True,
        help=(
            "S S S S Identifica a Modalidade de entrega da Declaração País-a-"
            "País: 1 - Entidade substituta. 2 - Preenchimento Local. e "
            "IND_ENTREGA = 3 e IND_MODALIDADE = 1, então a própria entidade "
            "declarante da ECF é responsável pela entrega da Declaração "
            "País-a- País na condição de Entidade Substituta. e IND_ENTREGA = "
            "4 e IND_MODALIDADE = 1, então outra entidade é responsável pela "
            "entrega da Declaração País-a-País na condição de Entidade "
            "Substituta. e IND_ENTREGA = 3 e IND_MODALIDADE = 2, então a "
            "própria entidade declarante da ECF é responsável pela entrega da "
            "Declaração País-a- País na condição de Preenchimento Local. e "
            "IND_ENTREGA = 4 e IND_MODALIDADE = 2, então outra entidade é "
            "responsável pela entrega da Declaração País-a-País na condição de"
            " Preenchimento Local."
        ),
    )

    NOME_SUBSTITUTA = fields.Char(
        string="SUBSTITUTA",
        help=(
            "Nome da Entidade Substituta/Entidade Local: Caso a entidade "
            "declarante da Declaração País-a-País seja outra entidade, na "
            "condição de Entidade Substituta (residente no Brasil ou no "
            "exterior) ou de Preenchimento Local, o contribuinte deve "
            "identificá-la por meio do nome legal completo da entidade, "
            "incluindo a designação doméstica da forma legal, conforme "
            "indicado em seus documentos de constituição ou similares."
        ),
    )

    JURISDICAO_SUBSTITUTA = fields.Char(
        string="SUBSTITUTA (JURISDICAO_SUBSTITUTA)",
        help=(
            "Jurisdição de Residência para fins Tributários da Entidade "
            "Substituta/Entidade Local, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). "
            "Observação: O contribuinte deve indicar o país de residência para"
            " fins tributários da entidade declarante, seja ela entidade "
            "substituta residente no Brasil ou no exterior, ou outra entidade "
            "na condição de preenchimento local. Neste último caso, a "
            "jurisdição a ser informada deve ser obrigatoriamente Brasil (pois"
            " a modalidade de entrega da Declaração de preenchimento local só "
            "é admitida para entidades residentes no Brasil)."
        ),
    )

    TIN_SUBSTITUTA = fields.Integer(
        string="Tax Identification Number (TIN_SUBSTITUTA)",
        help=(
            "Tax Identification Number (TIN): Número de identificação fiscal "
            "utilizado pela administração tributária da jurisdição de "
            "residência para fins tributários da entidade substituta do grupo "
            "multinacional ou da entidade integrante local. Caso não exista o "
            "número, o campo deve ser preenchido com a expressão NOTIN. Se a "
            "entidade for residente no Brasil, informar o CNPJ."
        ),
    )

    DT_INI = fields.Date(
        string="Data de Início do Período Societário",
        help=(
            "Data de Início do Período Societário. Observação: A Declaração "
            "País-a-País deve cobrir o ano fiscal do controlador final do "
            "grupo multinacional. Dessa forma, caso o contribuinte seja a "
            "entidade declarante na condição de entidade substituta ou na "
            "forma de preenchimento local, hipóteses em que o controlador "
            "final do grupo é residente no exterior, o ano fiscal de "
            "declaração deve ser o período societário do controlador final, "
            "mesmo que não coincida com o período societário do próprio "
            "contribuinte. Exemplo: O ano fiscal do contribuinte brasileiro "
            "vai de 01/01/XXXX a 31/12/XXXX, enquanto que o ano fiscal do "
            "controlador final do grupo multinacional do qual faz parte, "
            "residente no exterior, vai de 01/10/XXXX a 30/09/XXXX. Nesse "
            "caso, o período que deve ser abrangido pela Declaração País-a-"
            "País, e que deve ser devidamente informado neste campo e no campo"
            " 13, é o ano fiscal do controlador final, ou seja, 01/10/XXXX a "
            "30/09/XXXX."
        ),
    )

    DT_FIN = fields.Date(
        string="i Data Final do Período Societário",
        help=(
            "i Data Final do Período Societário. Observações: i) O ano fiscal "
            "da Declaração País-a-País deve ser o ano fiscal encerrado "
            "imediatamente anterior, podendo, dessa forma, ter data final "
            "igual ou anterior à data final do período a que se refere a ECF. "
            "i) Caso o período a que se refere a Declaração País-a-País não "
            "corresponda a um ano completo, devem ser fornecidos "
            "esclarecimentos no campo de informações adicionais do registro "
            "W300."
        ),
    )

    TIP_MOEDA = fields.Char(
        string="MOEDA",
        help=(
            "O Moeda: a entidade deve indicar qual a moeda utilizada nas "
            "informações em valores fornecidas na Declaração País-a-País, "
            "conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas). bservação: As informações em "
            "valores da Declaração País-a-País devem ser prestadas em uma "
            "única moeda, que deve ser a moeda do controlador final do grupo "
            "multinacional."
        ),
    )

    IND_IDIOMA = fields.Char(
        string="IDIOMA",
        help=(
            "Idioma Utilizado nas Informações Adicionais da Declaração País-a-"
            "País. Deve ser indicado o idioma utilizado nos campos de "
            "informações adicionais da DPP, fornecidas em texto livre, caso "
            "tenham sido prestadas: PT - Português. EN - Inglês. ES - "
            "Espanhol."
        ),
    )

    reg_W200_ids = fields.One2many(
        "l10n_br_sped.ecf.1.W200",
        "reg_W200_ids_RegistroW100_id",
        string="Declaração País a País",
    )


class RegistroW200(models.Model):
    "Declaração País a País"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.W200"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroW200"

    JURISDICAO = fields.Char(
        string="Jurisdição de Residência para fins Tributários",
        help=(
            "Jurisdição de Residência para fins Tributários, conforme tabela "
            "do Sped (Disponibilizada no programa da ECF no diretório Arquivos"
            " de Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). A "
            "entidade declarante deve listar todas as jurisdições nas quais "
            "entidades integrantes do grupo multinacional são residentes para "
            "fins tributários e aquelas em que opera por meio de um "
            "estabelecimento permanente (ou seja, todas as jurisdições nas "
            "quais o grupo multinacional opera). Para cada uma dessas "
            "jurisdições, deverão ser fornecidas, de maneira agregada (isto é,"
            " somados os valores de todas as entidades integrantes do grupo "
            "multinacional presentes em cada jurisdição) as informações "
            "solicitadas nos campos subsequentes. Observação: Caso exista uma "
            "ou mais entidades integrantes do grupo multinacional que sejam "
            "consideradas sem residência para fins tributários, o campo "
            "W200.JURISDICAO deve ser preenchido com o código X5 (Sem "
            "residência para fins tribvutários). Para esse campo, deverão ser "
            "reportadas, de maneira agregada, as informações a respeito de "
            "todas as entidades integrantes do grupo multinacional "
            "consideradas sem residência para fins tributários."
        ),
    )

    VL_REC_NAO_REL_EST = fields.Char(
        string="EST",
        help=(
            "Receitas Provenientes de Partes Não Relacionadas em Moeda "
            "Estrangeira (identificada no campo W100.TIP_MOEDA): O "
            "contribuinte deve informar a soma das receitas, em moeda "
            "estrangeira, de todas as entidades integrantes do grupo "
            "multinacional presentes na jurisdição tributária em questão que "
            "tenham sido geradas de transações com partes não relacionadas. "
            "Observação: Esse campo deve ser preenchido somente se "
            "W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_REC_NAO_REL = fields.Char(
        string="REL",
        required=True,
        help=(
            "Receitas Provenientes de Partes Não Relacionadas: O contribuinte "
            "deve informar a soma das receitas, em reais, de todas as "
            "entidades integrantes do grupo multinacional presentes na "
            "jurisdição tributária em questão que tenham sido geradas de "
            "transações com partes não relacionadas. Observação: Caso o campo "
            "W200.VL_REC_NAO_REL_EST seja informado, este campo será calculado"
            " pelo sistema, utilizando como base para conversão tabela do "
            "Banco Central para a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_REC_REL_EST = fields.Char(
        string="EST (VL_REC_REL_EST)",
        help=(
            "Receitas Provenientes de Partes Relacionadas em Moeda Estrangeira"
            " (identificada no campo W100.TIP_MOEDA): O contribuinte deve "
            "informar a soma das receitas, em moeda estrangeira, de todas as "
            "entidades integrantes do grupo multinacional presentes na "
            "jurisdição tributária em questão que tenham sido geradas de "
            "transações com partes relacionadas. Observação: Esse campo deve "
            "ser preenchido somente se W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_REC_REL = fields.Char(
        string="REL (VL_REC_REL)",
        required=True,
        help=(
            "Receitas Provenientes de Partes Relacionadas: O contribuinte deve"
            " informar a soma das receitas, em reais, de todas as entidades "
            "integrantes do grupo multinacional presentes na jurisdição "
            "tributária em questão que tenham sido geradas de transações com "
            "partes relacionadas. Observação: Caso o campo W200.VL_REC_REL_EST"
            " seja informado, este campo será calculado pelo sistema, "
            "utilizando como base para conversão tabela do Banco Central para "
            "a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_REC_TOTAL_EST = fields.Char(
        string="Receita Total em Moeda Estrangeira",
        help=(
            "Receita Total em Moeda Estrangeira (identificada no campo "
            "W100.TIP_MOEDA): Soma das receitas provenientes de partes não "
            "relacionadas e das receitas provenientes de partes relacionadas, "
            "caso tenham sido informadas em moeda estrangeira. Este campo será"
            " calculado pelo sistema (W200.VL_REC_NAO_REL_EST + "
            "W200.VL_REC_REL_EST)."
        ),
    )

    VL_REC_TOTAL = fields.Char(
        string="TOTAL",
        required=True,
        help=(
            "Receita Total: Soma das receitas provenientes de partes não "
            "relacionadas e das receitas provenientes de partes relacionadas, "
            "caso tenham sido informadas em reais. Este campo será calculado "
            "pelo sistema (W200.VL_REC_NAO_REL + W200.VL_REC_REL)."
        ),
    )

    VL_LUC_PREJ_ANTES_IR_EST = fields.Char(
        string="Lucro ou Prejuízo Antes do IR em Moeda Estrangeira",
        help=(
            "Lucro ou Prejuízo Antes do IR em Moeda Estrangeira (identificada "
            "no campo W100.TIP_MOEDA): Deve ser reportada a soma do lucro (ou "
            "prejuízo) antes do imposto de renda, em moeda estrangeira, de "
            "todas as entidades integrantes do grupo multinacional presentes "
            "na jurisdição em questão. O lucro (ou prejuízo) antes do imposto "
            "de renda deve incluir todas as receitas e despesas "
            "extraordinárias. Observação: Esse campo deve ser preenchido "
            "somente se W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_LUC_PREJ_ANTES_IR = fields.Char(
        string="IR",
        required=True,
        help=(
            "Lucro ou Prejuízo Antes do IR: Deve ser reportada a soma do lucro"
            " (ou prejuízo) antes do imposto de renda, em reais, de todas as "
            "entidades integrantes do grupo multinacional presentes na "
            "jurisdição em questão. O lucro (ou prejuízo) antes do imposto de "
            "renda deve incluir todas as receitas e despesas extraordinárias. "
            "Observação: Caso o campo W200.VL_LUC_PREJ_ANTES_IR_EST seja "
            "informado, este campo será calculado pelo sistema, utilizando "
            "como base para conversão tabela do Banco Central para a data de "
            "31 de dezembro do ano da Declaração."
        ),
    )

    VL_IR_PAGO_EST = fields.Char(
        string="Imposto de Renda Pago",
        help=(
            "Imposto de Renda Pago, em moeda estrangeira (identificada no "
            "campo W100.TIP_MOEDA): deve ser informado o montante total de "
            "imposto de renda efetivamente pago, em moeda estrangeira, durante"
            " o ano fiscal de declaração por todas as entidades integrantes do"
            " grupo multinacional presentes na jurisdição reportada. Nesse "
            "montante devem ser incluídos impostos pagos por uma entidade "
            "integrante a sua própria jurisdição de residência para fins "
            "tributários e para todas as outras jurisdições. Também estão "
            "incluídos valores pagos a título de imposto de renda retido na "
            "fonte por outras entidades (sejam elas independentes ou "
            "relacionadas) com relação a pagamentos realizados a uma entidade "
            "integrante do grupo multinacional. Dessa forma, se, por exemplo: "
            "a entidade A, residente na jurisdição A, recebe valores a título "
            "de juros na jurisdição B, o imposto retido na jurisdição B deve "
            "ser reportado pela entidade A (isto é, com referência à "
            "jurisdição em que a entidade A está situada). Observação: Esse "
            "campo deve ser preenchido somente se W100.TIP_MOEDA for diferente"
            " de Real."
        ),
    )

    VL_IR_PAGO = fields.Char(
        string="PAGO",
        required=True,
        help=(
            "Imposto de Renda Pago: deve ser informado o montante total de "
            "imposto de renda efetivamente pago, em reais, durante o ano "
            "fiscal de declaração por todas as entidades integrantes do grupo "
            "multinacional presentes na jurisdição reportada. Nesse montante "
            "devem ser incluídos impostos pagos por uma entidade integrante a "
            "sua própria jurisdição de residência para fins tributários e para"
            " todas as outras jurisdições. Também estão incluídos valores "
            "pagos a título de imposto de renda retido na fonte por outras "
            "entidades (sejam elas independentes ou relacionadas) com relação "
            "a pagamentos realizados a uma entidade integrante do grupo "
            "multinacional. Dessa forma, se, por exemplo: a entidade A, "
            "residente na jurisdição A, recebe valores a título de juros na "
            "jurisdição B, o imposto retido na jurisdição B deve ser reportado"
            " pela entidade A (isto é, com referência à jurisdição em que a "
            "entidade A está situada). Observação: Caso o campo "
            "W200.VL_IR_PAGO_EST seja informado, este campo será calculado "
            "pelo sistema, utilizando como base para conversão tabela do Banco"
            " Central para a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_IR_DEVIDO_EST = fields.Char(
        string="Imposto de Renda Devido",
        help=(
            "Imposto de Renda Devido, em moeda estrangeira (identificada no "
            "campo W100.TIP_MOEDA): Deve ser informada a soma do imposto de "
            "renda devido, em moeda estrangeira, sobre os lucros tributáveis "
            "ou prejuízos no ano fiscal de declaração de todas as entidades "
            "integrantes do grupo multinacional residentes para fins "
            "tributários na jurisdição reportada. A despesa deve refletir "
            "apenas operações realizadas no ano e não inclui impostos "
            "diferidos ou provisões para passivos tributários incertos. "
            "Observação: Esse campo deve ser preenchido somente se "
            "W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_IR_DEVIDO = fields.Char(
        string="DEVIDO",
        required=True,
        help=(
            "Imposto de Renda Devido: Deve ser informada a soma do imposto de "
            "renda devido, em reais, sobre os lucros tributáveis ou prejuízos "
            "no ano fiscal de declaração de todas as entidades integrantes do "
            "grupo multinacional residentes para fins tributários na "
            "jurisdição reportada. A despesa deve refletir apenas operações "
            "realizadas no ano e não inclui impostos diferidos ou provisões "
            "para passivos tributários incertos. Observação: Caso o campo "
            "W200.VL_IR_DEVIDO_EST seja informado, este campo será calculado "
            "pelo sistema, utilizando como base para conversão tabela do Banco"
            " Central para a data de 31 de dezembro do ano da Declaração."
        ),
    )

    VL_CAP_SOC_EST = fields.Char(
        string="Capital Social em Moeda Estrangeira",
        help=(
            "Capital Social em Moeda Estrangeira (identificada no campo "
            "W100.TIP_MOEDA): A entidade declarante deve reportar a soma do "
            "capital social, em moeda estrangeira, de todas as entidades "
            "integrantes residentes para fins tributários na jurisdição "
            "informada. Quanto aos estabelecimentos permanentes, o capital "
            "social deve ser reportado pela entidade à qual o estabelecimento "
            "está relacionado, a menos que exista, na jurisdição onde o "
            "estabelecimento permanente está situado, a obrigatoriedade de um "
            "capital definido, para fins regulatórios. Nesse caso, o capital "
            "atribuído a um estabelecimento permanente deve ser especificado "
            "no campo de Informações Adicionais do registro W300. Observação: "
            "Esse campo deve ser preenchido somente se W100.TIP_MOEDA for "
            "diferente de Real."
        ),
    )

    VL_CAP_SOC = fields.Char(
        string="SOC",
        required=True,
        help=(
            "Capital Social: A entidade declarante deve reportar a soma do "
            "capital social, em reais, de todas as entidades integrantes "
            "residentes para fins tributários na jurisdição informada. Quanto "
            "aos estabelecimentos permanentes, o capital social deve ser "
            "reportado pela entidade à qual o estabelecimento está "
            "relacionado, a menos que exista, na jurisdição onde o "
            "estabelecimento permanente está situado, a obrigatoriedade de um "
            "capital definido, para fins regulatórios. Nesse caso, o capital "
            "atribuído a um estabelecimento permanente deve ser especificado "
            "no registro de Informações Adicionais do registro W300. "
            "Observação: Caso o campo W200.VL_CAP_SOC_EST seja informado, este"
            " campo será calculado pelo sistema, utilizando como base para "
            "conversão tabela do Banco Central para a data de 31 de dezembro "
            "do ano da Declaração."
        ),
    )

    VL_LUC_ACUM_EST = fields.Char(
        string="Lucros Acumulados em Moeda Estrangeira",
        help=(
            "Lucros Acumulados em Moeda Estrangeira (identificada no campo "
            "W100.TIP_MOEDA): A entidade declarante deve reportar a soma do "
            "total de lucros acumulados, em moeda estrangeira, de todas as "
            "entidades integrantes do grupo multinacional residentes para fins"
            " tributários na jurisdição informada. No que diz respeito aos "
            "estabelecimentos permanentes, os lucros acumulados devem ser "
            "reportados pela entidade à qual o estabelecimento está "
            "relacionado. Observação: Esse campo deve ser preenchido somente "
            "se W100.TIP_MOEDA for diferente de Real."
        ),
    )

    VL_LUC_ACUM = fields.Char(
        string="ACUM",
        required=True,
        help=(
            "Lucros Acumulados: A entidade declarante deve reportar a soma do "
            "total de lucros acumulados, em reais, de todas as entidades "
            "integrantes do grupo multinacional residentes para fins "
            "tributários na jurisdição informada. No que diz respeito aos "
            "estabelecimentos permanentes, os lucros acumulados devem ser "
            "reportados pela entidade à qual o estabelecimento está "
            "relacionado. Observação: Caso o campo W200.LUC_ACUM_EST seja "
            "informado, este campo será calculado pelo sistema, utilizando "
            "como base para conversão tabela do Banco Central para a data de "
            "31 de dezembro do ano da Declaração."
        ),
    )

    VL_ATIV_TANG_EST = fields.Char(
        string="Ativos Tangíveis",
        help=(
            "Ativos Tangíveis (exceto caixa e equivalentes de caixa) em Moeda "
            "Estrangeira (identificada no campo W100.TIP_MOEDA): Deve ser "
            "informada a soma do valor contábil líquido dos ativos tangíveis, "
            "em moeda estrangeira, de todas as entidades integrantes do grupo "
            "multinacional residentes para fins tributários na jurisdição "
            "indicada. Quanto aos estabelecimentos permanentes, seus ativos "
            "devem ser reportados com referência à jurisdição na qual o "
            "estabelecimento está situado. Para fins da Declaração País-a-"
            "País, ativos tangíveis não incluem caixa ou itens equivalentes de"
            " caixa, intangíveis ou ativos financeiros. Observação: Esse campo"
            " deve ser preenchido somente se W100.TIP_MOEDA for diferente de "
            "Real."
        ),
    )

    VL_ATIV_TANG = fields.Char(
        string="Ativos Tangíveis (VL_ATIV_TANG)",
        required=True,
        help=(
            "Ativos Tangíveis (exceto caixa e equivalentes de caixa): Deve ser"
            " informada a soma do valor contábil líquido dos ativos tangíveis,"
            " em reais, de todas as entidades integrantes do grupo "
            "multinacional residentes para fins tributários na jurisdição "
            "indicada. Quanto aos estabelecimentos permanentes, seus ativos "
            "devem ser reportados com referência à jurisdição na qual o "
            "estabelecimento está situado. Para fins da Declaração País-a-"
            "País, ativos tangíveis não incluem caixa ou itens equivalentes de"
            " caixa, intangíveis ou ativos financeiros. Observação: Caso o "
            "campo W200.VL_ATIV_TANG_EST seja informado, este campo será "
            "calculado pelo sistema, utilizando como base para conversão "
            "tabela do Banco Central para a data de 31 de dezembro do ano da "
            "Declaração."
        ),
    )

    NUM_EMP = fields.Integer(
        string="EMP",
        required=True,
        help=(
            "Número de Empregados: Deve ser informado o número total de "
            "empregados, trabalhadores e demais colaboradores de todas as "
            "entidades integrantes do grupo multinacional residentes para fins"
            " tributários na jurisdição indicada. O número de empregados deve "
            "ser totalizado ao final do ano, e reportado com base na média "
            "registrada para o ano ou outro critério aplicado de maneira "
            "consistente entre as jurisdições do grupo e para todos os anos. "
            "Para fins da Declaração País- a-País, profissionais independentes"
            " contratados participantes das atividades operacionais ordinárias"
            " da entidade integrante devem ser reportados como empregados. "
            "Arredondamentos ou aproximações razoáveis do número de empregados"
            " são permitidas, desde que não gerem distorções relevantes à "
            "distribuição relativa de empregados entre as diversas jurisdições"
            " tributárias onde o grupo opera. Critérios consistentes devem ser"
            " aplicados de um ano para outro entre as entidades."
        ),
    )

    reg_W200_ids_RegistroW100_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.W100",
        string="id",
        required=True,
        help=("Informações Sobre o Grupo Multinacional e a Entidade Declarante"),
    )

    reg_W250_ids = fields.One2many(
        "l10n_br_sped.ecf.1.W250",
        "reg_W250_ids_RegistroW200_id",
        string="Declaração País a País",
        help="Declaração País a País - Entidades Integrantes",
    )


class RegistroW250(models.Model):
    "Declaração País a País - Entidades Integrantes"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.W250"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroW250"

    JUR_DIFERENTE = fields.Char(
        string="Jurisdição Tributária de Organização ou Incorporação",
        help=(
            "Jurisdição Tributária de Organização ou Incorporação, se "
            "diferente da jurisdição de residência para fins tributários, "
            "conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas): A entidade declarante deve "
            "informar a jurisdição sob cuja legislação a entidade integrante "
            "do grupo multinacional está estabelecida, se diferente da "
            "jurisdição de residência para fins tributários."
        ),
    )

    NOME = fields.Char(
        string="NOME",
        required=True,
        help=(
            "Nome/Razão Social da Entidade Integrante: Nome legal completo da "
            "entidade, incluindo a designação doméstica da forma legal, "
            "conforme indicado em seus documentos de constituição ou "
            "similares. Caso a entidade seja um estabelecimento permanente, "
            "deverá ser reportada com referência à jurisdição onde está "
            "situada, e seu nome deve ser seguido por (P.E.), designação que "
            "significa, em inglês, “Permanent Establishment” (Estabelecimento "
            "Permanente). Além disso, deve ser indicada a entidade legal ao "
            "qual o estabelecimento permanente está relacionado. Exemplo: ABC "
            "P.E. (XYZ Ltda – China)"
        ),
    )

    TIN = fields.Char(
        string="Tax Identification Number",
        required=True,
        help=(
            "Tax Identification Number (TIN): Número de identificação fiscal "
            "utilizado pela administração tributária da jurisdição de "
            "residência para fins tributários da entidade integrante "
            "reportada. Caso a entidade integrante reportada possua esse "
            "número de identificação, a informação é de fornecimento "
            "obrigatório. Para entidades residentes no Brasil, deve ser "
            "informado o CNPJ. Observação: Caso não exista o número, deve ser "
            "incluída a expressão NOTIN."
        ),
    )

    JURISDICAO_TIN = fields.Char(
        string="Jurisdição de Emissão do TIN",
        help=(
            "Jurisdição de Emissão do TIN, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    NI = fields.Char(
        string="Número de Identificação",
        help=(
            "Número de Identificação (NI): O campo deve ser preenchido em caso"
            " de existência de outro número de identificação da entidade, como"
            " um número de registro ou um número de identificação global da "
            "entidade (“Global Entity Identification Number” – EIN)."
        ),
    )

    JURISDICAO_NI = fields.Char(
        string="Jurisdição de Emissão do NI",
        help=(
            "Jurisdição de Emissão do NI, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). "
            "Observação: Caso a jurisdição de emissão do NI não seja "
            "conhecida, o campo deve ser deixado em branco."
        ),
    )

    TIPO_NI = fields.Char(
        string="Tipo do NI: Deve ser descrito",
        help=(
            "Tipo do NI: Deve ser descrito, em texto livre, o tipo do número "
            "de identificação (NI) informado no W250.NI. Exemplo: número de "
            "identificação global da entidade (“Global Entity Identification "
            "Number” – EIN)."
        ),
    )

    TIP_END = fields.Char(
        string="O Tipo do Endereço: A entidade declarante deve indicar",
        required=True,
        help=(
            "O Tipo do Endereço: A entidade declarante deve indicar, dentre as"
            " opções disponíveis de preenchimento do campo, o tipo do endereço"
            " da entidade integrante que está sendo reportada, o qual deverá "
            "ser descrito no campo seguinte. ECD302 - Residencial OECD303 - "
            "Comercial"
        ),
    )

    ENDEREÇO = fields.Char(
        string="Deve ser fornecido",
        required=True,
        help=(
            "Deve ser fornecido, em texto livre, o endereço completo de "
            "residência permanente da entidade integrante reportada."
        ),
    )

    NUM_TEL = fields.Char(
        string="TEL",
        help=("Número de telefone completo da entidade integrante reportada."),
    )

    EMAIL = fields.Char(
        string="Endereço de e",
        help=(
            "Endereço de e-mail para contato com a entidade integrante " "reportada."
        ),
    )

    ATIV_1 = fields.Char(
        string="Pesquisa e Desenvolvimento: S",
        required=True,
        help="Pesquisa e Desenvolvimento: S - Sim N - Não",
    )

    ATIV_2 = fields.Char(
        string="Gestão de Propriedade Intelectual: S",
        required=True,
        help="Gestão de Propriedade Intelectual: S - Sim N - Não",
    )

    ATIV_3 = fields.Char(string="Compras: S - Sim N - Não", required=True)

    ATIV_4 = fields.Char(
        string="Manufatura ou Produção: S",
        required=True,
        help="Manufatura ou Produção: S - Sim N - Não",
    )

    ATIV_5 = fields.Char(
        string="Vendas",
        required=True,
        help="Vendas, Marketing ou Distribuição: S - Sim N - Não",
    )

    ATIV_6 = fields.Char(
        string="Serviços Administrativos",
        required=True,
        help=("Serviços Administrativos, de Gestão ou de Suporte: S - Sim N - " "Não"),
    )

    ATIV_7 = fields.Char(
        string="Prestação de Serviços a Partes Não Relacionadas: S",
        required=True,
        help=("Prestação de Serviços a Partes Não Relacionadas: S - Sim N - Não"),
    )

    ATIV_8 = fields.Char(
        string="Departamento Financeiro do Grupo: S",
        required=True,
        help="Departamento Financeiro do Grupo: S - Sim N - Não",
    )

    ATIV_9 = fields.Char(
        string="Serviços Financeiros Regulamentados: S",
        required=True,
        help="Serviços Financeiros Regulamentados: S - Sim N - Não",
    )

    ATIV_10 = fields.Char(string="Seguro: S - Sim N - Não", required=True)

    ATIV_11 = fields.Char(
        string="Gestão de Ações e Outros Instrumentos de Capital: S",
        required=True,
        help=("Gestão de Ações e Outros Instrumentos de Capital: S - Sim N - Não"),
    )

    ATIV_12 = fields.Char(string="Inativa: S - Sim N - Não", required=True)

    ATIV_13 = fields.Char(string="Outros: S - Sim N - Não", required=True)

    DESC_OUTROS = fields.Char(
        string="C Descrição da Atividade Econômica Desempenhada",
        help=(
            "C Descrição da Atividade Econômica Desempenhada, no caso de "
            "W250.ATIV_13 (Outros) igual a Sim: Campo em texto livre para que "
            "a entidade declarante descreva as atividades econômicas "
            "desempenhadas pela entidade integrante reportada que não estejam "
            "especificadas dentre as opções disponíveis nos campos anteriores."
            " onforme previsto na Instrução Normativa RFB nº 1.681/2016, "
            "artigo 9, § 3º, todas as informações em texto livre da Declaração"
            " País-a-País deverão ser fornecidas em um único idioma, a ser "
            "escolhido pela entidade declarante dentre as opções de português,"
            " inglês e espanhol."
        ),
    )

    OBSERVAÇÃO = fields.Char(
        string="C Outras Informações: Campo de utilização opcional",
        help=(
            "C Outras Informações: Campo de utilização opcional, para o "
            "fornecimento de informações adicionais sobre a entidade "
            "reportada. onforme previsto na Instrução Normativa RFB nº "
            "1.681/2016, artigo 9, § 3º, todas as informações em texto livre "
            "da Declaração País-a-País deverão ser fornecidas em um único "
            "idioma, a ser escolhido pela entidade declarante dentre as opções"
            " de português, inglês e espanhol."
        ),
    )

    reg_W250_ids_RegistroW200_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.W200",
        string="Declaração País a País",
        required=True,
    )


class RegistroW300(models.Model):
    "Observações Adicionais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.W300"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroW300"

    JURISDICAO = fields.Char(
        string="JURISDICAO",
        help=(
            "Indicação da jurisdição tributária a que se referem as "
            "observações adicionais. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_REC_NAO_REL = fields.Char(
        string="O campo Receitas Provenientes de Partes Não Relacionadas",
        help=(
            "O campo Receitas Provenientes de Partes Não Relacionadas "
            "(W200.VL_REC_NAO_REL) é tratado nestas observações adicionais? S "
            "- Sim N - Não"
        ),
    )

    IND_REC_REL = fields.Char(
        string="O campo Receitas Provenientes de Partes Relacionadas",
        help=(
            "O campo Receitas Provenientes de Partes Relacionadas "
            "(W200.VL_REC_REL) é tratado nestas observações adicionais? S - "
            "Sim N - Não"
        ),
    )

    IND_REC_TOTAL = fields.Char(
        string="O campo Receita Total",
        help=(
            "O campo Receita Total (W200.VL_REC_TOTAL) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_LUC_PREJ_ANTES_IR = fields.Char(
        string="O campo Lucro ou Prejuízo antes do IR",
        help=(
            "O campo Lucro ou Prejuízo antes do IR (W200.VL_LUC_PREJ_ANTES_IR)"
            " é tratado nestas observações adicionais? S - Sim N - Não"
        ),
    )

    IND_IR_PAGO = fields.Char(
        string="O campo Imposto de Renda Pago",
        help=(
            "O campo Imposto de Renda Pago (W200.VL_IR_PAGO) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_IR_DEVIDO = fields.Char(
        string="O campo Imposto de Renda Devido",
        help=(
            "O campo Imposto de Renda Devido (W200.VL_IR_DEVIDO) é tratado "
            "nestas observações adicionais? S - Sim N - Não"
        ),
    )

    IND_CAP_SOC = fields.Char(
        string="O campo Capital Social",
        help=(
            "O campo Capital Social (W200.VL_CAP_SOC) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_LUC_ACUM = fields.Char(
        string="O campo Lucros Acumulados",
        help=(
            "O campo Lucros Acumulados (W200.VL_LUC_ACUM) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_ATIV_TANG = fields.Char(
        string="O campo Ativos Tangíveis",
        help=(
            "O campo Ativos Tangíveis (W200.VL_ATIV_TANG) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    IND_NUM_EMP = fields.Char(
        string="O campo Número de Empregados",
        help=(
            "O campo Número de Empregados (W200.NUM_EMP) é tratado nestas "
            "observações adicionais? S - Sim N - Não"
        ),
    )

    OBSERVAÇÃO = fields.Char(string="Observações", required=True)

    FIM_OBSERVACAO = fields.Char(
        string="Indicador de fim das observações",
        required=True,
        help=("Indicador de fim das observações. Texto fixo contendo “W300FIM”."),
    )


class RegistroX280(models.Model):
    "Atividades Incentivadas - PJ em Geral"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X280"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX280"

    IND_ATIV = fields.Char(
        string="ATIV",
        required=True,
        help=(
            "Benefício fiscal: 00 – Não preenchido 01 – Isenção 02 – Redução "
            "de 100% 03 – Redução de 75% 04 – Redução de 70% 05 – Redução de "
            "50% 06 – Redução de 33,33% 07 – Redução de 25% 08 – Redução de "
            "12,5% 09 – Redução por Reinvestimento Selecionar no campo "
            "Benefício Fiscal o tipo de benefício (isenção ou redução do IRPJ)"
            " em relação a cada projeto aprovado no órgão competente, conforme"
            " lista disponível na Caixa de Combinação. E, para cada projeto "
            "aprovado selecionar no campo Projeto se o mesmo corresponde a "
            "Novo Empreendimento, Modernização, Ampliação, Diversificação, "
            "Manutenção de Empreendimento, Prouni, “Padis” ou “Outros”. I) "
            "Isenção: Este tipo de benefício deve ser selecionado pela pessoa "
            "jurídica: a) que tenha instalado, ampliado, modernizado ou "
            "diversificado empreendimento industrial ou agrícola, nas áreas de"
            " atuação da Sudam e da Sudene, até 31 de dezembro de 1997, nos "
            "termos da MP nº 1.740-32, de 1999, convalidada pela Lei nº 9.808,"
            " de 1999, art. 13; b) que tenham empreendimento industrial ou "
            "agrícola decorrente de projeto aprovado ou protocolizado até 14 "
            "de novembro de 1997 nas áreas de atuação da Sudam e da Sudene."
        ),
    )

    IND_CONCEDENTE = fields.Char(
        string="CONCEDENTE",
        required=True,
        help=(
            "A Orgão Concessor da Isenção/Redução: M: Sudam – Superintendência"
            " de Desenvolvimento da Amanzônia NE: Sudene – Superintendência de"
            " Desenvolvimento do Nordeste Ou: Outros"
        ),
    )

    IND_PROJ = fields.Char(
        string="PROJ",
        required=True,
        help=(
            "Projeto: 00 – Não preenchido 01 – Novo Empreendimento 02 – "
            "Modernização 03 – Ampliação 04 – Diversificação 05 – Manutenção "
            "do Empreendimento 06 – Prouni 07 - Padis 08 – Eventos Fifa 09 – "
            "Serviços da Fifa (SPE) 10 – Eventos CIO 11 – Serviços do CIO "
            "(SPE) 99 – Outros"
        ),
    )

    ATO_CONC = fields.Char(
        string="Ato Concessório",
        required=True,
        help=(
            "Ato Concessório - Natureza e Número: Informar neste campo o "
            "número do ato concessório do benefício fiscal. Atenção: No caso "
            "de projeto nas áreas de atuação da Sudam e da Sudene, informar "
            "neste campo o número do ato da unidade da RFB editado para "
            "reconhecimento do direito ao benefício fiscal. Observação: Caso o"
            " benefício fiscal não possua ato concessório, informar neste "
            "campo a palavra “Outros”."
        ),
    )

    VIG_INI = fields.Char(
        string="INI",
        required=True,
        help=(
            "Prazo de Vigência – Início Informar a data de início de fruição "
            "do benefício conforme consignada no Ato Concessório."
        ),
    )

    VIG_FIM = fields.Char(
        string="FIM",
        required=True,
        help=(
            "Prazo de Vigência – Fim Informar a data de encerramento do prazo "
            "de fruição do benefício conforme consignada no Ato Concessório."
        ),
    )

    CNPJ_INCENTIVO = fields.Integer(
        string="INCENTIVO",
        required=True,
        help=(
            "CNPJ do Estabelecimento com Isenção/Redução/Redução por "
            "Reinvestimento Informar o CNPJ completo do estabelecimento."
        ),
    )

    NCM_INCENTIVO = fields.Integer(
        string="INCENTIVO (NCM_INCENTIVO)",
        help=(
            "Código NCN do Produto Sujeito à Isenção/Redução/Redução por "
            "Reinvestimento."
        ),
    )

    REC_LIQ_INCENTIVO = fields.Monetary(
        string="INCENTIVO (REC_LIQ_INCENTIVO)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Receita Líquida Relativa à Isenção/Redução/Redução por "
            "Reinvestimento."
        ),
    )

    VL_INCENTIVO = fields.Monetary(
        string="Valor da Isenção/Redução/Redução por Reinvestimento",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )


class RegistroX291(models.Model):
    """Operações com o Exterior - Pessoa Vinculada/Interposta/País com
    Tributação Favorecida"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X291"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX291"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX292(models.Model):
    """Operações com o Exterior - Pessoa Não Vinculada/ Não Interposta/País sem
    Tributação Favorecida"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X292"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX292"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX300(models.Model):
    "Operações com o Exterior - Exportações (Entradas de Divisas)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X300"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX300"

    NUM_ORDEM = fields.Char(string="Número de Ordem das Operações", required=True)

    TIP_EXP = fields.Integer(
        string="Tipo das Exportações: 01",
        required=True,
        help=(
            "Tipo das Exportações: 01 - Bens 02 - Serviços 03 - Direitos 04 - "
            "Operações Financeiras 05 - Não Especificadas"
        ),
    )

    DESC_EXP = fields.Char(
        string="Descrição das Exportações: Agrupar os bens",
        help=(
            "Descrição das Exportações: Agrupar os bens, serviços ou direitos "
            "de mesma natureza, descrevendo cada grupo de modo a permitir a "
            "sua perfeita identificação e informando elementos como marca, "
            "tipo, modelo, espécie, etc. Atenção: no caso de bens considerados"
            " commodities, sujeitos à aplicação do método PECEX, deverá ser "
            "efetuado um Registro X300 para cada transação realizada, mesmo "
            "quando houver mais de uma transação envolvendo o mesmo bem. "
            "Obrigatório somente quando TIP_EXP = Bens, Serviços ou Direitos"
        ),
    )

    TOT_OPER = fields.Monetary(
        string="Total das Operações: EXPORTAÇÕES – Bens",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Total das Operações: EXPORTAÇÕES – Bens, Serviços ou Direito "
            "Informar, em reais, para cada operação incluída o valor "
            "correspondente ao total de transações da mesma natureza "
            "realizadas durante o ano-calendário. São consideradas transações "
            "de mesma natureza aquelas cujos bens, serviços ou direitos "
            "negociados apresentem as mesmas especificações no campo "
            "Descrição. Atenção: no caso de bens considerados commodities, "
            "sujeitos à aplicação do método PECEX, deve ser informado o valor "
            "de cada transação realizada, mesmo quando houver mais de uma "
            "transação envolvendo o mesmo bem. EXPORTAÇÕES – Não Especificadas"
            " Informar neste campo o somatório das operações não informadas "
            "nos campos referentes às maiores operações ou, se for o caso, a "
            "soma do valor excedente a pelo menos 80% do total das "
            "exportações, especificadas em X300.TIP_EXP como “01”, “02”, “03” "
            "ou “04”, efetuadas no ano-calendário. Obrigatório quando TIP_EXP "
            "= Bens, Serviços, Direitos ou Não Especificadas."
        ),
    )

    COD_NCM = fields.Integer(
        string="Código NCM constante do respectivo registro de exportação",
        help=(
            "Código NCM constante do respectivo registro de exportação, quando"
            " o tipo de operação for Bens. Obrigatório somente quando TIP_EXP "
            "= Bens"
        ),
    )

    QTDE = fields.Float(
        string="QTDE",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade: Informar neste campo a quantidade total dos bens da "
            "mesma natureza exportados (no caso de transações envolvendo "
            "commodities, o total de bens exportados em cada transação "
            "realizada). Obrigatório somente quando TIP_EXP = Bens"
        ),
    )

    UNI_MED = fields.Char(
        string="MED",
        help=(
            "Unidade de Medida: Obrigatório somente quando TIP_EXP = Bens "
            "Conforme tabela de unidades de medida do Sped. A pessoa jurídica "
            "deve selecionar dentre as opções aquela que corresponde à unidade"
            " de medida comercial dos bens exportados, tais como: dúzia, "
            "grama, litro, metro etc."
        ),
    )

    IND_OPER = fields.Char(
        string="Indicador de Operação Sujeita a Arbitramento S",
        help=(
            "Indicador de Operação Sujeita a Arbitramento S - Sim N - Não "
            "Obrigatório somente quando TIP_EXP = Bens, Serviços ou Direitos O"
            " campo deve ser assinalado caso o preço médio de venda do bem, "
            "serviço ou direito das exportações efetuadas durante o respectivo"
            " período de apuração da base de cálculo do imposto de renda seja "
            "inferior a noventa por cento do preço médio praticado na venda "
            "dos bens, serviços ou direitos, idênticos ou similares, no "
            "mercado brasileiro, durante o mesmo período, em condições de "
            "pagamento semelhantes (art. 20 da Instrução Normativa RFB nº "
            "1.312, de 28 de dezembro de 2012). Atenção: Caso a pessoa "
            "jurídica não efetue operações de venda no mercado interno, a "
            "determinação dos preços médios é efetuada com dados de outras "
            "empresas que pratiquem a venda de bens, serviços ou direitos, "
            "idênticos ou similares, no mercado brasileiro (§ 2º, art. 20 da "
            "Instrução Normativa RFB nº 1.312, de 28 de dezembro de 2012)."
        ),
    )

    TIP_MET = fields.Char(
        string="MET",
        help=(
            "A pessoa jurídica deve assinalar o método utilizado na "
            "determinação do Preço Parâmetro: PVEX - Método do Preço de Venda "
            "nas Exportações (inciso I do § 3º do art. 19 da Lei nº 9.430, de "
            "1996); PVA - Método do Preço de Venda por Atacado no País de "
            "Destino, Diminuído do Lucro (inciso II do § 3º do art. 19 da Lei "
            "nº 9.430, de 1996); PVV - Método do Preço de Venda a Varejo no "
            "País de Destino, Diminuído do Lucro (inciso III do § 3º do art. "
            "19 da Lei nº 9.430, de 1996); CAP - Método do Custo de Aquisição "
            "ou de Produção mais Tributos e Lucro (inciso IV do § 3º da Lei nº"
            " 9.430, de 1996). PECEX - Preço sob Cotação na Exportação (Art. "
            "19-A da Lei nº 9.430, de 1996, e art. 34 da IN RFB nº 1.312, de "
            "28 de dezembro de 2012)."
        ),
    )

    OPER_PAR = fields.Char(
        string="PAR",
        help=(
            "Operações Parâmetro: Informar que tipo de operações foram "
            "selecionadas para a apuração do preço parâmetro, dentre as "
            "seguintes opções (art. 30 da Instrução Normativa RFB nº "
            "1.312/2012): A – Operações realizadas entre a própria pessoa "
            "jurídica e outros clientes não vinculados. B – Operações "
            "realizadas entre outro exportador nacional e clientes não "
            "vinculados."
        ),
    )

    DESC_BENS_PAR = fields.Char(
        string="Descrição dos bens",
        help=(
            "Descrição dos bens, serviços ou direitos idênticos ou similares "
            "selecionados para o cálculo do preço parâmetro nas operações de "
            "exportação utilizadas e informadas no campo X300.OPER_PAR."
        ),
    )

    ID_PARTE_PAR = fields.Char(
        string="PAR (ID_PARTE_PAR)",
        help=(
            "Identificação das partes envolvidas nas operações de exportação "
            "utilizadas e informadas no campo X300.OPER_PAR (informar nome, "
            "razão social e número de identificação)."
        ),
    )

    TIP_PAR = fields.Char(
        string="PAR (TIP_PAR)",
        help=(
            "Tipo dos Itens para o Cálculo do Preço Parâmetro: Informar o tipo"
            " do bem, serviço ou direito utilizado para fins de apuração do "
            "preço parâmetro, dentre as seguintes opções: I – Idêntico S – "
            "Similar"
        ),
    )

    DAT_UTIL = fields.Char(
        string="UTIL",
        help=(
            "T A Data Utilizada no Cálculo do Preço Parâmetro: Data da cotação"
            " utilizada para o cálculo do preço parâmetro, podendo ser a data "
            "da transação (conforme dispõe o § 2º-A, art 34, da Instrução "
            "Normativa RFB nº 1312/2012). Escolher entre as seguintes opções: "
            "– Data da Transação O - Data da Transação (art. 34, §17) E – Data"
            " do Embarque Caso escolhida a opção T - Data da Transação, deverá"
            " ser informado no campo 18 X300.DAT_TRANS a data em que o preço "
            "foi negociado, conforme art. 34, §16 da Instrução Normativa RFB "
            "1.312/2012. opção O - Data da Transação (art. 34, §17) deve ser "
            "escolhida caso o contribuinte utilize cotações ou índices "
            "relativos a uma média de dias, conforme dispõe o art. 34, §17 da "
            "Instrução Normativa RFB 1.312/2012."
        ),
    )

    CRIT_PAR = fields.Char(
        string="PAR (CRIT_PAR)",
        help=(
            "Critérios para Determinação do Preço Parâmetro: Descrever a "
            "metodologia e os critérios utilizados para fixação do preço, "
            "relatando, inclusive, a existência de diferenças entre a data em "
            "que a operação foi contratada e aquela em que o preço foi "
            "estabelecido. Na hipótese em que o preço seja fixado com base em "
            "cotações ou índices relativos a uma média de dias, descrever o "
            "critério utilizado."
        ),
    )

    DAT_TRANS = fields.Integer(
        string="TRANS",
        help=(
            "Data da Transação: Informar a data em que o preço foi negociado "
            "(conforme art. 34, §16 da Instrução Normativa RFB 1.312/2012)."
        ),
    )

    DAT_EMB = fields.Integer(
        string="EMB",
        help=(
            "Data do Embarque: Informar a data do embarque da commodity " "negociada."
        ),
    )

    ID_FONT_COT = fields.Integer(
        string="COT",
        help=(
            "1 Fonte da Cotação: Identificação da fonte da cotação utilizada "
            "para a o cálculo do preço parâmetro informado em X300.VL_PAR "
            "(indicação da bolsa de mercadorias e futuros utilizada, dentre as"
            " listadas no Anexo II da Instrução Normativa RFB nº 1.312/2012; "
            "ou da instituição de pesquisa setorial, dentre as listadas no "
            "Anexo III da referida Instrução Normativa; ou da utilização de "
            "preços definidos por agências ou órgãos reguladores, conforme "
            "art. 36, inciso II da Instrução Normativa RFB nº 1.312/2012). 01 "
            "ChicagoBoard of Trade (CBOT) - Chicago - EUA; 102 Chicago "
            "Mercantile Exchange (CME) - Chicago - EUA; 103 New York "
            "Mercantile Exchange (NYMEX) - Nova York - EUA; 104 Commodity "
            "Exchange (COMEX) - Nova York - EUA; 105 Intercontinental Exchange"
            " (ICE US) - Atlanta - EUA; 106 Bolsa de Mercadorias & Futuros "
            "(BM&F) - São Paulo - Brasil; 107 Life NYSE Euronext (LIFFE) - "
            "Londres - Reino Unido; 108 London Metal Exchange (LME) - Londres "
            "- Reino Unido; 109 Intercontinental Exchange (ICE Europe) - "
            "Londres - Reino Unido; 110 Tokio Commodity Exchange (TOCOM) - "
            "Tóquio - Japão; 111 Tokio Grain Exchange (TGE) - Tóquio - Japão; "
            "112 Singapore Commodity Exchange (SICOM) - Cidade de Cingapura - "
            "Cingapura; 113 Hong Kong Commodity Exchange (HKE) - Hong Kong – "
            "China; 114 Multi Commodity Exchange (MCX) - Bombain - Índia; 115 "
            "National Commodity & Derivatives Exchange Limited (NCDEX) - "
            "Bombain - Índia; 116 Agricultural Futures Exchange of Thailand "
            "(AFET) - Bangkok - Tailândia; 117 Australian Securities Exchange "
            "(ASX) - Sidney - Austrália; 118 JSE Safex APD (SAFEX) – "
            "Johannesburg - África do Sul; 119 Korea Exchange (KRX) - Busan - "
            "Coréia do Sul; 120 China Beijing International Mining Exchange, "
            "(CBMX);"
        ),
    )

    AJ_PAR = fields.Char(
        string="PAR (AJ_PAR)",
        help=(
            "Ajustes ao Preço Parâmetro: Informar se foram realizados ajustes "
            "ao preço parâmetro, conforme disposto nos arts. 22 a 25 e no art."
            " 34, §§7º e 10 da Instrução Normativa RFB nº 1.312/2012, a "
            "depender do método aplicado. S = Sim N = Não"
        ),
    )

    VL_PAR = fields.Monetary(
        string="PAR (VL_PAR)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Preço Parâmetro: A pessoa jurídica deve informar neste campo o "
            "preço parâmetro médio ponderado de vendas nas exportações dos "
            "bens, serviços ou direitos, apurado no ano- calendário conforme "
            "os métodos estabelecidos nos arts. 30 a 34 da Instrução Normativa"
            " RFB nº 1.312, de 28 de dezembro de 2012. Atenção: nos casos de "
            "utilização do método PECEX, o valor a ser informado é o preço "
            "parâmetro apurado para cada transação realizada. Obrigatório "
            "somente quando TIP_EXP = Bens, Serviços ou Direitos"
        ),
    )

    VL_PRAT = fields.Monetary(
        string="PRAT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Preço Praticado: A pessoa jurídica deve informar neste campo o "
            "preço praticado médio ponderado de venda nas exportações dos "
            "bens, serviços ou direitos, praticado no ano- calendário. "
            "Atenção: nos casos de utilização do método PECEX, o valor a ser "
            "informado é o preço praticado em cada transação realizada. "
            "Obrigatório somente quando TIP_EXP = Bens, Serviços ou Direitos."
        ),
    )

    QTDE_AJ = fields.Float(
        string="AJ",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "O Quantidade Ajustada no Período de Apuração: Informar neste "
            "campo a quantidade de itens da mesma natureza exportados para "
            "pessoas vinculadas que resultaram em ajustes de preços de "
            "transferência adicionados à base de cálculo do IRPJ e da CSLL no "
            "período de apuração. Ou seja, a quantidade de bens ou insumos "
            "para os quais se verificou a necessidade de ajuste de preços de "
            "transferência após a aplicação de um dos métodos previstos na "
            "legislação para o cálculo do preço parâmetro e sua comparação com"
            " o preço praticado. brigatório somente quando TIP_EXP = Bens"
        ),
    )

    VL_AJ = fields.Monetary(
        string="E E O E Valor do Ajuste a Ser Adicionado: Valor do ajuste",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "E E O E Valor do Ajuste a Ser Adicionado: Valor do ajuste, "
            "determinado conforme os métodos da IN RFB nº 1.312/2012, a ser "
            "adicionado à base de cálculo do IRPJ e da CSLL. XPORTAÇÕES – "
            "Bens, Serviços ou Direitos A pessoa jurídica deverá indicar o "
            "valor do ajuste, determinado em conformidade com os arts. 26 a 29"
            " da Instrução Normativa RFB nº 1.312, de 28 de dezembro de 2012. "
            "A parcela das receitas de exportações provenientes de pessoas "
            "vinculadas, calculada com base nos métodos dispostos da IN "
            "1.312/12, que exceder os valores já apropriados na escrituração "
            "da empresa deve ser adicionada ao lucro líquido, para "
            "determinação do lucro real e da base de cálculo da contribuição "
            "social sobre o lucro líquido, bem como ser computada na "
            "determinação do lucro presumido ou arbitrado. XPORTAÇÕES – "
            "Financeiras A pessoa jurídica deve indicar o valor do ajuste, "
            "determinado em conformidade com o art. 38- A da Instrução "
            "Normativa RFB nº 1.312, de 28 de dezembro de 2012. s ajustes "
            "devem ser oferecidos à tributação de acordo com o regime fiscal a"
            " que se submete cada pessoa jurídica. XPORTAÇÕES – Não "
            "Especificadas A pessoa jurídica deve indicar o somatório dos "
            "ajustes efetuados, referente ao total das transações consolidadas"
            " no campo Total da Operação, agrupadas e informadas como “Não "
            "Especificadas” no campo ”Tipo das Exportações ."
        ),
    )

    VALOR_COT = fields.Monetary(
        string="COT (VALOR_COT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "V alor da Cotação: Valor médio diário da cotação do bem ou "
            "direito exportado (art. 34 da Instrução Normativa RFB nº "
            "1.312/2012) utilizada no cálculo do preço parâmetro, sem a "
            "inclusão de eventuais ajustes efetuados, em reais, e na mesma "
            "unidade de medida utilizada no preço praticado."
        ),
    )

    NUM_DEC_EXP = fields.Char(
        string="Número da Declaração Única de Exportação",
        help="Número da Declaração Única de Exportação (DUE).",
    )

    DAT_ENT_PREV = fields.Integer(string="Data da Entrega Prevista")

    VL_JUR = fields.Monetary(
        string="JUR",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Juros: Informar em reais o valor total dos juros auferidos em "
            "operações financeiras durante o ano- calendário. Esse valor total"
            " deve ser consolidado consoante os códigos de natureza-fato de "
            "operação constantes da Consolidação das Normas Cambiais (CNC), "
            "editada pelo Banco Central do Brasil. Atenção: A pessoa jurídica "
            "financeira e seguradora deve informar neste campo o montante "
            "total dos juros auferidos em operações financeiras com pessoas "
            "vinculadas, inclusive por intermédio de interposta pessoa ou de "
            "pessoas residentes ou domiciliadas em países com tributação "
            "favorecida ou cuja legislação interna oponha sigilo, ou, a partir"
            " de 1º de janeiro de 2009, que gozem, nos termos da legislação, "
            "de regime fiscal privilegiado. Obrigatório apenas para "
            "TIP_EXP=Operações Financeiras."
        ),
    )

    VL_JUR_MIN = fields.Float(
        string="MIN",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Taxa de Juros Mínima: Informar neste campo a menor taxa praticada"
            " em operação financeira, realizada no ano-calendário. Obrigatório"
            " apenas para TIP_EXP=Operações Financeiras"
        ),
    )

    VL_JUR_MAX = fields.Float(
        string="MAX",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Taxa de Juros Máxima: Informar neste campo a maior taxa praticada"
            " em operação financeira, realizada no ano-calendário. Obrigatório"
            " apenas para TIP_EXP=Operações Financeiras"
        ),
    )

    COD_CNC = fields.Integer(
        string="Código CNC",
        help=(
            "Código CNC, conforme tabela do Sped (Disponibilizada no programa "
            "da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas). A pessoa jurídica deve "
            "informar, dentre os códigos de natureza-fato transcritos da "
            "rubrica Rendas de Capitais do Capítulo 1, Título 14 ou Capítulo "
            "2, Título 22 da Consolidação das Normas Cambiais (CNC), aquele "
            "sob o qual se classificariam os juros auferidos para fins da "
            "legislação cambial - na hipótese de ingresso no País. Atenção: No"
            " caso de recursos não ingressados no País, o enquadramento se "
            "faz, consoante apuração contábil, como se ingressados fossem. "
            "Tendo ocorrido a efetiva entrada, esses valores são de igual modo"
            " classificados, independentemente do instrumento de formalização "
            "cambial utilizado no Banco Central do Brasil: contrato de câmbio "
            "(moeda estrangeira) e/ou transferência internacional em moeda "
            "nacional."
        ),
    )

    TIP_MOEDA = fields.Char(
        string="Moeda",
        help=(
            "Moeda , conforme tabela do Sped (Disponibilizada no programa da "
            "ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    reg_X305_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X305",
        "reg_X305_ids_RegistroX300_id",
        string="Tipos de Ajustes do Preço Parâmetro da Exportação",
    )

    reg_X310_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X310",
        "reg_X310_ids_RegistroX300_id",
        string="Operações com o Exterior",
        help="Operações com o Exterior - Contratantes das Exportações",
    )


class RegistroX305(models.Model):
    "Tipos de Ajustes do Preço Parâmetro da Exportação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X305"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX305"

    TIP_AJUST = fields.Integer(
        string="Tipo de ajustes do preço parâmetro que foram realizados: 1",
        required=True,
        help=(
            "Tipo de ajustes do preço parâmetro que foram realizados: 1 - "
            "Prêmio (art. 34, §7º) 2 - Prazo para pagamento (art. 34, §10, I) "
            "3 - Quantidades negociadas (art. 34, §10, II) 4 - Influências "
            "climáticas nas características do bem exportado (art. 34, §10, "
            "III) 5 - Custos de intermediação - Custos de intermediação, nas "
            "operações de compra e venda praticadas pelas pessoas jurídicas "
            "não vinculadas, assim entendidos os custos de intermediação "
            "cobrados pelas bolsas de mercadorias e futuros internacionalmente"
            " reconhecidas (art. 34, § 10, IV). 6 - Acondicionamento (art. 34,"
            " §10, V) 7 - Frete e seguro (art. 34, §10, VI) 8 - Custos de "
            "desembarque no porto, de transporte interno, de armazenagem e de "
            "desembaraço aduaneiro, incluídos impostos e taxas incidentes na "
            "importação (art. 34, §10, VII) 9 - Prazo para pagamento (art. 22,"
            " §1º, I) 10 - Quantidades negociadas (art. 22, §1º, II) 11 - "
            "Garantia de funcionamento do bem ou da aplicabilidade do serviço "
            "ou direito (art. 22, §1º, III) 12 - Promoção do bem, serviço ou "
            "direito (art. 22, §1º, IV) 13 - Custos de fiscalização de "
            "qualidade, de padrão dos serviços e das condições de higiene "
            "(art. 22, §1º, V) 14 - Custos de intermediação (art. 22, §1º, VI)"
            " 15 - Acondicionamento (art. 22, §1º, VII) 16 - Frete e seguro "
            "(art. 22, §1º, VIII) 17 - Riscos de crédito (art. 22, §1º, IX) 18"
            " - Custos de desembarque no porto, de transporte interno, de "
            "armazenagem e de desembaraço aduaneiro, incluídos impostos e "
            "taxas incidentes na importação (art. 22, §1º, X) 19 - "
            "Similaridade (art. 24)"
        ),
    )

    DESC_OUT_AJ = fields.Char(
        string="Descrição de Outros Ajustes",
        help=(
            "Descrição de Outros Ajustes (X305.TIP_AJUST = “99”). Fornecer "
            "informações adicionais relativas aos ajustes efetuados e aos "
            "critérios utilizados."
        ),
    )

    VALOR = fields.Char(string="Valor do Ajuste em Reais", required=True)

    FONT_AJU = fields.Char(
        string="AJU",
        required=True,
        help=(
            "Descrever a fonte que serviu para embasar o ajuste efetuado ao "
            "preço parâmetro. Por exemplo, o ajuste do prêmio foi realizado "
            "com base no relatório divulgado pela instituição XYZ."
        ),
    )

    reg_X305_ids_RegistroX300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X300",
        string="Operações com o Exterior",
        required=True,
        help="Operações com o Exterior - Exportações (Entradas de Divisas)",
    )


class RegistroX310(models.Model):
    "Operações com o Exterior - Contratantes das Exportações"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X310"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX310"

    NOME = fields.Char(
        string="NOME",
        required=True,
        help=(
            "Nome: Nome ou razão social da pessoa física ou jurídica "
            "contratante da transação, que seja domiciliada no exterior."
        ),
    )

    PAIS = fields.Char(
        string="País: País onde a pessoa física ou jurídica contratante",
        required=True,
        help=(
            "País: País onde a pessoa física ou jurídica contratante, no "
            "exterior, é domiciliada. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_OPER = fields.Monetary(
        string="OPER",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Operação: Valores das transações que compõem cada "
            "operação inserida no Registro X300, agrupados por pessoa física "
            "ou jurídica contratante, desde que destinadas ao mesmo país."
        ),
    )

    COND_PES = fields.Integer(
        string="Condição da Pessoa Envolvida na Operação: 01",
        required=True,
        help=(
            "Condição da Pessoa Envolvida na Operação: 01 - Considerada "
            "Vinculada. 02 - Interposta Pessoa - Transação com Vinculada. 03 -"
            " Residente/Domiciliada em País com Tributação Favorecida ou, "
            "ainda, a partir de 1º de janeiro de 2009, que goze, nos termos da"
            " legislação, de regime fiscal privilegiado. 04 – Considerada "
            "vinculada e Residente/Domiciliada em País com Tributação "
            "Favorecida ou que goze de regime fiscal privilegiado."
        ),
    )

    reg_X310_ids_RegistroX300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X300",
        string="Operações com o Exterior",
        required=True,
        help="Operações com o Exterior - Exportações (Entradas de Divisas)",
    )


class RegistroX320(models.Model):
    "Operações com o Exterior - Importações (Saídas de Divisas)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X320"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX320"

    NUM_ORD = fields.Char(
        string="ORD",
        required=True,
        help=("Número de Ordem: Número de ordem para identificar a operação."),
    )

    TIP_IMP = fields.Integer(
        string="Tipo das Importações: 01",
        required=True,
        help=(
            "Tipo das Importações: 01- Bens 02- Serviços 03- Direitos 04- "
            "Operações Financeiras 05- Não Especificadas"
        ),
    )

    DESC_IMP = fields.Char(
        string="Descrição: Agrupar os bens",
        help=(
            "Descrição: Agrupar os bens, serviços ou direitos de mesma "
            "natureza, descrevendo cada grupo de modo a permitir a sua "
            "perfeita identificação, informando elementos como marca, tipo, "
            "modelo, espécie, etc."
        ),
    )

    TOT_OPER = fields.Monetary(
        string="A I O Total da Operação: IMPORTAÇÕES – Bens",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "A I O Total da Operação: IMPORTAÇÕES – Bens, Serviços ou "
            "Direitos: Informar, para cada operação incluída, o valor em reais"
            " correspondente ao total de transações de mesma natureza "
            "realizadas durante o ano-calendário. São consideradas transações "
            "de mesma natureza aquelas cujos bens, serviços ou direitos "
            "negociados apresentam as mesmas especificações no campo "
            "Descrição. tenção: no caso de bens considerados commodities, "
            "sujeitos à aplicação do método PCI, deve ser informado o valor de"
            " cada transação realizada, mesmo quando houver mais de uma "
            "transação envolvendo o mesmo bem. IMPORTAÇÕES – Não "
            "Especificadas: nformar neste campo o somatório das operações não "
            "informadas nos campos referentes às maiores operações ou, se for "
            "o caso, a soma do valor excedente a pelo menos 80% do total das "
            "importações, especificadas em X320.TIP_IMP como “01”, “02”, “03” "
            "ou “04”, efetuadas no ano-calendário. brigatório quando TIP_IMP ="
            " Bens, Serviços, Direitos ou Não Especificadas."
        ),
    )

    COD_NCM = fields.Integer(
        string="NCM",
        help=(
            "Código NCM: Informar o código NCM constante do respectivo "
            "registro de importação, quando o tipo de operação for Bens. "
            "Obrigatório somente quando TIP_IMP = Bens"
        ),
    )

    QTDE = fields.Monetary(
        string="QTDE",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Quantidade: Informar neste campo a quantidade total dos bens da "
            "mesma natureza importados (no caso de transações envolvendo "
            "commodities, o total de bens importados em cada transação "
            "realizada). Obrigatório somente quando TIP_IMP = Bens"
        ),
    )

    UNI_MED = fields.Char(
        string="MED",
        help=(
            "O Unidade de Medida: brigatório somente quando TIP_IMP = Bens 01 "
            "– Bilhão de Unidade Internacional 02 – Dúzia 03 – Grama 04 – "
            "Litro 05 – Megawatt Hora 06 – Metro 07 – Metro Cúbico 08 – Metro "
            "Quadrado 09 – Mil Unidades"
        ),
    )

    TIP_MET = fields.Char(
        string="A Método: PIC00 – Preços Independentes Comparados PRL20",
        help=(
            "A Método: PIC00 – Preços Independentes Comparados PRL20 - Preço "
            "de Revenda Menos Lucro 20% PRL30 - Preço de Revenda Menos Lucro "
            "30% PRL40 - Preço de Revenda Menos Lucro 40% CPL00 – Custo de "
            "Produção Mais Lucro PCI00 – Preço sob Cotação na Importação "
            "pessoa jurídica deve assinalar o método utilizado na determinação"
            " do Preço Parâmetro: PIC - Método dos Preços Independentes "
            "Comparados (inciso I do art. 18 da Lei nº 9.430, de 1996 e IN RFB"
            " nº 1.312, de 28 de dezembro de 2012, arts. 8 a 11); PRL 20% "
            "Método do Preço de Revenda menos Lucro (inciso III do § 12 do "
            "art. 18 da Lei nº 9.430, de 1996, e IN RFB nº 1.312, de 28 de "
            "dezembro de 2012, art. 12, § 10) PRL 30% Método do Preço de "
            "Revenda menos Lucro Revenda (inciso II do § 12 do art. 18 da Lei "
            "nº 9.430, de 1996 e IN RFB nº 1.312, de 28 de dezembro de 2012, "
            "art. 12, § 10); PRL 40% Método do Preço de Revenda menos Lucro "
            "Revenda (inciso I do § 12 do art. 18 da Lei nº 9.430, de 1996 e "
            "IN RFB nº 1.312, de 28 de dezembro de 2012, art. 12, § 10); CPL -"
            " Método do Custo de Produção mais Lucro (inciso III do art. 18 da"
            " Lei nº 9.430, de 1996, e IN RFB nº 1.312, de 28 de dezembro de "
            "2012, art. 15). PCI - Preço sob Cotação na Importação (art. 18-A "
            "da Lei nº 9.430, de 1996, e art. 16 da IN RFB nº 1.312, de 2012, "
            "alterado pelo art. 1º da IN RFB nº 1.395, de 2013)."
        ),
    )

    COD_INV = fields.Char(
        string="INV",
        help=(
            "Código de Inventário do Insumo ou Produto Importado: Informar o "
            "código de inventário do insumo ou produto importado, . Caso um "
            "determinado insumo ou produto tenha mais de um código, informar o"
            " mais relevante em termos quantitativos."
        ),
    )

    UTIL_INS_PROD = fields.Char(
        string="PROD",
        help=(
            "Utilização do Insumo ou Produto Importado: Descrição da "
            "utilização do insumo ou produto importado: informar a destinação "
            "do insumo ou produto importado, dentre as seguintes opções: RV – "
            "Revenda IN – Industrialização"
        ),
    )

    OPER_PAR = fields.Char(
        string="PAR",
        help=(
            "Operações para a Apuração do Preço Parâmetro: Informar que tipo "
            "de operações foram selecionadas para a apuração do preço "
            "parâmetro, dentre as seguintes opções (art. 8º, parágrafo único, "
            "da IN 1.312/2012): E – operações realizadas entre a mesma pessoa "
            "jurídica exportadora e pessoas jurídicas não vinculadas. C – "
            "operações realizadas entre o próprio contribuinte e pessoas "
            "jurídicas não vinculadas. T – operações realizadas entre "
            "terceiros não vinculados entre si."
        ),
    )

    DESC_PAR = fields.Char(
        string="PAR (DESC_PAR)",
        help=(
            "Itens Selecionados para a Apuração do Preço Parâmetro: Descrição "
            "dos bens, serviços ou direitos idênticos ou similares "
            "selecionados para o cálculo do preço parâmetro nas operações "
            "utilizadas para a apuração do preço parâmetro (informar dados "
            "como nome, razão social, número de identificação e país de "
            "residência)."
        ),
    )

    ID_PARTE_PAR = fields.Char(
        string="PAR (ID_PARTE_PAR)",
        help=(
            "Identificação das Partes Envolvidas: Identificação das partes "
            "envolvidas nas operações de exportação utilizadas e informadas no"
            " campo X320.OPER_PAR (informar nome, razão social e número de "
            "identificação)."
        ),
    )

    TIP_PAR = fields.Char(
        string="PAR (TIP_PAR)",
        help=(
            "Tipo dos Itens para o Cálculo do Preço Parâmetro: Informar o tipo"
            " do bem, serviço ou direito utilizado para fins de apuração do "
            "preço parâmetro, dentre as seguintes opções: I – Idêntico S – "
            "Similar"
        ),
    )

    DAT_UTIL = fields.Char(
        string="UTIL",
        help=(
            "T C A Data Utilizada no Cálculo do Preço Parâmetro: Data da "
            "cotação utilizada para o cálculo do preço parâmetro, podendo ser "
            "a data da transação (conforme dispõe o § 2º-A, art 16, da "
            "Instrução Normativa RFB nº 1312/2012). Escolher entre as "
            "seguintes opções: – Data da Transação - preço negociado (art. 16,"
            " §15) O - Data da Transação - média de dias evento (art. 16, §16)"
            " E – Data do Embarque aso escolhida a opção T - Data da "
            "Transação, deverá ser informado no campo 18 DAT_TRANS a data em "
            "que o preço foi negociado, conforme art. 16, §15 da Instrução "
            "Normativa RFB nº 1.312/2012. opção O - Data da Transação (art. "
            "16, §16) deve ser escolhida caso o contribuinte utilize"
        ),
    )

    CRIT_PAR = fields.Char(
        string="PAR (CRIT_PAR)",
        help=(
            "Critérios para Determinação do Preço Parâmetro: Descrever a "
            "metodologia e os critérios utilizados para fixação do preço, "
            "relatando, inclusive, a existência de diferenças entre a data em "
            "que a operação foi contratada e aquela em que o preço foi "
            "estabelecido."
        ),
    )

    DAT_TRANS = fields.Integer(
        string="TRANS",
        help=(
            "Data da Transação: Informar a data em que o preço foi negociado "
            "(conforme art.16, §15 da Instrução Normativa RFB nº 1.312/2012)."
        ),
    )

    DAT_DUIMP = fields.Integer(
        string="Data do registro da Declaração Única de Importação",
        help=(
            "Data do registro da Declaração Única de Importação (DUIMP): "
            "Informar a data do registro da DUIMP da commodity negociada."
        ),
    )

    ID_FONT_COT = fields.Integer(
        string="COT",
        help=(
            "1 Fonte da Cotação: Descrição da fonte utilizada para a busca do "
            "preço parâmetro informado em VL_PAR (indicação da bolsa de "
            "mercadorias e futuros utilizada, dentre as listadas no Anexo II "
            "da Instrução Normativa RFB nº 1.312/2012, ou da instituição de "
            "pesquisa setorial, dentre as listadas no Anexo III da referida "
            "Instrução Normativa). 01 ChicagoBoard of Trade (CBOT) - Chicago -"
            " EUA; 102 Chicago Mercantile Exchange (CME) - Chicago - EUA; 103 "
            "New York Mercantile Exchange (NYMEX) - Nova York - EUA; 104 "
            "Commodity Exchange (COMEX) - Nova York - EUA; 105 "
            "Intercontinental Exchange (ICE US) - Atlanta - EUA; 106 Bolsa de "
            "Mercadorias & Futuros (BM&F) - São Paulo - Brasil; 107 Life NYSE "
            "Euronext (LIFFE) - Londres - Reino Unido; 108 London Metal "
            "Exchange (LME) - Londres - Reino Unido; 109 Intercontinental "
            "Exchange (ICE Europe) - Londres - Reino Unido; 110 Tokio "
            "Commodity Exchange (TOCOM) - Tóquio - Japão; 111 Tokio Grain "
            "Exchange (TGE) - Tóquio - Japão; 112 Singapore Commodity Exchange"
            " (SICOM) - Cidade de Cingapura - Cingapura; 113 Hong Kong "
            "Commodity Exchange (HKE) - Hong Kong – China; 114 Multi Commodity"
            " Exchange (MCX) - Bombain - Índia; 115 National Commodity & "
            "Derivatives Exchange Limited (NCDEX) - Bombain - Índia; 116 "
            "Agricultural Futures Exchange of Thailand (AFET) - Bangkok - "
            "Tailândia; 117 Australian Securities Exchange (ASX) - Sidney - "
            "Austrália; 118 JSE Safex APD (SAFEX) – Johannesburg - África do "
            "Sul; 119 Korea Exchange (KRX) - Busan - Coréia do Sul; 120 China "
            "Beijing International Mining Exchange, (CBMX); 121 GlobalORE; 122"
            " London Bullion Market Association (LBMA); 123 Beijing Iron Ore "
            "Trading Center Corporation (COREX). (Incluído pela IN RFB nº "
            "1.870/2019) 201 PLATTS; 202 ARGUS; 203 CMA; 204 ESALQ;"
        ),
    )

    AJ_PAR = fields.Char(
        string="PAR (AJ_PAR)",
        help=(
            "S Ajustes do Preço Parâmetro: Ajustes do preço parâmetro: "
            "informar se foram realizados ajustes ao preço parâmetro, conforme"
            " disposto nos art. 9º; 10; 11, §1º; 15, §7; e 16, §9º da "
            "Instrução Normativa RFB nº 1.312/2012, a depender do método "
            "aplicado. – Sim N - Não"
        ),
    )

    VL_PAR = fields.Monetary(
        string="PAR (VL_PAR)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Preço Parâmetro: A pessoa jurídica deve informar neste campo o "
            "preço parâmetro médio ponderado de aquisição nas importações dos "
            "bens, serviços ou direitos, apurado no ano- calendário conforme "
            "um os métodos estabelecidos nos arts. 8º a 19 da Instrução "
            "Normativa RFB nº 1.312, de 28 de dezembro de 2012. Atenção: nos "
            "casos de utilização do método PCI, o valor a ser informado é o "
            "preço parâmetro apurado para cada transação realizada. "
            "Obrigatório somente quando TIP_IMP = Bens, Serviços ou Direitos"
        ),
    )

    VL_PRAT = fields.Monetary(
        string="PRAT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Preço Praticado: A pessoa jurídica deve informar neste campo o "
            "preço praticado médio ponderado de aquisição nas importações dos "
            "bens, serviços ou direitos, praticado no ano- calendário. "
            "Atenção: nos casos de utilização do método PCI, o valor a ser "
            "informado é o preço praticado apurado para cada transação "
            "realizada. Obrigatório somente quando TIP_IMP = Bens, Serviços ou"
            " Direitos"
        ),
    )

    QTDE_AJ = fields.Float(
        string="AJ",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade Ajustada no Período de Apuração: Informar neste campo "
            "a quantidade de itens da mesma natureza importados de pessoas "
            "vinculadas que resultaram em ajustes de preços de transferência "
            "adicionados à base de cálculo do IRPJ e da CSLL no período de "
            "apuração. Ou seja, a quantidade de bens ou insumos para os quais "
            "se verificou a necessidade de ajuste de preços de transferência "
            "após a aplicação de um dos métodos previstos na legislação para o"
            " cálculo do preço parâmetro e sua comparação com o preço "
            "praticado."
        ),
    )

    VL_AJ = fields.Monetary(
        string="Valor do Ajuste a Ser Adicionado: Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Ajuste a Ser Adicionado: Valor do ajuste, determinado "
            "conforme os métodos da IN RFB nº 1.312/2012. a ser adicionado à "
            "base de cálculo do IRPJ e da CSLL. A) IMPORTAÇÕES – Bens, "
            "Serviços ou Direitos A pessoa jurídica deve indicar o valor do "
            "ajuste, determinado em conformidade com os arts. 4º a 7º da "
            "Instrução Normativa RFB nº 1.312, de 28 de dezembro de 2012. "
            "Quando se tratar de encargos de depreciação ou amortização dos "
            "bens e direitos, a"
        ),
    )

    VALOR_COT = fields.Monetary(
        string="COT (VALOR_COT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Cotação: Valor médio diário da cotação do bem ou direito"
            " importado (art. 16 da IN RFB 1.312/2012) utilizada no cálculo do"
            " preço parâmetro, sem a inclusão de eventuais ajustes efetuados, "
            "em reais, e na unidade de medida utilizada no preço praticado."
        ),
    )

    NUM_DEC_IMP = fields.Char(
        string="Número da Declaração Única de Importação",
        help="Número da Declaração Única de Importação (DUIMP).",
    )

    DAT_ENT_PREV = fields.Integer(string="Data de Entrega Prevista")

    VL_JUR = fields.Monetary(
        string="JUR",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Juros: Informar em reais o valor total dos juros pagos ou "
            "creditados em operações financeiras durante o ano-calendário. "
            "Esse valor total deve ser consolidado consoante os códigos de "
            "natureza-fato de operação constantes da Consolidação das Normas "
            "Cambiais (CNC), editada pelo Banco Central do Brasil."
        ),
    )

    VL_JUR_MIN = fields.Float(
        string="MIN",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Taxa de Juros Mínima: Informar neste campo a menor taxa praticada"
            " em operação financeira realizada no ano-calendário. Obrigatório "
            "apenas para TIP_IMP = Operações Financeiras"
        ),
    )

    VL_JUR_MAX = fields.Float(
        string="MAX",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Taxa de Juros Máxima: Informar neste campo a maior taxa praticada"
            " em operação financeira realizada no ano-calendário. Obrigatório "
            "apenas para TIP_IMP = Operações Financeiras"
        ),
    )

    COD_CNC = fields.Char(
        string="C Código CNC",
        help=(
            "C Código CNC, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas). ódigo CNC: Código da "
            "natureza-fato específico correspondente à motivação do "
            "recebimento/pagamento, conforme § 1o do artigo 23 da Lei no "
            "4.131, de 03 de setembro de 1962, e que consta na Circular no "
            "3.690, de 16 de dezembro de 2013, do Banco Central do Brasil. "
            "Atenção: No caso dos recursos não terem sido enviados ao "
            "exterior, o enquadramento se faz, consoante apuração contábil, "
            "como se remetidos fossem. Tendo ocorrido a efetiva remessa, esses"
            " valores são de igual modo classificados, independentemente do "
            "instrumento de formalização cambial utilizado no Banco Central do"
            " Brasil - contrato de câmbio e/ou transferência internacional em "
            "moeda nacional. Obrigatório apenas para TIP_IMP = Operações "
            "Financeiras Observação: O registro X320 não possui informação de "
            "data em seus campos. Portanto, os códigos utilizados no campo "
            "X320.COD_CNC devem ser os vigentes na data final da ECF, para "
            "todas as operações ocorridas durante o ano da escrituração."
        ),
    )

    TIP_MOEDA = fields.Char(
        string="Moeda: a pessoa jurídica deve selecionar",
        help=(
            "Moeda: a pessoa jurídica deve selecionar, dentre as opções, a "
            "moeda de negociação. Obrigatório apenas para TIP_IMP=Operações "
            "Financeiras"
        ),
    )

    reg_X325_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X325",
        "reg_X325_ids_RegistroX320_id",
        string="Tipos de Ajustes do Preço Parâmetro da Importação",
    )

    reg_X330_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X330",
        "reg_X330_ids_RegistroX320_id",
        string="Operações com o Exterior",
        help="Operações com o Exterior - Contratantes das Importações",
    )


class RegistroX325(models.Model):
    "Tipos de Ajustes do Preço Parâmetro da Importação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X325"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX325"

    TIP_AJUST = fields.Integer(
        string="Tipo de ajustes do preço parâmetro que foram realizados: 1",
        required=True,
        help=(
            "Tipo de ajustes do preço parâmetro que foram realizados: 1 - "
            "Prêmio (art. 16, §6º) 2 - Prazo para pagamento (art. 16, §9º, I) "
            "3 - Quantidades negociadas (art. 16, §9º, II) 4 - Influências "
            "climáticas nas características do bem exportado (art. 16, §9º, "
            "III) 5 - Custos de intermediação - Custos de intermediação, nas "
            "operações de compra e venda praticadas pelas pessoas jurídicas "
            "não vinculadas, assim entendidos os custos de intermediação "
            "cobrados pelas bolsas de mercadorias e futuros internacionalmente"
            " reconhecidas (art. 34, § 10, IV). 6 - Acondicionamento (art. 16,"
            " §9º, V) 7 - Frete e seguro (art. 16, §9º, VI) 8 - Custos de "
            "desembarque no porto, de transporte interno, de armazenagem e de "
            "desembaraço aduaneiro, incluídos impostos e taxas incidentes na "
            "importação (art. 16, §9º, VII) 9 - Prazo para pagamento (art. 9, "
            "§1º, I) 10 - Quantidades negociadas (art. 9, §1º, II) 11 - "
            "Garantia de funcionamento do bem ou da aplicabilidade do serviço "
            "ou direito (art. 9, §1º, III) 12 - Promoção do bem, serviço ou "
            "direito (art. 9, §1º, IV) 13 - Custos de fiscalização de "
            "qualidade, de padrão dos serviços e das condições de higiene "
            "(art. 9, §1º, V) 14 - Custos de intermediação (art. 9, §1º, VI) "
            "15 - Acondicionamento (art. 9, §1º, VII) 16 - Frete e seguro "
            "(art. 9, §1º, VIII) 17 - Custos de desembarque no porto, de "
            "transporte interno, de armazenagem e de desembaraço aduaneiro, "
            "incluídos impostos e taxas incidentes na importação (art. 9, §1º,"
            " IX) 18 - Similaridade (art. 10) 19 - Variação cambial (art. 24)"
        ),
    )

    DESC_OUT_AJ = fields.Char(
        string="Descrição de Outros Ajustes",
        help=(
            "Descrição de Outros Ajustes (X325.TIP_AJUST = “99”). Fornecer "
            "informações adicionais relativas aos ajustes efetuados e aos "
            "critérios utilizados."
        ),
    )

    VALOR = fields.Char(string="Valor do Ajuste em Reais", required=True)

    FONT_AJU = fields.Char(
        string="AJU",
        required=True,
        help=(
            "Descrever a fonte que serviu para embasar o ajuste efetuado ao "
            "preço parâmetro. Por exemplo, o ajuste do prêmio foi realizado "
            "com base no relatório divulgado pela instituição XYZ."
        ),
    )

    reg_X325_ids_RegistroX320_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X320",
        string="Operações com o Exterior",
        required=True,
        help="Operações com o Exterior - Importações (Saídas de Divisas)",
    )


class RegistroX330(models.Model):
    "Operações com o Exterior - Contratantes das Importações"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X330"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX330"

    NOME = fields.Char(
        string="NOME",
        required=True,
        help=(
            "Nome: Nome ou razão social da pessoa física ou jurídica "
            "contratante da transação, que seja domiciliada no exterior."
        ),
    )

    PAIS = fields.Char(
        string="País: País onde a pessoa física ou jurídica contratante",
        required=True,
        help=(
            "País: País onde a pessoa física ou jurídica contratante, no "
            "exterior, é domiciliada. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_OPER = fields.Monetary(
        string="OPER",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Operação: Valores das transações que compõem cada "
            "operação inserida no registro X320, agrupados por pessoa física "
            "ou jurídica contratante, desde que originadas do mesmo país."
        ),
    )

    COND_PES = fields.Integer(
        string="Condição da Pessoa Envolvida na Operação: 01",
        required=True,
        help=(
            "Condição da Pessoa Envolvida na Operação: 01 - Considerada "
            "Vinculada. 02 - Interposta Pessoa - Transação com Vinculada. 03 -"
            " Residente/Domiciliada em País com Tributação Favorecida ou, "
            "ainda, a partir de 1º de janeiro de 2009, que goze, nos termos da"
            " legislação, de regime fiscal privilegiado. 04 – Considerada "
            "vinculada e Residente/Domiciliada em País com Tributação "
            "Favorecida ou que goze de regime fiscal privilegiado."
        ),
    )

    reg_X330_ids_RegistroX320_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X320",
        string="Operações com o Exterior",
        required=True,
        help="Operações com o Exterior - Importações (Saídas de Divisas)",
    )


class RegistroX340(models.Model):
    "Identificação da Participação no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X340"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX340"

    RAZ_SOCIAL = fields.Char(
        string="Razão Social: Razão social de cada controlada",
        required=True,
        help=(
            "Razão Social: Razão social de cada controlada, direta ou "
            "indireta, equiparada ou coligada em regime de competência."
        ),
    )

    NIF = fields.Char(
        string="NIF: Número de identificação fiscal de cada investida",
        required=True,
        help=(
            "NIF: Número de identificação fiscal de cada investida (“CNPJ” da "
            "investida no exterior). Observação: 1 – Caso a investida não "
            "possua NIF, utilize “0000” 2 – Para investidas de um mesmo país "
            "diferente do Brasil que não possuam NIF, utilizar “0000”, “0001”,"
            " “0002”, e assim por diante, conforme a quantidade de investidas."
        ),
    )

    IND_CONTROLE = fields.Integer(
        string="CONTROLE",
        required=True,
        help=(
            "Indicador de Controle 1 – Controlada Direta 2 – Controlada "
            "Indireta 3 – Equiparada a Controlada 4 – Coligada em Regime de "
            "Competência 5 – Filial ou Sucursal 6 – Coligada em Regime de "
            "Caixa 7 – Joint Venture 8 – Partnership 9 – Trust 10 – Coligada "
            "em Regime de Competência por Opção (art. 19-A da Instrução "
            "Normativa RFB no 1.520/2014)."
        ),
    )

    PAIS = fields.Integer(
        string="País: País de cada controlada",
        required=True,
        help=(
            "País: País de cada controlada, direta ou indireta, equiparada ou "
            "coligada em regime de competência. Código do país, conforme "
            "tabela do Sped (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_ISEN_PETR = fields.Char(
        string="PETR",
        required=True,
        help=(
            "Indicador de Prospecção e Exploração de Petróleo e Gás: Informar "
            "parcela de lucro decorrente de afretamento por tempo ou casco nu,"
            " arrendamento mercantil operacional, aluguel, empréstimo de bens "
            "ou prestação de serviços diretamente relacionados à prospecção e "
            "exploração de petróleo e gás, em território brasileiro, que goze "
            "de isenção nos termos do art. 77, §3º, da Lei nº 12.973 de 13 de "
            "maio de 2014: S = Sim N = Não"
        ),
    )

    IND_CONSOL = fields.Char(
        string="CONSOL",
        required=True,
        help=(
            "Indicador de Consolidação: Informar se a investida terá os "
            "resultados positivos e negativos consolidados: S = Sim N = Não"
        ),
    )

    MOT_NAO_CONSOL = fields.Integer(
        string="CONSOL (MOT_NAO_CONSOL)",
        help=(
            "Motivo da Não Consolidação: 1 – Opção; 2 – Domiciliada em país "
            "com o qual o Brasil não mantenha tratado ou ato com cláusula "
            "específica para troca de informações para fins tributários; 3 – "
            "Domiciliada em país ou dependência com tributação favorecida, ou "
            "é beneficiária de regime fiscal privilegiado, de que tratam os "
            "arts. 24 e 24-A da Lei nº 9.430, de 27 de dezembro de 1996, "
            "listados na Instrução Normativa RFB nº 1.037, de; 4 – Submetida a"
            " regime de tributação definido no inciso III do caput do art. 22;"
            " 5 – Controlada, direta ou indiretamente, por pessoa jurídica "
            "submetida a tratamento tributário previsto nos incisos II e III "
            "do art. 13; 6 – Teve renda ativa própria inferior a 80% (oitenta "
            "por cento) da renda total no período, nos termos definidos no "
            "art. 22."
        ),
    )

    CNPJ = fields.Integer(
        string="CNPJ da Investida no Brasil: Hipótese do art",
        help=(
            "CNPJ da Investida no Brasil: Hipótese do art. 41, parágrafo "
            "único, da Instrução Normativa RFB nº 1.520/2014."
        ),
    )

    TIP_MOEDA = fields.Char(string="Moeda do País de Domicílio")

    reg_X350_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X350",
        "reg_X350_ids_RegistroX340_id",
        string="Participações no Exterior",
        help="Participações no Exterior - Resultado do Período de Apuração",
    )

    reg_X351_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X351",
        "reg_X351_ids_RegistroX340_id",
        string="ids",
        help="Demonstrativo de Resultados e de Imposto a Pagar no Exterior",
    )

    reg_X352_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X352",
        "reg_X352_ids_RegistroX340_id",
        string="ids (reg_X352_ids)",
        help=(
            "Demonstrativo de Resultados no Exterior Auferidos por Intermédio "
            "de Coligadas em Regime de Caixa"
        ),
    )

    reg_X353_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X353",
        "reg_X353_ids_RegistroX340_id",
        string="Demonstrativo de Consolidação",
    )

    reg_X354_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X354",
        "reg_X354_ids_RegistroX340_id",
        string="Demonstrativo de Prejuízos Acumulados",
    )

    reg_X355_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X355",
        "reg_X355_ids_RegistroX340_id",
        string="Demonstrativo de Rendas Ativas e Passivas",
    )

    reg_X356_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X356",
        "reg_X356_ids_RegistroX340_id",
        string="Demonstrativo de Estrutura Societária",
    )

    reg_X357_ids = fields.One2many(
        "l10n_br_sped.ecf.1.X357",
        "reg_X357_ids_RegistroX340_id",
        string="Investidoras Diretas",
    )


class RegistroX350(models.Model):
    "Participações no Exterior - Resultado do Período de Apuração"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X350"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX350"

    REC_LIQ = fields.Monetary(
        string="LIQ",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receita Líquida: Receita líquida de todas as atividades "
            "exploradas pela filial, sucursal, controlada ou coligada "
            "residente ou domiciliada no exterior."
        ),
    )

    CUSTOS = fields.Monetary(
        string="CUSTOS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Custos dos Bens e Serviços Vendidos: Total dos custos das "
            "atividades exploradas pela filial, sucursal, controlada ou "
            "coligada domiciliada no exterior."
        ),
    )

    LUC_BRUTO = fields.Char(
        string="Lucro Bruto: Deve ser igual a",
        help="Lucro Bruto: Deve ser igual a (X350.REC_LIQ – X350.CUSTOS)",
    )

    REC_AUFERIDAS = fields.Monetary(
        string="AUFERIDAS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receitas Financeiras Auferidas com a Vinculada no Brasil: Valor "
            "total das receitas financeiras auferidas pela filial, sucursal, "
            "controlada ou coligada domiciliada no exterior nas operações "
            "efetuadas com a pessoa jurídica vinculada domiciliada no Brasil."
        ),
    )

    REC_OUTRAS_OPER = fields.Monetary(
        string="OPER",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Outras Receitas Operacionais: Valor total das outras receitas "
            "operacionais da filial, sucursal, controlada ou coligada "
            "domiciliada no exterior."
        ),
    )

    DESP_BRASIL = fields.Monetary(
        string="BRASIL",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Despesas Financeiras Pagas ou Creditadas à Vinculada no Brasil: "
            "Valor total das despesas financeiras pagas ou creditadas pela "
            "filial, sucursal, controlada ou coligada domiciliada no exterior "
            "nas operações efetuadas com a pessoa jurídica vinculada "
            "domiciliada no Brasil."
        ),
    )

    DESP_OPER = fields.Monetary(
        string="OPER (DESP_OPER)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Despesa Operacionais: Valor total das despesas operacionais da "
            "filial, sucursal, controlada ou coligada residente ou domiciliada"
            " no exterior."
        ),
    )

    LUC_OPER = fields.Char(
        string="Lucro Operacional: Deve ser igual a",
        help=(
            "Lucro Operacional: Deve ser igual a (X350.LUC_BRUTO + "
            "X350.REC_AUFERIDAS + X350.REC_OUTRAS_OPER – X350.DESP_BRASIL – "
            "X350.DESP_OPER)"
        ),
    )

    REC_PARTIC = fields.Char(
        string="Receitas de Participação em Controladas",
        help=(
            "Receitas de Participação em Controladas, Coligadas, Filiais ou "
            "Sucursais: Valor total das receitas de participação em "
            "controladas, coligadas, filiais ou sucursais residentes ou "
            "domiciliadas no exterior."
        ),
    )

    REC_OUTRAS = fields.Monetary(
        string="Outras Receitas: Valor total das demais receitas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Outras Receitas: Valor total das demais receitas, ou seja, "
            "daquelas que não estão ligadas a atividade principal ou acessória"
            " da filial, sucursal, controlada ou coligada domiciliada no "
            "exterior."
        ),
    )

    DESP_OUTRAS = fields.Monetary(
        string="Outras Despesas: Valor total das demais despesas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Outras Despesas: Valor total das demais despesas, ou seja, "
            "daquelas que não estão ligadas a atividade principal ou acessória"
            " da filial, sucursal, controlada ou coligada domiciliada no "
            "exterior."
        ),
    )

    LUC_LIQ_ANT_IR = fields.Char(
        string="Lucro Líquido Antes do Imposto de Renda",
        help=(
            "Lucro Líquido Antes do Imposto de Renda. Deve ser igual a "
            "(X350.LUC_OPER + X350.REC_PARTIC + X350.REC_OUTRAS – "
            "X350.DESP_OUTRAS)"
        ),
    )

    LUC_ARB_ANT_IR = fields.Char(string="Lucro Arbitrado Antes do Imposto de Renda")

    IMP_DEV = fields.Char(
        string="DEV",
        required=True,
        help=(
            "Imposto Devido: Valor do tributo incidente sobre o lucro devido "
            "no país de domicílio da filial, sucursal, controlada ou coligada."
            " O tributo pago no exterior, a ser compensado com o imposto "
            "devido no Brasil, deve ser convertido em Reais."
        ),
    )

    LUC_LIQ = fields.Char(
        string="Lucro líquido do Período de Apuração",
        required=True,
        help=(
            "Lucro líquido do Período de Apuração. Deve ser igual a "
            "(X350.LUC_LIQ_ANT_IR+ LUC_ARB_ANT_IR – X350.IMP_DEV)"
        ),
    )

    reg_X350_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX351(models.Model):
    "Demonstrativo de Resultados e de Imposto a Pagar no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X351"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX351"

    RES_INV_PER = fields.Char(
        string="Resultado",
        help=(
            "Resultado (positivo ou negativo) da Própria Investida em Moeda do"
            " País de Domicílio. Devem ser expurgados o valor do resultado "
            "positivo ou negativo de eventuais controladas indiretas."
        ),
    )

    RES_INV_PER_REAL = fields.Char(
        string="Resultado (RES_INV_PER_REAL)",
        help=(
            "Resultado (positivo ou negativo) da Própria Investida em Reais. "
            "Devem ser expurgados o valor do resultado positivo ou negativo de"
            " eventuais controladas indiretas."
        ),
    )

    RES_ISEN_PETR_PER = fields.Char(
        string="PER",
        help=(
            "Resultado da Investida em Operações que Gozem de Isenção "
            "Relacionada à Prospecção e Exploração de Petróleo e Gás: "
            "Resultado (positivo ou negativo) da própria investida em moeda do"
            " país de domicílio apenas em operações decorrentes de afretamento"
            " por tempo ou casco nu, arrendamento mercantil operacional, "
            "aluguel, empréstimo de bens ou prestação de serviços diretamente "
            "relacionados à prospecção e exploração de petróleo e gás, em "
            "território brasileiro, que gozem de isenção nos termos do art. "
            "77, §3º, da Lei nº 12.973, de 13 de maio de 2014. Deve ser "
            "expurgado o valor do resultado positivo ou negativo de eventuais "
            "controladas indiretas."
        ),
    )

    RES_ISEN_PETR_PER_REAL = fields.Char(
        string="REAL",
        help=(
            "Resultado da Investida em Operações que Gozem de Isenção "
            "Relacionada à Prospecção e Exploração de Petróleo e Gás em Reais "
            "(R$): Resultado (positivo ou negativo) da própria investida em "
            "Reais apenas em operações decorrentes de afretamento por tempo ou"
            " casco nu, arrendamento mercantil operacional, aluguel, "
            "empréstimo de bens ou prestação de serviços diretamente "
            "relacionados à prospecção e exploração de petróleo e gás, em "
            "território brasileiro, que gozem de isenção nos termos do art. "
            "77, §3º, da Lei nº 12.973, de 13 de maio de 2014. Deve ser "
            "expurgado o valor do resultado positivo ou negativo de eventuais "
            "controladas indiretas."
        ),
    )

    RES_NEG_ACUM = fields.Monetary(
        string="ACUM",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Resultado Negativo Acumulado de Anos Anteriores: Resultado "
            "negativo acumulado de anos anteriores da própria investida "
            "utilizado na compensação, na moeda do país de domicílio."
        ),
    )

    RES_POS_TRIB = fields.Monetary(
        string="TRIB",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Resultado Positivo a Tributar: Resultado positivo a tributar na "
            "moeda do país de domicílio (deve ser informado o valor de (X351. "
            "RES_INV_PER – X351.RES_ISEN_PETR_PER), caso seja resultado "
            "positivo e maior que o valor do campo do campo "
            "X351.RES_NEG_ACUM)."
        ),
    )

    RES_POS_TRIB_REAL = fields.Monetary(
        string="Resultado Positivo a Tributar em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Resultado Positivo a Tributar em Reais (R$).",
    )

    IMP_LUCR = fields.Monetary(
        string="LUCR",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Efetivamente Pago: Imposto incidente sobre o lucro "
            "distribuído no país de domicílio na moeda do país de domicílio "
            "(Instrução Normativa RFB no 1.520, art. 40, V)."
        ),
    )

    IMP_LUCR_REAL = fields.Monetary(
        string="Imposto Efetivamente Pago em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Efetivamente Pago em Reais (R$): Imposto incidente sobre "
            "o lucro distribuído no país de domicílio em reais (R$) (Instrução"
            " Normativa RFB no 1.520, art. 40, V)."
        ),
    )

    IMP_PAG_REND = fields.Monetary(
        string="REND",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Efetivamente Pago no Exterior Sobre Rendimentos Recebidos"
            " na Moeda do País de Domicílio (Instrução Normativa RFB no 1.520,"
            " art. 36, X e art. 40, III)."
        ),
    )

    IMP_PAG_REND_REAL = fields.Monetary(
        string="REAL (IMP_PAG_REND_REAL)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Efetivamente Pago no Exterior Sobre Rendimentos Recebidos"
            " em Reais (R$) (Instrução Normativa RFB no 1.520, art. 36, X e "
            "art. 40, III)."
        ),
    )

    IMP_RET_EXT = fields.Monetary(
        string="EXT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Retido na Fonte no Exterior: Imposto retido na fonte no "
            "exterior decorrente de rendimentos recebidos pela filial, "
            "sucursal ou controlada domiciliada no exterior, na moeda "
            "estrangeira (Instrução Normativa RFB no 1.520, art. 40, IV)."
        ),
    )

    IMP_RET_EXT_REAL = fields.Monetary(
        string="REAL (IMP_RET_EXT_REAL)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Retido na Fonte no Exterior em Reais: Imposto retido na "
            "fonte no exterior decorrente de rendimentos recebidos pela "
            "filial, sucursal ou controlada domiciliada no exterior, em reais "
            "(Instrução Normativa RFB no 1.520, art. 40, IV)."
        ),
    )

    IMP_RET_BR = fields.Monetary(
        string="BR",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Imposto Retido na Fonte no Brasil: Imposto retido na fonte no "
            "Brasil decorrente de rendimentos recebidos pela filial, sucursal "
            "ou controlada domiciliada no exterior, em Reais (Instrução "
            "Normativa RFB no 1.520, art. 40, IV)."
        ),
    )

    reg_X351_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX352(models.Model):
    """Demonstrativo de Resultados no Exterior Auferidos por Intermédio de
    Coligadas em Regime de Caixa"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X352"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX352"

    RES_PER = fields.Char(
        string="Resultado",
        help=(
            "Resultado (positivo ou negativo) do Período na Moeda do País de "
            "Domicílio."
        ),
    )

    RES_PER_REAL = fields.Char(
        string="Resultado (RES_PER_REAL)",
        help="Resultado (positivo ou negativo) do Período em Reais.",
    )

    LUC_DISP = fields.Monetary(
        string="DISP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Lucro Disponibilizado no Período na Moeda do País de Domicílio."),
    )

    LUC_DISP_REAL = fields.Monetary(
        string="Lucro Disponibilizado no Período em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_X352_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX353(models.Model):
    "Demonstrativo de Consolidação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X353"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX353"

    RES_NEG_UTIL = fields.Monetary(
        string="UTIL",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Resultado Negativo Utilizado na Consolidação na Moeda do País de "
            "Domicílio."
        ),
    )

    RES_NEG_UTIL_REAL = fields.Monetary(
        string="Resultado Negativo Utilizado na Consolidação em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    SALDO_RES_NEG_NAO_UTIL = fields.Monetary(
        string="UTIL (SALDO_RES_NEG_NAO_UTIL)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo do Resultado Negativo Não Utilizado na Moeda do País de "
            "Domicílio."
        ),
    )

    SALDO_RES_NEG_NAO_UTIL_REAL = fields.Monetary(
        string="Saldo do Resultado Negativo Não Utilizado em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    RES_PROP = fields.Monetary(
        string="Resultado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Resultado (positivo ou negativo) Próprio da Controlada no Período"
            " na Moeda do País de Domicílio."
        ),
    )

    RES_PROP_REAL = fields.Monetary(
        string="Resultado (RES_PROP_REAL)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Resultado (positivo ou negativo) Próprio da Controlada no Período"
            " em Reais."
        ),
    )

    reg_X353_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX354(models.Model):
    "Demonstrativo de Prejuízos Acumulados"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X354"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX354"

    RES_NEG = fields.Monetary(
        string="NEG",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Resultado Negativo de Períodos Anteriores em Moeda do País de "
            "Domicílio."
        ),
    )

    RES_NEG_REAL = fields.Monetary(
        string="Resultado Negativo de Períodos Anteriores em em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Resultado Negativo de Períodos Anteriores em em Reais (R$).",
    )

    SALDO_RES_NEG = fields.Monetary(
        string="NEG (SALDO_RES_NEG)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo do Resultado Negativo Acumulado em Moeda do País de " "Domicílio."
        ),
    )

    reg_X354_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX355(models.Model):
    "Demonstrativo de Rendas Ativas e Passivas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X355"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX355"

    REND_PASS_PROP = fields.Monetary(
        string="Renda Passiva Própria do Ano",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Renda Passiva Própria do Ano-Calendário em Moeda do País de " "Domicílio."
        ),
    )

    REND_PASS_PROP_REAL = fields.Monetary(
        string="Renda Passiva Própria do Ano (REND_PASS_PROP_REAL)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Renda Passiva Própria do Ano-Calendário em Reais (R$).",
    )

    REND_TOTAL = fields.Monetary(
        string="TOTAL",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Renda Total: Renda total conforme definição do inciso II do art. "
            "21 da Instrução Normativa RFB no 1.520/2014, do ano-calendário em"
            " moeda do país de domicílio."
        ),
    )

    REND_TOTAL_REAL = fields.Monetary(
        string="REAL",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Renda Total em Reais: Renda total conforme definição do inciso II"
            " do art. 21 da Instrução Normativa RFB no 1.520/2014, do ano-"
            "calendário em Reais (R$)."
        ),
    )

    REND_ATIV_PROP = fields.Monetary(
        string="Renda Ativa Própria em Moeda do País de Domicílio",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Renda Ativa Própria em Moeda do País de Domicílio (corresponde ao"
            " resultado da subtração do X355.REND_TOTAL pelo "
            "X355.REND_PASS_PROP)."
        ),
    )

    REND_ATIV_PROP_REAL = fields.Monetary(
        string="Renda Ativa Própria em Reais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Renda Ativa Própria em Reais (corresponde ao resultado da "
            "subtração do X355. REND_TOTAL_REAL pelo "
            "X355.REND_PASS_PROP_REAL)."
        ),
    )

    PERCENTUAL = fields.Float(
        string="PERCENTUAL",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual: Valor do percentual obtido mediante a razão entre o "
            "valor do X355. REND_ATIV_PROP e do X355.REND_TOTAL."
        ),
    )

    reg_X355_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX356(models.Model):
    "Demonstrativo de Estrutura Societária"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X356"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX356"

    PERC_PART = fields.Float(
        string="Percentual de Participação da Investidora Direta",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual de Participação da Investidora Direta (%). Exemplo: " "60,00%."
        ),
    )

    ATIVO_TOTAL = fields.Monetary(
        string="Ativo Total em Reais: Ativo total de cada controlada",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Ativo Total em Reais: Ativo total de cada controlada, direta ou "
            "indireta, equiparada ou coligada em regime de competência."
        ),
    )

    PAT_LIQUIDO = fields.Char(
        string="LIQUIDO",
        help=(
            "Patrimônio Líquido em Reais: Patrimônio líquido de cada "
            "controlada, direta ou indireta, equiparada ou coligada em regime "
            "de competência."
        ),
    )

    reg_X356_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX357(models.Model):
    "Investidoras Diretas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X357"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX357"

    PAIS = fields.Integer(
        string="País: País de cada investidora direta",
        required=True,
        help=(
            "País: País de cada investidora direta. Código do país, conforme "
            "tabela do Sped (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    NIF_CNPJ = fields.Char(
        string="NIF/CNPJ",
        required=True,
        help=(
            "NIF: Número de identificação fiscal de cada investidora direta "
            "(“CNPJ” da investida no exterior) ou CNPJ. Observação: 1 – Caso a"
            " investidora direta não possua NIF, utilize “0000” 2 – Para "
            "investidoras diretas de um mesmo país diferente do Brasil que não"
            " possuam NIF, utilizar “0000”, “0001”, “0002”, e assim por "
            "diante, conforme a quantidade de investidoras diretas."
        ),
    )

    RAZAO_SOCIAL = fields.Char(
        string="Razão Social: Razão social da investidora direta", required=True
    )

    PERCENTUAL = fields.Float(
        string="PERCENTUAL",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual: Valor do percentual de participação da investidora "
            "direta na investida informada no registro X340."
        ),
    )

    reg_X357_ids_RegistroX340_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.X340",
        string="Identificação da Participação no Exterior",
        required=True,
    )


class RegistroX390(models.Model):
    "Origem e Aplicação de Recursos - Imunes ou Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X390"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX390"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX400(models.Model):
    """Comércio Eletrônico e Tecnologia da Informação – Informações das
    Vendas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X400"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX400"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX410(models.Model):
    "Comércio Eletrônico – Informação de Homepage/Servidor"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X410"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX410"

    PAIS = fields.Integer(
        string="PAIS",
        required=True,
        help=(
            "País: País em que disponibiliza homepage ou mantém servidor à sua"
            " disposição. Código do país, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_HOME_DISP = fields.Char(
        string="DISP",
        required=True,
        help=(
            "Indicador de Homepage Disponível: S – Sim N – Não A pessoa "
            "jurídica deverá marcar “Sim” ou “Não”, para cada país "
            "selecionado, onde tenha o domínio de sua homepage registrado, "
            "caso disponibilize, ou não, efetivamente sua homepage. A "
            "disponibilização efetiva da homepage se dá por meio do conhecer "
            "ao público de seu conteúdo. Atenção: Deve assinalar “Não” neste "
            "campo, a pessoa jurídica que tenha efetuado somente o registro de"
            " sua homepage num determinado país e não tenha construído ou "
            "disponibilizado efetivamente essa homepage para o público."
        ),
    )

    IND_SERV_DISP = fields.Char(
        string="DISP (IND_SERV_DISP)",
        required=True,
        help=(
            "Indicador de Disponibilidade de Servidor: S – Sim N – Não A "
            "pessoa jurídica que, por meio de sua homepage, aceite pedidos de "
            "compra, receba pagamentos, preste serviços ou efetue a entrega de"
            " bens digitais por meio de download deve selecionar “Sim” neste "
            "campo, para cada país selecionado, para informar o país onde "
            "mantém os servidores que estão à sua disposição. Para que um "
            "servidor seja considerado à sua disposição basta que ele seja o "
            "meio pelo qual a pessoa jurídica atue no comércio eletrônico. "
            "Esses servidores podem pertencer à pessoa jurídica, como podem "
            "ser alugados, arrendados ou cedidos a título gratuito ou oneroso."
        ),
    )


class RegistroX420(models.Model):
    """Royalties Recebidos ou Pagos a Beneficiários do Brasil e do Exterior"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X420"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX420"

    TIP_ROY = fields.Char(
        string="ROY",
        required=True,
        help=(
            "Indicar se são roylaties recebidos ou pagos a benfeciários no "
            "Brasil e no exterior. Tipo dos royalties: R - Recebido P – Pago"
        ),
    )

    PAIS = fields.Integer(
        string="PAIS",
        required=True,
        help=(
            "País: País ou a dependência de país de residência ou de domicílio"
            " da pessoa física ou jurídica que efetuou o pagamento ou a "
            "remessa do valor recebido ou pago pela pessoa jurídica "
            "declarante, observado os exemplos a seguir: Exemplos: 1) Pessoa "
            "jurídica domiciliada na França possui conta corrente no Canadá e "
            "a partir desta remete royalties para a pessoa jurídica "
            "declarante. Nesse caso, o país a ser selecionado é a França. 2) "
            "Pessoa jurídica declarante efetua remessa, por conta e ordem do "
            "beneficiário do pagamento que é residente no Japão, para conta "
            "corrente localizada nos Estados Unidos da América. Nesse caso, o "
            "país a ser selecionado é o Japão. Código do país, conforme tabela"
            " do Sped (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_EXPL_DIR_SW = fields.Monetary(
        string="SW",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais do Autor "
            "Relativos a Software: Valor relativo aos royalties recebidos ou "
            "pagos ou remetidos referentes aos atos e aos contratos de licença"
            " ou cessão de direitos de comercialização, distribuição e "
            "reprodução de programa de computador, de que trata a Lei nº "
            "9.609, de 19 de fevereiro de 1998. Informar também neste campo o "
            "valor relativo aos contratos que impliquem transferência de "
            "tecnologia de programa de computador, de que trata o art. 11 da "
            "Lei nº 9.609, de 1998. Ainda, deverá ser informado, neste campo, "
            "o valor recebido em decorrência dos contratos que envolvam "
            "concessão de licença para uso próprio do adquirente, sob a "
            "modalidade de cópia única. Atenção: Não incluir neste campo o "
            "valor recebido ou pago ou remetido a título de transferência "
            "total dos direitos patrimoniais do programa de computador."
        ),
    )

    VL_EXPL_DIR_AUT = fields.Monetary(
        string="AUT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais do Autor,"
            " Exceto Software: Valor relativo aos royalties recebidos ou pagos"
            " ou remetidos referentes aos contratos que transferem a "
            "terceiros, por meio de licenciamento, concessão, cessão ou por "
            "outros meios admitidos em Direito, o direito de reproduzir, "
            "comercializar ou distribuir a obra protegida pelo Direito "
            "Autoral, de que trata o art. 7º da Lei nº 9.610, de 19 de "
            "fevereiro de1998, exceto programas de computador, tais como: - "
            "textos de obras literárias, artísticas ou científicas; - "
            "conferências, alocuções, sermões e outras obras da mesma "
            "natureza; - obras dramáticas e dramático-musicais; - obras "
            "coreográficas e pantomímicas, cuja execução cênica se fixe por "
            "escrito ou por qualquer outra forma; - composições musicais, "
            "tenham ou não letra; - obras audiovisuais, sonorizadas ou não, "
            "inclusive as cinematográficas; - obras fotográficas e as "
            "produzidas por qualquer processo análogo ao da fotografia; - "
            "obras de desenho, pintura, gravura, escultura, litografia e arte "
            "cinética; - ilustrações, cartas geográficas e outras obras da "
            "mesma natureza; - projetos, esboços e obras plásticas "
            "concernentes à geografia, engenharia, topografia, arquitetura, "
            "paisagismo, cenografia e ciência; - adaptações, traduções e "
            "outras transformações de obras originais, apresentadas como "
            "criação intelectual nova; - coletâneas ou compilações, "
            "antologias, enciclopédias, dicionários, bases de dados e outras "
            "obras, que, por sua seleção, organização ou disposição de seu "
            "conteúdo, constituam uma criação intelectual. Atenção: Não "
            "incluir neste campo o valor recebido ou pago ou remetido a título"
            " de transferência total dos direitos patrimoniais da obra "
            "protegida pelo Direito Autoral."
        ),
    )

    VL_EXPL_MARCA = fields.Monetary(
        string="MARCA",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais de "
            "Marcas: Valor relativo aos royalties recebidos ou pagos ou "
            "remetidos referentes aos contratos de licenciamento de uso de "
            "marca registrada ou de pedidos de registros depositados junto ao "
            "Instituto Nacional de Propriedade Industrial (INPI), de que trata"
            " a Lei nº 9.279, de 14 de maio de 1996. Atenção: 1) Não incluir "
            "neste campo o valor recebido ou pago ou remetido a título de "
            "transferência total dos direitos patrimoniais da marca protegida "
            "pelo Direito da Propriedade Industrial. 2) Não informar neste "
            "campo o valor recebido ou pago ou remetido correspondente aos "
            "contratos de uso de marcas relativos à concessão de franquia. "
            "Esse valor deve ser informado no campo “Exploração de Franquias”."
        ),
    )

    VL_EXPL_PAT = fields.Monetary(
        string="PAT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração Econômica dos Direitos Patrimoniais de "
            "Patentes e de Desenho Industrial: Valor relativo aos royalties "
            "recebidos ou pagos ou remetidos referentes aos contratos de "
            "licenciamento de patente ou de desenho industrial concedido ou de"
            " pedido de patente depositado junto ao Instituto Nacional de "
            "Propriedade Industrial (INPI), de que trata a Lei nº 9.279, de 14"
            " de maio de 1996. Atenção: 1) Não incluir neste campo o valor "
            "recebido ou pago ou remetido a título de transferência total dos "
            "direitos patrimoniais de patente ou desenho industrial protegidos"
            " pelo Direito da Propriedade Industrial. 2) Não informar neste "
            "campo o valor recebido ou pago ou remetido correspondente aos "
            "contratos de patentes relativos à concessão de franquia. Esse "
            "valor deve ser informado no campo “Exploração de Franquias”."
        ),
    )

    VL_EXPL_KNOW = fields.Monetary(
        string="Valor da Exploração de Know",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração de Know-How: Valor relativo aos royalties "
            "recebidos ou pagos ou remetidos referentes aos contratos que "
            "disponibilizam conhecimentos, fórmulas e técnicas secretos, não "
            "amparados pelo Direito de Propriedade Industrial, destinados à "
            "produção ou à comercialização de bens e de serviços. Atenção: 1) "
            "Não informar neste campo o valor recebido ou pago ou remetido "
            "correspondente aos contratos de know-how relativos à concessão de"
            " franquia. Esse valor deve ser informado no campo “Exploração de "
            "Franquias”. 2) Não informar neste campo o valor recebido ou pago "
            "ou remetido correspondente aos contratos de assistência técnica, "
            "científica, administrativa e assemelhados que impliquem "
            "transferência de tecnologia e os referentes a serviços técnicos e"
            " de assistência que não impliquem transferência de tecnologia. "
            "Informações sobre esses contratos devem ser prestadas no Registro"
            " X430 – “Rendimentos Relativos a Serviços, Juros e Dividendos "
            "Recebidos do Brasil e do Exterior”."
        ),
    )

    VL_EXPL_FRANQ = fields.Monetary(
        string="FRANQ",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração de Franquias: Valor relativo aos royalties "
            "recebidos ou pagos ou remetidos referentes aos contratos de "
            "concessão temporária de direitos que envolvam uso de marcas, "
            "prestação de serviços de assistência técnica, combinadamente ou "
            "não, com qualquer outra modalidade de transferência de tecnologia"
            " necessária à consecução do contrato de franquia."
        ),
    )

    VL_EXPL_INT = fields.Monetary(
        string="INT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Exploração dos Direitos Relativos à Propriedade "
            "Intelectual Referente a Cultivares: Valor relativo aos royalties "
            "recebidos ou pagos ou remetidos referentes à autorização "
            "concedida pelo titular da cultivar protegida para sua produção "
            "com fins comerciais, seu oferecimento à venda ou a "
            "comercialização do material de propagação da cultivar, de acordo "
            "com a Lei nº 9.456, de 25 de abril de 1997."
        ),
    )


class RegistroX430(models.Model):
    """Rendimentos Relativos a Serviços, Juros e Dividendos Recebidos do Brasil
    e do Exterior"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X430"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX430"

    PAIS = fields.Integer(
        string="PAIS",
        required=True,
        help=(
            "País: País ou a dependência de país de residência ou de domicílio"
            " da pessoa física ou jurídica que efetuou o pagamento ou a "
            "remessa dos valores recebidos pela pessoa jurídica declarante, "
            "observado o exemplo a seguir: Exemplo: Pessoa jurídica "
            "domiciliada na França possui conta corrente no Canadá e a partir "
            "desta remete valor pela prestação de serviço de assistência "
            "técnica para a pessoa jurídica declarante. Nesse caso, o país a "
            "ser selecionado é a França. Código do país, conforme tabela do "
            "Sped (Disponibilizada no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SERV_ASSIST = fields.Monetary(
        string="Valor dos Serviços de Assistência Técnica",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços de Assistência Técnica, Científica, "
            "Administrativa e Assemelhados com Transferência de Tecnologia: "
            "Rendimentos recebidos a título de serviços de assistência "
            "técnica, científica, administrativa e assemelhados referentes aos"
            " contratos que, em conformidade com a Lei nº 9.279, de 14 de maio"
            " de 1996, estipulam as condições de obtenção de técnicas, métodos"
            " de planejamento e programação, bem como pesquisas, estudos e "
            "projetos destinados à execução ou à prestação de serviços "
            "especializados e que tenham sido objeto de registro no Instituto "
            "Nacional de Propriedade Industrial (INPI)."
        ),
    )

    VL_SERV_SEM_ASSIST = fields.Monetary(
        string="ASSIST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços Técnicos e de Assistência sem Transferência de"
            " Tecnologia Prestados no Brasil: Rendimentos recebidos a título "
            "de serviços técnicos e de assistência, prestados no Brasil, "
            "referentes aos contratos dispensados de averbação no Instituto "
            "Nacional de Propriedade Industrial (INPI) por não constituírem "
            "transferência de tecnologia, tais como: i) Agenciamento de "
            "compras, inclusive serviços de logística relativos ao embarque de"
            " mercadorias e liberação alfandegária e outros de natureza "
            "similar; ii) Beneficiamento de produtos; iii) Homologação e "
            "certificação de qualidade de produtos brasileiros com o objetivo "
            "de promover a exportação; iv) Consultoria nas áreas comercial, "
            "financeira, jurídica, reorganização societária e licitações; v) "
            "Estudos de viabilidade econômica; vi) Serviços de marketing; vii)"
            " Serviços realizados sem a presença de técnicos da empresa "
            "tomadora do serviço e que não gerem quaisquer relatórios ou "
            "documentos; viii) Serviços de manutenção de software realizados "
            "sem a presença dos técnicos da empresa tomadora no local da "
            "prestação, tais como os efetuados por meio de “help-desk”. As "
            "pessoas jurídicas que exercem atividades no mercado financeiro, "
            "também, devem informar, neste campo, os rendimentos recebidos "
            "pelos seguintes serviços: i) Administração de fundos, loterias, "
            "sociedades de investimento, dentre outros de natureza similar; "
            "ii) Taxas de administração de consórcios e similares; iii) "
            "Tarifas e portes e comissões por prestação de serviços de "
            "cobrança, colocação de títulos e valores mobiliários por conta e "
            "ordem de terceiros; iv) Serviços prestados na contratação de "
            "operações de câmbio, comissão “del credere” relativa à "
            "administração de ativos redescontados junto ao Bacen; v) Serviços"
            " prestados na intermediação de bolsas, custódia, bem como "
            "serviços prestados a partes ligadas;"
        ),
    )

    VL_SERV_SEM_ASSIST_EXT = fields.Monetary(
        string="EXT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços Técnicos e de Assistência sem Transferência de"
            " Tecnologia Prestados no Exterior: Rendimentos recebidos a título"
            " de serviços técnicos e de assistência, prestados no Brasil, "
            "referentes aos contratos dispensados de averbação no Instituto "
            "Nacional de Propriedade Industrial (INPI) por não constituírem "
            "transferência de tecnologia, tais como: i) Agenciamento de "
            "compras, inclusive serviços de logística relativos ao embarque de"
            " mercadorias e liberação alfandegária e outros de natureza "
            "similar; ii) Beneficiamento de produtos; iii) Homologação e "
            "certificação de qualidade de produtos brasileiros com o objetivo "
            "de promover a exportação; iv) Consultoria nas áreas comercial, "
            "financeira, jurídica, reorganização societária e licitações; v) "
            "Estudos de viabilidade econômica; vi) Serviços de marketing; vii)"
            " Serviços realizados sem a presença de técnicos da empresa "
            "tomadora do serviço e que não gerem quaisquer relatórios ou "
            "documentos; viii) Serviços de manutenção de software realizados "
            "sem a presença dos técnicos da empresa tomadora no local da "
            "prestação, tais como os efetuados por meio de “help-desk”. As "
            "pessoas jurídicas que exercem atividades no mercado financeiro, "
            "também, devem informar, neste campo, os rendimentos recebidos "
            "pelos seguintes serviços: i) Administração de fundos, loterias, "
            "sociedades de investimento, dentre outros de natureza similar; "
            "ii) Taxas de administração de consórcios e similares; iii) "
            "Tarifas e portes e comissões por prestação de serviços de "
            "cobrança, colocação de títulos e valores mobiliários por conta e "
            "ordem de terceiros; iv) Serviços prestados na contratação de "
            "operações de câmbio, comissão “del credere” relativa à "
            "administração de ativos redescontados junto ao Bacen; v) Serviços"
            " prestados na intermediação de bolsas, custódia, bem como "
            "serviços prestados a partes ligadas;"
        ),
    )

    VL_JURO = fields.Monetary(
        string="JURO",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Juros sobre o Capital Próprio: Valor recebido a título "
            "de remuneração dos recursos investidos pela pessoa jurídica em "
            "outra pessoa jurídica domiciliada no Brasil, de que trata o art. "
            "9º da Lei nº 9.249, de 26 de dezembro de 1995. Informar, também, "
            "neste campo o valor recebido a título de juros sobre o capital "
            "próprio correspondente à participação da pessoa jurídica em "
            "empresas residentes ou domiciliadas no exterior. Atenção: 1) Não "
            "informar neste campo o valor correspondente aos juros recebidos "
            "durante o período que anteceder o início das operações sociais ou"
            " de implantação do empreendimento inicial de que trata a alínea "
            "“b” do parágrafo 1º do art. 15 do Decreto-Lei nº 1.598, de 26 de "
            "dezembro de 2012. 2) Não informar neste campo o valor relativo "
            "aos juros recebidos de cooperativa da qual a pessoa jurídica seja"
            " associada correspondentes à remuneração de até 12% sobre o "
            "capital integralizado, de que trata o parágrafo único do art. 49 "
            "da Lei nº 4.506, de 30 de novembro de 1964, c/c parágrafo 3º do "
            "art. 24 da Lei nº 5.764, de 16 de dezembro de 1971, e o 357 do "
            "Decreto nº 9.580/2018."
        ),
    )

    VL_DEMAIS_JUROS = fields.Monetary(
        string="JUROS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Demais Juros: Valor recebido a título de juros "
            "decorrentes da remuneração de recursos emprestados pela pessoa "
            "jurídica a outras pessoas físicas ou jurídicas, residentes ou "
            "domiciliadas no Brasil ou no exterior por meio de contratos de "
            "financiamento ou de mútuo registrados ou não no Banco Central do "
            "Brasil. Também deve ser informado neste campo o valor "
            "correspondente aos: - juros recebidos durante o período que "
            "anteceder o início das operações sociais ou de implantação do "
            "empreendimento inicial de que trata alínea “b” do parágrafo 1º do"
            " art. 15 do Decreto-Lei nº 1.598, de 26 de dezembro de 2012; - "
            "juros recebidos de cooperativa da qual a pessoa jurídica seja "
            "associada correspondentes à remuneração de até 12% sobre o "
            "capital integralizado, de que trata o parágrafo único do art. 49 "
            "da Lei nº 4.506, de 30 de novembro de 1964, c/c parágrafo 3º do "
            "art. 24 da Lei nº 5.764, de 16 de dezembro de 1971, e art. 357 do"
            " Decreto nº 9.580/2018; - juros recebidos correspondentes a "
            "quaisquer transações realizadas pela pessoa jurídica."
        ),
    )

    VL_DIVID = fields.Monetary(
        string="DIVID",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Dividendos: Lucros ou dividendos recebidos pela pessoa "
            "jurídica em decorrência de participação societária avaliada pelo "
            "método da equivalência patrimonial ou pelo custo de aquisição em "
            "outras sociedades no Brasil ou no exterior."
        ),
    )


class RegistroX450(models.Model):
    """Pagamentos ou Remessas Relativos a Serviços, Juros e Dividendos a
    Beneficiários do Brasil e do Exterior"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X450"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX450"

    PAIS = fields.Integer(
        string="PAIS",
        required=True,
        help=(
            "País: País ou a dependência de país de residência ou domicílio da"
            " pessoa física ou jurídica destinatária do pagamento ou da "
            "remessa efetuados pela pessoa jurídica declarante, observado o "
            "exemplo a seguir: Exemplo: Pessoa jurídica declarante efetua "
            "remessa, por conta e ordem do beneficiário do pagamento que é "
            "residente no Japão, para conta corrente localizada nos Estados "
            "Unidos da América. Nesse caso, o país a ser selecionado é o "
            "Japão. Código do país, conforme tabela do Sped (Disponibilizada "
            "no programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_SERV_ASSIST = fields.Monetary(
        string="Valor dos Serviços de Assistência Técnica",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços de Assistência Técnica, Científica, "
            "Administrativa e Assemelhados com Transferência de Tecnologia: "
            "Pagamentos ou as remessas efetuados a título de serviços de "
            "assistência técnica, científica, administrativa e assemelhados "
            "referentes aos contratos que, em conformidade com a Lei nº 9.279,"
            " de 14 maio de 1996, estipulam as condições de obtenção de "
            "técnicas, métodos de planejamento e programação, bem como "
            "pesquisas, estudos e projetos destinados à execução ou prestação "
            "de serviços especializados e que tenham sido objeto de registro "
            "no Instituto Nacional de Propriedade Industrial (INPI)."
        ),
    )

    VL_SERV_SEM_ASSIST = fields.Monetary(
        string="ASSIST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços Técnicos e de Assistência sem Transferência de"
            " Tecnologia Prestados no Brasil: Valores pagos a título de "
            "serviços técnicos e de assistência, prestados no Brasil, "
            "referentes aos contratos dispensados de averbação no Instituto "
            "Nacional de Propriedade Industrial (INPI) por não constituírem "
            "transferência de tecnologia, tais como: i) Agenciamento de "
            "compras, inclusive serviços de logística relativos ao embarque de"
            " mercadorias e liberação alfandegária e outros de natureza "
            "similar; ii) Beneficiamento de produtos; iii) Homologação e "
            "certificação de qualidade de produtos brasileiros com o objetivo "
            "de promover a exportação; iv) Consultoria nas áreas comercial, "
            "financeira, jurídica, reorganização societária e licitações; v) "
            "Estudos de viabilidade econômica; vi) Serviços de marketing; vii)"
            " Serviços realizados sem a presença de técnicos da empresa "
            "tomadora do serviço e que não gerem quaisquer relatórios ou "
            "documentos; viii) Serviços de manutenção de software realizados "
            "sem a presença dos técnicos da empresa tomadora no local da "
            "prestação, tais como os efetuados por meio de “help-desk”. As "
            "pessoas jurídicas que exercem atividades no mercado financeiro, "
            "também, devem informar, neste campo, os rendimentos recebidos "
            "pelos seguintes serviços: i) Administração de fundos, loterias, "
            "sociedades de investimento, dentre outros de natureza similar; "
            "ii) Taxas de administração de consórcios e similares; iii) "
            "Tarifas e portes e comissões por prestação de serviços de "
            "cobrança, colocação de títulos e valores mobiliários por conta e "
            "ordem de terceiros; iv) Serviços prestados na contratação de "
            "operações de câmbio, comissão “del credere” relativa à "
            "administração de ativos redescontados junto ao Bacen; v) Serviços"
            " prestados na intermediação de bolsas, custódia, bem como "
            "serviços prestados a partes ligadas;"
        ),
    )

    VL_SERV_SEM_ASSIST_EXT = fields.Monetary(
        string="EXT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Serviços Técnicos e de Assistência sem Transferência de"
            " Tecnologia Prestados no Exterior: Vaolres pagos a título de "
            "serviços técnicos e de assistência, prestados no Brasil, "
            "referentes aos contratos dispensados de averbação no Instituto "
            "Nacional de Propriedade Industrial (INPI) por não constituírem "
            "transferência de tecnologia, tais como: i) Agenciamento de "
            "compras, inclusive serviços de logística relativos ao embarque de"
            " mercadorias e liberação alfandegária e outros de natureza "
            "similar; ii) Beneficiamento de produtos; iii) Homologação e "
            "certificação de qualidade de produtos brasileiros com o objetivo "
            "de promover a exportação; iv) Consultoria nas áreas comercial, "
            "financeira, jurídica, reorganização societária e licitações; v) "
            "Estudos de viabilidade econômica; vi) Serviços de marketing; vii)"
            " Serviços realizados sem a presença de técnicos da empresa "
            "tomadora do serviço e que não gerem quaisquer relatórios ou "
            "documentos; viii) Serviços de manutenção de software realizados "
            "sem a presença dos técnicos da empresa tomadora no local da "
            "prestação, tais como os efetuados por meio de “help-desk”. As "
            "pessoas jurídicas que exercem atividades no mercado financeiro, "
            "também, devem informar, neste campo, os rendimentos recebidos "
            "pelos seguintes serviços: i) Administração de fundos, loterias, "
            "sociedades de investimento, dentre outros de natureza similar; "
            "ii) Taxas de administração de consórcios e similares; iii) "
            "Tarifas e portes e comissões por prestação de serviços de "
            "cobrança, colocação de títulos e valores mobiliários por conta e "
            "ordem de terceiros; iv) Serviços prestados na contratação de "
            "operações de câmbio, comissão “del credere” relativa à "
            "administração de ativos redescontados junto ao Bacen; v) Serviços"
            " prestados na intermediação de bolsas, custódia, bem como "
            "serviços prestados a partes ligadas;"
        ),
    )

    VL_JURO_PF = fields.Monetary(
        string="PF",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Juros sobre o Capital Próprio Pagos a Pessoa Física: "
            "Valor pago ou remetido à pessoa física residente ou domiciliada "
            "no Brasil ou no exterior a título de remuneração dos recursos "
            "investidos na pessoa jurídica declarante, de que trata o art. 9º "
            "da Lei nº 9.249, de 26 de dezembro de 1995. Atenção: 1) Não "
            "informar neste campo o valor correspondente aos juros pagos ou "
            "remetidos durante o período que anteceder o início das operações "
            "sociais ou de implantação do empreendimento inicial de que trata "
            "a alínea “b” do parágrafo 1º do art. 15 do Decreto-Lei nº 1.598, "
            "de 26 de dezembro de 2012. 2) As cooperativas não devem informar "
            "neste campo o valor relativo aos juros pagos aos associados "
            "correspondente à remuneração de até 12% sobre o capital "
            "integralizado de que trata o parágrafo único do art. 49 da Lei nº"
            " 4.506, de 30 de novembro de 1964, c/c parágrafo 3º do art. 24 da"
            " Lei nº 5.764, de 16 de dezembro de 1971, e o art. 357 do Decreto"
            " nº 9.580/2018."
        ),
    )

    VL_JURO_PJ = fields.Monetary(
        string="PJ",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Juros sobre o Capital Próprio Pagos a Pessoa Jurídica: "
            "Valor pago ou remetido pela pessoa jurídica a outra pessoa "
            "jurídica domiciliada no Brasil ou no exterior a título de "
            "remuneração dos recursos investidos na pessoa jurídica "
            "declarante, de que trata o art. 9º da Lei nº 9.249, de 26 de "
            "dezembro de 1995."
        ),
    )

    VL_DEMAIS_JUROS = fields.Monetary(
        string="JUROS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor dos Demais Juros: Valor pago ou remetido a título de juros "
            "decorrentes da remuneração de empréstimos tomados pela pessoa "
            "jurídica no Brasil ou no exterior por meio de contratos de "
            "financiamento e de mútuo registrados ou não no Banco Central do "
            "Brasil. Também deve ser informado neste campo o valor "
            "correspondente aos: - juros pagos ou remetidos durante o período "
            "que anteceder o início das operações sociais ou de implantação do"
            " empreendimento inicial de que trata a alínea “b” do parágrafo 1º"
            " do art. 15 do Decreto-Lei nº 1.598, de 26 de dezembro de 2012; -"
            " juros pagos ou remetidos por cooperativa à pessoa jurídica "
            "associada correspondentes à remuneração de até 12% sobre o "
            "capital integralizado, de que trata o parágrafo único do art. 49 "
            "da Lei nº 4.506, de 30 de novembro de 1964, c/c parágrafo 3º do "
            "art. 24 da Lei nº 5.764, de 16 de dezembro de 1971, e o art. 357 "
            "do Decreto nº 9.580/2018; - juros pagos ou remetidos "
            "correspondentes a quaisquer transações realizadas pela pessoa "
            "jurídica. Atenção: O valor de juros pago ou remetido em "
            "decorrência da Resolução Bacen nº 3.844, de 23 de março de 2010, "
            "também deve ser informado neste campo, exceto se referir-se ao "
            "pagamento ou remessa de juros de capital próprio de que trata o "
            "art. 9º da Lei nº 9.249, de 1995."
        ),
    )

    VL_DIVID_PF = fields.Monetary(
        string="PF (VL_DIVID_PF)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Dividendos Pagos a Pessoa Física: Valor dos lucros ou dividendos "
            "pagos ou remetidos pela pessoa jurídica à pessoa física residente"
            " ou domiciliada no Brasil ou no exterior em decorrência de "
            "participação societária avaliada pelo método da equivalência "
            "patrimonial ou pelo custo de aquisição."
        ),
    )

    VL_DIVID_PJ = fields.Monetary(
        string="PJ (VL_DIVID_PJ)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Dividendos Pagos a Pessoa Jurídica: Valor dos lucros ou "
            "dividendos pagos ou remetidos pela pessoa jurídica a outra pessoa"
            " jurídica domiciliada no Brasil ou no exterior em decorrência de "
            "participação societária avaliada pelo método da equivalência "
            "patrimonial ou pelo custo de aquisição."
        ),
    )


class RegistroX460(models.Model):
    "Inovação Tecnológica e Desenvolvimento Tecnológico"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X460"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX460"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX470(models.Model):
    "Capacitação de Informática e Inclusão Digital"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X470"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX470"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX480(models.Model):
    """Repes, Recap, Padis, PATVD, Reidi, Repenec, Reicomp, Retaero, Recine,
    Resíduos Sólidos, Recopa, Copa do Mundo, Retid, REPNBL-Redes, Reif e
    Olimpíadas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X480"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX480"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX490(models.Model):
    "Polo Industrial de Manaus e Amazônia Ocidental"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X490"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX490"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX500(models.Model):
    "Zonas de Processamento de Exportação (ZPE)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X500"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX500"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroX510(models.Model):
    "Áreas de Livre Comércio (ALC)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.X510"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroX510"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")


class RegistroY520(models.Model):
    "Pagamentos/Recebimentos do Exterior ou de Não Residentes"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y520"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY520"

    TIP_EXT = fields.Char(
        string="Tipo: R",
        required=True,
        help="Tipo: R - Rendimentos Recebidos P – Pagamentos",
    )

    PAIS = fields.Integer(
        string="PAIS",
        required=True,
        help=(
            "País: País em que está situada a pessoa física ou jurídica que "
            "efetuou o pagamento ou beneficiária do pagamento. Código do País,"
            " conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    FORMA = fields.Integer(
        string="FORMA",
        required=True,
        help=(
            "Forma de Recebimento/Pagamento: “1” – Operação de Câmbio “2” – "
            "Transferência Internacional em Reais “3” – Cartão de Crédito “4” "
            "– Depósito em Conta do Exterior (só válido para TIP_EXT=R) “5” – "
            "Utilização de Recursos Mantidos no Exterior (só válido para "
            "TIP_EXT=P) “6” – Em Moeda Nacional ou Estrangeira"
        ),
    )

    NAT_OPER = fields.Integer(
        string="Natureza da Operação: Código da natureza",
        required=True,
        help=(
            "Natureza da Operação: Código da natureza-fato específico "
            "correspondente à motivação do recebimento/pagamento, conforme § "
            "1o do artigo 23 da Lei no 4.131, de 03 de setembro de 1962, e que"
            " consta na Circular no 3.690, de 16 de dezembro de 2013, do Banco"
            " Central do Brasil. Atenção: As operações que não se enquadrem em"
            " nenhuma das classificações disponíveis serão identificadas pelo "
            "código que indique a melhor aproximação possível da natureza da "
            "transação. Natureza da operação, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas). "
            "Observação: O registro Y520 não possui informação de data em seus"
            " campos. Portanto, os códigos utilizados no campo Y520.NAT_OPER "
            "devem ser os vigentes em na darta final da ECF, para todas as "
            "operações ocorridas durante o ano da escrituração."
        ),
    )

    VL_PERIODO = fields.Monetary(
        string="Valor: Total dos valores recebidos ou pagos",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor: Total dos valores recebidos ou pagos, provenientes do "
            "exterior ou destinados ao exterior, de acordo com o código "
            "indicativo da natureza da operação."
        ),
    )


class RegistroY570(models.Model):
    "Demonstrativo do Imposto de Renda e CSLL Retidos na Fonte"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y570"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY570"

    CNPJ_FON = fields.Char(string="CNPJ: CNPJ da fonte pagadora", required=True)

    NOM_EMP = fields.Char(
        string="EMP",
        required=True,
        help=(
            "Nome Empresarial: Nome da pessoa jurídica responsável pela "
            "retenção e recolhimento da fonte que estiver sendo compensado."
        ),
    )

    IND_ORG_PUB = fields.Char(
        string="Indicador de Órgão Público: S",
        required=True,
        help=(
            "Indicador de Órgão Público: S - Sim N – Não Selecione “Sim” ou "
            "“Não” em relação à pessoa jurídica responsável pela retenção e "
            "recolhimento da fonte que estiver sendo compensado. Ao selecionar"
            " Sim serão disponibilizados os códigos de recolhimento utilizados"
            " pelos Órgãos Públicos Federais ou Entidades da Administração "
            "Pública Federal, ao selecionar Não, serão disponibilizados os "
            "demais códigos."
        ),
    )

    COD_REC = fields.Integer(
        string="Código de Receita Utilizado Para Recolhimento na Fonte",
        required=True,
        help=(
            "Código de Receita Utilizado Para Recolhimento na Fonte, conforme "
            "tabela do Sped (Disponibilizada no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VL_REND = fields.Monetary(
        string="REND",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Rendimento Bruto: Valor bruto do rendimento que originou a " "retenção."
        ),
    )

    IR_RET = fields.Monetary(
        string="RET",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "IR Retido na Fonte: Valor de todo o imposto de renda retido na "
            "fonte durante o período abrangido pela declaração, incidente "
            "sobre as receitas que compõem a base de cálculo do tributo "
            "devido, independentemente de a empresa ter apurado prejuízo "
            "fiscal ou imposto de renda devido menor que o retido na fonte "
            "durante o período."
        ),
    )

    CSLL_RET = fields.Monetary(
        string="RET (CSLL_RET)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "CSLL Retida na Fonte: Valor de toda a contribuição social sobre o"
            " lucro líquido retida na fonte durante o período abrangido pela "
            "declaração, incidente sobre as receitas que compõem a base de "
            "cálculo do tributo devido, independentemente de a empresa ter "
            "apurado base de cálculo negativa ou CSLL devida menor que a "
            "retida na fonte durante o período."
        ),
    )


class RegistroY590(models.Model):
    "Ativos no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y590"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY590"

    TIP_ATIVO = fields.Char(
        string="Tipo do Ativo que Possui no Exterior",
        required=True,
        help=(
            "Tipo do Ativo que Possui no Exterior, conforme tabela do Sped "
            "(Disponibilizada no programa da ECF no diretório Arquivos de "
            "Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    PAIS = fields.Integer(
        string="Código do País: País onde se localiza o ativo no exterior",
        required=True,
        help=(
            "Código do País: País onde se localiza o ativo no exterior, "
            "conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DISCRIMINACAO = fields.Char(
        string="Discriminação: Detalhar",
        required=True,
        help=(
            "Discriminação: Detalhar, neste campo, as informações "
            "correspondentes aos ativos, tais como: tipo, localização, data de"
            " aquisição e de venda, de quem foi adquirido, a quem foi "
            "alienado, instituição que intermediou a operação, valor de "
            "aquisição e/ou de venda em moeda estrangeira, instituição "
            "financeira e agência, tratando-se de aplicação financeira ou "
            "depósito e, na hipótese de participações societárias, espécie de "
            "participação e empresa investida."
        ),
    )

    VL_ANT = fields.Monetary(
        string="ANT",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Anterior: Informar o valor contábil do ativo no exterior no"
            " final do período anterior. Atenção: 1) Caso o período abrangido "
            "pela ECF não se inicie em 01/01, a exemplo de início de "
            "atividades ou ocorrência de situação especial no ano-calendário, "
            "deve ser informado o valor em reais (R$) do ativo no exterior na "
            "data de início do período abrangido pela ECF. 2) Caso o ativo "
            "tenha sido adquirido no curso do período abrangido pela ECF, deve"
            " ser informado, neste campo, o valor zero e no campo "
            "“Discriminação” a data e o valor da aquisição."
        ),
    )

    VL_ATUAL = fields.Monetary(
        string="ATUAL",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Atual: Valor contábil do ativo no final do período atual. "
            "Atenção: Caso o ativo tenha sido alienado no curso do período "
            "abrangido pela ECF, deve ser informado, neste campo, o valor zero"
            " e no campo “Discriminação” a data e o valor da alienação."
        ),
    )


class RegistroY600(models.Model):
    """Identificação e Remuneração de Sócios, Titulares, Dirigentes e
    Conselheiro"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y600"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY600"

    DT_ALT_SOC = fields.Date(
        string="Data da Alteração no Quadro Societário",
        required=True,
        help=(
            "Data da Alteração no Quadro Societário. Pode ser uma data "
            "anterior ao ano da escrituração, inclusive da criação da Pessoa "
            "Jurídica. Atenção: No caso de preenchimento de Y600.DT_FIM_SOC, "
            "informar neste campo a data da última alteração da participação "
            "do sócio, antes da data da saída do quadro societário. "
            "Observação: No caso de administradores, diretores, dirigentes, "
            "presidentes ou conselheiros, adotar a data em que efetivamente "
            "começou a executar essas funções na entidade."
        ),
    )

    DT_FIM_SOC = fields.Date(
        string="Data da Saída do Quadro Societário",
        help=(
            "Data da Saída do Quadro Societário. Deve ser preenchida somente "
            "se a saída do quadro societário ocorreu no ano da escrituração."
        ),
    )

    PAIS = fields.Integer(
        string="PAIS",
        required=True,
        help=(
            "País de Residência ou Domicílio da Pessoa Física ou Jurídica. "
            "Código do país, conforme tabela do Sped (Disponibilizada no "
            "programa da ECF no diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    IND_QUALIF = fields.Char(
        string="Indicador de Qualificação do Sócio",
        required=True,
        help=(
            "Indicador de Qualificação do Sócio, Titular, Dirigente ou "
            "Conselheiro: PF - Pessoa Física PJ - Pessoa Jurídica FI – Fundo "
            "de Investimento"
        ),
    )

    CPF_CNPJ = fields.Integer(
        string="CPF ou CNPJ do Sócio",
        help=(
            "CPF ou CNPJ do Sócio, Titular, Dirigente ou Conselheiro. "
            "Obrigatório se Código do País for igual a 105 (Brasil) Caso "
            "contrário, pode ser preenchido com branco(s). Se IND_QUALIF_SOCIO"
            " =” PF” preencher com CPF. Senão, preencher com CNPJ."
        ),
    )

    NOM_EMP = fields.Char(
        string="Nome/Nome empresarial do Sócio",
        required=True,
        help=("Nome/Nome empresarial do Sócio, Titular, Dirigente ou " "Conselheiro."),
    )

    QUALIF = fields.Char(
        string="S S S O Qualificação do Sócio",
        required=True,
        help=(
            "S S S O Qualificação do Sócio, Titular, Dirigente ou Conselheiro."
            " Se PAIS = “105” (Brasil) E IND_QUALIF_SOCIO = “PF”: 01 – "
            "Acionista Pessoa Física Domiciliado no Brasil 02 – Sócio Pessoa "
            "Física Domiciliado no Brasil 09 – Titular 10 – Administrador sem "
            "Vínculo Empregatício 11 – Diretor sem Vínculo Empregatício 12 – "
            "Presidente sem Vínculo Empregatício 13 – Administrador com "
            "Vínculo Empregatício 14 – Conselheiro de Administração ou Fiscal "
            "15 – Diretor com Vínculo Empregatício 16 – Fundador 17 – "
            "Presidente com Vínculo Empregatício 18 – Usufrutuário de Quotas "
            "ou Ações e PAIS = “105” (Brasil) E IND_QUALIF_SOCIO = PJ: 03 - "
            "Acionista Pessoa Jurídica Domiciliado no Brasil 04 - Sócio Pessoa"
            " Jurídica Domiciliado no Brasil 18 – Usufrutuário de Quotas ou "
            "Ações e PAIS diferente de “105” (Brasil) E IND_QUALIF_SOCIO = PF:"
            " 05 - Acionista Pessoa Física Residente ou Domiciliado no "
            "Exterior 06 - Sócio Pessoa Física Residente ou Domiciliado no "
            "Exterior 14 – Conselheiro de Administração ou Fiscal 18 – "
            "Usufrutuário de Quotas ou Ações e PAIS diferente de “105” "
            "(Brasil) E IND_QUALIF_SOCIO = PJ: 07 - Acionista Pessoa Jurídica "
            "Residente ou Domiciliado no Exterior 08 - Sócio Pessoa Jurídica "
            "Residente ou Domiciliado no Exterior 18 – Usufrutuário de Quotas "
            "ou Ações bservação: Caso o sócio seja também administrador ou "
            "diretor, deve selecionar a opção 02 – Sócio Pessoa Física "
            "Domiciliado no Brasil ou 06 – Sócio Pessoa Física Domiciliado no "
            "Exterior."
        ),
    )

    PERC_CAP_TOT = fields.Float(
        string="TOT",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual Relativo à Participação da Pessoa Física ou Jurídica, "
            "Sócio, Titular, Conselheiro ou Dirigente, no Capital Total. "
            "Observação: Caso o valor seja 100,00%, informe somente “100”."
        ),
    )

    PERC_CAP_VOT = fields.Float(
        string="VOT",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual Relativo à Participação da Pessoa Física ou Jurídica, "
            "Sócio, Titular, Conselheiro ou Dirigente, no Capital Votante. "
            "Observação: Caso o valor seja 100,00%, informe somente “100”."
        ),
    )

    CPF_REP_LEG = fields.Integer(
        string="LEG",
        help=(
            "CPF do Representante Legal: No caso de residente ou domiciliado "
            "no exterior ou de pessoa física residente no Brasil legalmente "
            "representada."
        ),
    )

    QUALIF_REP_LEG = fields.Integer(
        string="LEG (QUALIF_REP_LEG)",
        help=(
            "Qualificação do Representante Legal: Obrigatório se CPF_REP_LEG é"
            " diferente de vazio Se IND_QUALIF_SOCIO = “PF” 01 - Procurador 02"
            " - Curador 03 - Mãe 04 - Pai 05 - Tutor 06 – Outro Se "
            "IND_QUALIF_SOCIO = “PJ” 01 - Procurador 06 – Outro"
        ),
    )

    VL_REM_TRAB = fields.Monetary(
        string="Remuneração do Trabalho: Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Remuneração do Trabalho: Valor, antes da dedução do imposto de "
            "renda retido na fonte, dos rendimentos pagos e escriturados, nos "
            "livros da escrituração contábil ou no livro Caixa, a título de "
            "remuneração a sócios, dirigentes e conselheiros pela prestação de"
            " serviços, ou quaisquer outros pagamentos, tais como: pró-labore "
            "e aluguéis."
        ),
    )

    VL_LUC_DIV = fields.Monetary(
        string="DIV",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Lucros/Dividendos: Valor dos lucros e dividendos efetivamente "
            "pagos no ano-calendário a sócios ou a titular de empresa "
            "individual."
        ),
    )

    VL_JUR_CAP = fields.Monetary(
        string="CAP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Juros Sobre o Capital Próprio: Valor dos juros pagos ou "
            "creditados a titular, ou a sócios ou acionistas, a título de "
            "remuneração do capital próprio, antes de deduzido o imposto de "
            "renda na fonte, em conformidade com o disposto no art. 9o da Lei "
            "no 9.249, de 1995."
        ),
    )

    VL_DEM_REND = fields.Monetary(
        string="Demais Rendimentos: Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Demais Rendimentos: Valor, antes da dedução do imposto de renda "
            "retido na fonte, dos demais rendimentos pagos ou creditados a "
            "sócios, a acionistas, a titular de empresa individual, a "
            "dirigentes ou a conselheiros, inclusive os lucros e dividendos "
            "não apurados em balanço e distribuídos."
        ),
    )

    VL_IR_RET = fields.Monetary(
        string="RET",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "IR Retido na Fonte: Valor do imposto de renda retido na fonte por"
            " ocasião do pagamento de lucros ou dividendos não abrangidos pela"
            " isenção, e sobre os demais rendimentos pagos a sócios, a "
            "acionistas, a titular de empresa individual, a dirigentes ou a "
            "conselheiros."
        ),
    )


class RegistroY612(models.Model):
    """Identificação e Rendimentos de Dirigentes e Conselheiros - Imunes ou
    Isentas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y612"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY612"

    CPF = fields.Integer(
        string="CPF",
        required=True,
        help=("CPF: CPF do dirigente ou conselheiro beneficiário dos " "rendimentos."),
    )

    NOME = fields.Char(
        string="NOME",
        required=True,
        help=(
            "Nome: Nome do dirigente ou conselheiro beneficiário dos " "rendimentos."
        ),
    )

    QUALIF = fields.Integer(
        string="QUALIF",
        required=True,
        help=(
            "Qualificação: Qualificação do dirigente ou conselheiro "
            "beneficiário dos rendimentos: 10 - Administrador sem Vínculo "
            "Empregatício 11 - Diretor sem Vínculo Empregatício 12 – "
            "Presidente sem Vínculo Empregatício 13 - Administrador com "
            "Vínculo Empregatício 14 - Conselheiro de Administração ou Fiscal "
            "15 - Diretor com Vínculo Empregatício 16 - Fundador 17 - "
            "Presidente com Vínculo Empregatício"
        ),
    )

    VL_REM_TRAB = fields.Monetary(
        string="TRAB",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Rendimentos do Trabalho: Valor dos rendimentos pagos e "
            "escriturados, nos livros da escrituração contábil ou no livro "
            "Caixa, a título de remuneração a dirigentes ou conselheiros pela "
            "prestação de serviços, ou quaisquer outros pagamentos, tais como:"
            " pró- labore e aluguéis. Esses valores sujeitam-se à incidência "
            "do imposto de renda na fonte e na declaração de rendimentos dos "
            "beneficiários."
        ),
    )

    VL_DEM_REND = fields.Monetary(
        string="REND",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Demais Rendimentos: Valor de outros rendimentos não classificados"
            " como rendimento do trabalho, escriturados nos livros da "
            "escrituração contábil ou no livro Caixa, pagos aos dirigentes ou "
            "conselheiros. Esses valores sujeitam-se à incidência do imposto "
            "de renda na fonte e na declaração de rendimentos dos "
            "beneficiários."
        ),
    )

    VL_IR_RET = fields.Monetary(
        string="RET",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "IR Retido na Fonte: Valor do imposto de renda retido na fonte por"
            " ocasião do pagamento dos rendimentos a dirigentes ou "
            "conselheiros da pessoa jurídica imune ou isenta de IRPJ."
        ),
    )


class RegistroY620(models.Model):
    "Participações Avaliadas pelo Método de Equivalência Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y620"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY620"

    DT_EVENTO = fields.Date(
        string="EVENTO",
        required=True,
        help=(
            "Data do Evento: Data do evento societário que deu causa à "
            "classificação conforme o indicador do tipo de relacionamento "
            "(Y620.IND_RELAC) no formato DDMMYYYY."
        ),
    )

    IND_RELAC = fields.Integer(
        string="Indicador do Tipo de Relacionamento: 1",
        required=True,
        help=(
            "Indicador do Tipo de Relacionamento: 1 - Controle 2 - Controle "
            "Conjunto 3 - Influência Significativa 4 - Outras causas para "
            "aplicar MEP (mesmo grupo ou controle comum) 5 - Exclusão do MEP"
        ),
    )

    PAIS = fields.Integer(
        string="País: País onde a coligada ou controlada está domiciliada",
        required=True,
        help=(
            "País: País onde a coligada ou controlada está domiciliada., "
            "conforme tabela do Sped (Disponibilizada no programa da ECF no "
            "diretório Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ: CNPJ da coligada ou controlada",
        help=(
            "CNPJ: CNPJ da coligada ou controlada. Obrigatório se PAIS = 105 "
            "(Brasil) Caso contrário, o campo deve ser nulo"
        ),
    )

    NOM_EMP = fields.Char(
        string="EMP",
        required=True,
        help=("Nome Empresarial: Nome empresarial da coligada ou controlada."),
    )

    VALOR_REAIS = fields.Char(
        string="Valor Total da Participação em Reais",
        required=True,
        help=("Valor Total da Participação em Reais (Cotação da data do evento)."),
    )

    VALOR_ESTR = fields.Char(
        string="ESTR",
        required=True,
        help=(
            "Valor Total da Participação em Moeda Original do País da Empresa "
            "Investida."
        ),
    )

    PERC_CAP_TOT = fields.Float(
        string="TOT",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual de Participação no Capital Total da Coligada ou " "Controlada."
        ),
    )

    PERC_CAP_VOT = fields.Float(
        string="VOT",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual de Participação no Capital Votante da Coligada ou "
            "Controlada."
        ),
    )

    RES_EQ_PAT = fields.Char(string="Resultado de Equivalência Patrimonial")

    DATA_AQUIS = fields.Char(
        string="AQUIS",
        required=True,
        help=(
            "Data da Primeira Aquisição da Participação Societária Observação:"
            " Poderá ser igual a Y600.DT_EVENTO se a primeira aquisição foi "
            "causa do MEP."
        ),
    )

    IND_PROC_CART = fields.Char(
        string="CART",
        required=True,
        help=(
            "Sumário em Cartório: Informar se houve sumário registrado em "
            "cartório relativo ao Laudo de Avaliação do Valor Justo dos Ativos"
            " Líquidos da Investida (Mais-valia ou menos-valia) de acordo com "
            "o art. 178 da Instrução Normativa RFB nº 1.700, de 14 de março de"
            " 2017: S – Sim N = Não"
        ),
    )

    NUM_PROC_CART = fields.Char(
        string="CART (NUM_PROC_CART)",
        help=(
            "Número do Registro no Cartório: Informar o número do registro em "
            "cartório do sumário relativo ao Laudo de Avaliação do Valor Justo"
            " dos Ativos Líquidos da Investida (Mais- valia ou menos-valia) de"
            " acordo com o art. 178 da Instrução Normativa RFB nº 1.700, de 14"
            " de março de 2017."
        ),
    )

    NOME_CART = fields.Char(
        string="CART (NOME_CART)",
        help=(
            "Nome do Cartório: Informar o nome e endereço do cartório onde foi"
            " registrado o sumário relativo ao Laudo de Avaliação do Valor "
            "Justo dos Ativos Líquidos da Investida (Mais- valia ou menos-"
            "valia) de acordo com o art. 178 da Instrução Normativa RFB nº "
            "1.700, de 14 de março de 2017."
        ),
    )

    IND_PROC_RFB = fields.Char(
        string="RFB",
        required=True,
        help=(
            "Laudo Protocolado na RFB: Informar se houve Laudo de Avaliação do"
            " Valor Justo dos Ativos Líquidos da Investida (Mais-valia ou "
            "menos-valia) de acordo com o art. 178 da Instrução Normativa RFB "
            "nº 1.700, de 14 de março de 2017, protocolado na RFB: S – Sim N ="
            " Não Observação: Deverá ser informado também para os casos de "
            "aquisição ou venda ocorridos antes do período a que se refere "
            "essa ECF."
        ),
    )

    NUM_PROC_RFB = fields.Char(
        string="RFB (NUM_PROC_RFB)",
        help=(
            "Número do Processo: Informar o número do processo eletrônico do "
            "Laudo de Avaliação do Valor Justo dos Ativos Líquidos da "
            "Investida protocolado na RFB (Mais-valia ou menos-valia) de "
            "acordo com o art. 178 da Instrução Normativa RFB nº 1.700, de 14 "
            "de março de 2017."
        ),
    )


class RegistroY630(models.Model):
    "Fundos/Clubes de Investimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y630"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY630"

    CNPJ = fields.Char(
        string="CNPJ",
        required=True,
        help=(
            "CNPJ: As administradoras de Fundos ou Clubes de Investimento "
            "devem informar, neste campo, o CNPJ de cada Fundo ou Clube de "
            "Investimento.Os fundos de investimento imobiliário de que trata a"
            " Lei no 8.668, de 1993, alterada pelos arts. 2o a 4o e 22 da Lei "
            "no 9.779, de 1999, devem informar o próprio CNPJ."
        ),
    )

    QTE_QUOT = fields.Integer(
        string="QUOT",
        required=True,
        help=(
            "Quantidade de Quotistas no Final do Período: Quantidade de "
            "quotistas do fundo ou clube, existente no final do período de "
            "apuração, para cada CNPJ informado. Atenção: No caso de "
            "encerramento indicar a quantidade de quotistas do fundo ou clube "
            "apurada/levantada pelo Administrador para a data da Assembleia de"
            " quotistas para fins de deliberar o encerramento, ou na data do "
            "evento de encerramento."
        ),
    )

    QTE_QUOTA = fields.Integer(
        string="QUOTA",
        required=True,
        help=(
            "Quantidade de Quotas no Final do Período: Quantidade de quotas do"
            " fundo ou clube, existente no final do período de apuração, para "
            "cada CNPJ informado. Atenção: No caso de encerramento indicar a "
            "quantidade de quotas do fundo ou clube apurada/levantada pelo "
            "Administrador para a data da Assembleia de quotistas para fins de"
            " deliberar o encerramento, ou na data do evento de encerramento."
        ),
    )

    PATR_FIN_PER = fields.Monetary(
        string="PER",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Patrimônio no Final do Período: Patrimônio do fundo ou clube, "
            "existente no final do período de apuração, para cada CNPJ "
            "informado. Atenção: No caso de encerramento indicar o patrimônio "
            "do fundo ou clube apurado/levantado pelo Administrador para a "
            "data da Assembleia de quotistas para fins de deliberar o "
            "encerramento, ou na data do evento de encerramento."
        ),
    )

    DAT_ABERT = fields.Integer(
        string="ABERT",
        required=True,
        help=(
            "Data de Abertura: Indicar a data de abertura do fundo ou clube de"
            " investimento, para cada CNPJ informado."
        ),
    )

    DAT_ENCER = fields.Integer(
        string="ENCER",
        help=(
            "Data de Encerramento: Indicar a data de encerramento do fundo ou "
            "clube de investimento, para cada CNPJ informado."
        ),
    )


class RegistroY640(models.Model):
    "Participações em Consórcios de Empresas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y640"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY640"

    CNPJ = fields.Char(
        string="CNPJ",
        required=True,
        help=(
            "CNPJ: CNPJ do consórcio no qual a pessoa jurídica participou no "
            "período a que se refere esta declaração."
        ),
    )

    COND_DECL = fields.Integer(
        string="DECL",
        required=True,
        help=(
            "Condição do Declarante no Consórcio: 1 – Líder 2 – Participante "
            "Atenção: No caso de alteração da condição de liderança do "
            "consórcio no decorrer do ano- calendário, considera-se líder a "
            "pessoa jurídica que se enquadrar nessa condição no último dia do "
            "período a que se refere esta declaração ou na data de extinção do"
            " consórcio."
        ),
    )

    VL_CONS = fields.Monetary(
        string="Receita do Consórcio: O líder indicará",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receita do Consórcio: O líder indicará, neste campo, o valor do "
            "somatório das receitas auferidas por todos os consorciados no "
            "período considerado. Atenção: Este campo não deve ser preenchido "
            "para participante que não seja líder. Obrigatório se COND_DECL=1."
            " Senão, não deve ser preenchido."
        ),
    )

    CNPJ_LID = fields.Char(string="CNPJ da Empresa Líder do Consórcio", required=True)

    VL_DECL = fields.Monetary(
        string="DECL (VL_DECL)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receita do Declarante no Consórcio: Receita auferida pelo "
            "declarante no período a que se refere esta declaração, observado "
            "o disposto no caput do art. 3o da IN RFB no 1.199, de 2011."
        ),
    )


class RegistroY650(models.Model):
    "Participantes do Consórcio"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y650"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY650"

    CNPJ = fields.Char(
        string="CNPJ da Empresa Participante do Consórcio", required=True
    )

    VL_PART = fields.Monetary(
        string="Receita do Participante do Consórcio",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )


class RegistroY660(models.Model):
    "Dados de Sucessoras"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y660"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY660"

    CNPJ = fields.Char(
        string="CNPJ da Pessoa Jurídica Resultante do Evento", required=True
    )

    NOM_EMP = fields.Char(
        string="Nome Empresarial da Pessoa Jurídica Resultante do Evento", required=True
    )

    PERC_PAT_LIQ = fields.Float(
        string="LIQ",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual do Patrimônio Líquido Destinado: Percentual do "
            "patrimônio líquido da empresa sucedida destinado à pessoa "
            "jurídica resultante do evento."
        ),
    )


class RegistroY672(models.Model):
    "Outras Informações (Lucro Presumido ou Lucro Arbitrado)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y672"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY672"

    VL_CAPITAL_ANT = fields.Monetary(
        string="ANT",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Capital Registrado do Ano Anterior: Valor do capital registrado, "
            "em órgão competente, no fim do “Ano Imediatamente Anterior”."
        ),
    )

    VL_CAPITAL = fields.Monetary(
        string="Capital Registrado: Valor do capital registrado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Capital Registrado: Valor do capital registrado, em órgão "
            "competente, no fim do “Ano da Escrituração”."
        ),
    )

    VL_ESTOQUE_ANT = fields.Monetary(
        string="ANT (VL_ESTOQUE_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Estoques do Ano Anterior: Valor dos estoques no fim do “Ano "
            "Imediatamente Anterior”."
        ),
    )

    VL_ESTOQUES = fields.Monetary(
        string="ESTOQUES",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Estoques: Valor dos estoques no fim do “Ano da Escrituração”."),
    )

    VL_CAIXA_ANT = fields.Monetary(
        string="ANT (VL_CAIXA_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Caixa e Bancos do Ano Anterior: Valor resultante da soma"
            " do saldo de caixa e dos saldos bancários registrados na "
            "escrituração comercial ou no livro Caixa, no fim do “Ano "
            "Imediatamente Anterior”."
        ),
    )

    VL_CAIXA = fields.Monetary(
        string="CAIXA",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Caixa e Bancos: Valor resultante da soma do saldo de "
            "caixa e dos saldos bancários registrados na escrituração "
            "comercial ou no livro Caixa, no fim do “Ano da Escrituração”."
        ),
    )

    VL_APLIC_FIN_ANT = fields.Monetary(
        string="ANT (VL_APLIC_FIN_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Aplicações Financeiras do Ano Anterior: Saldo das "
            "aplicações financeiras, seja no mercado de renda fixa, seja no "
            "mercado de renda variável, no fim do “Ano Imediatamente "
            "Anterior”."
        ),
    )

    VL_APLIC_FIN = fields.Monetary(
        string="FIN",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo de Aplicações Financeiras: Saldo das aplicações "
            "financeiras, seja no mercado de renda fixa, seja no mercado de "
            "renda variável, no fim do “Ano da Escrituração”."
        ),
    )

    VL_CTA_REC_ANT = fields.Monetary(
        string="ANT (VL_CTA_REC_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Receber do Ano Anterior: Saldo das contas a receber no "
            "fim do “Ano Imediatamente Anterior”."
        ),
    )

    VL_CTA_REC = fields.Monetary(
        string="REC",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Receber: Saldo das contas a receber no fim do “Ano da "
            "Escrituração”."
        ),
    )

    VL_CTA_PAG_ANT = fields.Monetary(
        string="ANT (VL_CTA_PAG_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Pagar do Ano Anterior: Saldo das contas a pagar no fim "
            "do “Ano Imediatamente Anterior”."
        ),
    )

    VL_CTA_PAG = fields.Monetary(
        string="PAG",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Contas a Pagar: Saldo das contas a pagar no fim do “Ano da "
            "Escrituração”."
        ),
    )

    VL_COMPRA_MERC = fields.Monetary(
        string="Compras de Mercadorias no Ano",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Compras de Mercadorias no Ano-Calendário: Valor das compras de "
            "mercadorias adquiridas no ano-calendário para revenda e as "
            "aquisições de materiais empregados nos produtos produzidos e "
            "serviços prestados."
        ),
    )

    VL_COMPRA_ATIVO = fields.Monetary(
        string="Compras de Elementos do Ativo no Ano",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Compras de Elementos do Ativo no Ano-Calendário, Exceto os "
            "Classificáveis no Ativo Circulante e Ativo Não Circulante "
            "Realizável a Longo Prazo: Valor das aquisições de elementos do "
            "ativo no ano-calendário, exceto os classificáveis no ativo "
            "circulante e ativo não circulante realizável a longo prazo."
        ),
    )

    VL_RECEITAS = fields.Monetary(
        string="RECEITAS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Receitas e Rendimentos Não Tributáveis ou Tributados "
            "Exclusivamente na Fonte; Informar, neste campo, o valor das "
            "seguintes receitas e rendimentos: a) as recuperações de créditos "
            "que não representem ingressos de novas receitas; b) a reversão de"
            " saldo de provisões anteriormente constituídas; c) os lucros e "
            "dividendos decorrentes de participações societárias avaliadas "
            "pelo custo de aquisição e a contrapartida do ajuste por aumento "
            "do valor de investimentos avaliados pelo método da equivalência "
            "patrimonial; d) as importâncias recebidas na forma do caput do "
            "art. 18 da Lei nº 11.196, de 2005, desde que utilizadas "
            "integralmente na realização da pesquisa ou desenvolvimento de "
            "inovação tecnológica; e e) as receitas decorrentes de valores em "
            "espécie pagos ou creditados pelos Estados, Distrito Federal e "
            "Municípios, relativos ao Imposto sobre Operações relativas à "
            "Circulação de Mercadorias e sobre Prestações de Serviços de "
            "Transporte Interestadual e Intermunicipal e de Comunicação - ICMS"
            " e ao Imposto sobre Serviços de Qualquer Natureza - ISS, no "
            "âmbito de programas de concessão de crédito voltados ao estímulo "
            "à solicitação de documento fiscal na aquisição de mercadorias e "
            "serviços. (Art. 4º, da Lei nº 11.945, de 4 de junho de 2009). f) "
            "de debêntures emitidas por SPE e de fundos de investimentos, "
            "tributados exclusivamente na fonte, à alíquota de 15% (quinze por"
            " cento), quando auferidos por pessoa jurídica tributada com base "
            "no presumido ou arbitrado (arts. 2º e 3º da Lei nº 12.431, de "
            "2011)."
        ),
    )

    TOT_ATIVO = fields.Monetary(
        string="ATIVO",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Total do Ativo: Valor total do Ativo no fim do “Ano da " "Declaração”."),
    )

    IND_AVAL_ESTOQ = fields.Char(
        string="ESTOQ",
        help=(
            "Método de Avaliação de Estoques: 1 – Custo Médio Ponderado 2 – "
            "PEPS (Primeiro que entra, primeiro que sai) 3 – Arbitramento - "
            "art. 296, Inc. I e II, do RIR/99 4 – Custo Específico 5 – Valor "
            "Realizável Líquido 6 – Inventário Periódico 7 – Outros 8 – Não há"
            " (Exemplo: Empresas Prestadoras de Serviços)"
        ),
    )


class RegistroY680(models.Model):
    """Mês das Informações de Optantes pelo Refis (Lucro Real, Presumido e
    Arbitrado)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y680"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY680"

    MES = fields.Char(
        string="MES",
        required=True,
        help=(
            "Mês: 01 – Janeiro 02 – Fevereiro 03 – Março 04 – Abril 05 – Maio "
            "06 – Junho 07 – Julho 08 – Agosto 09 – Setembro 10 – Outubro 11 –"
            " Novembro 12 – Dezembro"
        ),
    )

    reg_Y681_ids = fields.One2many(
        "l10n_br_sped.ecf.1.Y681",
        "reg_Y681_ids_RegistroY680_id",
        string="Informações de Optantes pelo Refis",
        help=(
            "Informações de Optantes pelo Refis (Lucro Real, Presumido e " "Arbitrado)"
        ),
    )


class RegistroY681(models.Model):
    """Informações de Optantes pelo Refis (Lucro Real, Presumido e
    Arbitrado)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y681"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY681"

    CODIGO = fields.Char(
        string="Código",
        required=True,
        help=(
            "Código, conforme tabela dinâmica do Sped (Disponibilizada no item"
            " III deste registro e no programa da ECF no diretório Arquivos de"
            " Programas/Programas Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    DESCRICAO = fields.Char(
        string="Descrição",
        help=(
            "Descrição, conforme tabela dinâmica do Sped (Disponibilizada no "
            "item III deste registro e no programa da ECF no diretório "
            "Arquivos de Programas/Programas "
            "Sped/ECf/SpedEcf/Recursos/Tabelas)."
        ),
    )

    VALOR = fields.Char(string="Valor")

    reg_Y681_ids_RegistroY680_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecf.1.Y680",
        string="Mês das Informações de Optantes pelo Refis",
        required=True,
        help=(
            "Mês das Informações de Optantes pelo Refis (Lucro Real, Presumido"
            " e Arbitrado)"
        ),
    )


class RegistroY682(models.Model):
    "Informações de Optantes pelo Refis - Imunes ou Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y682"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY682"

    MES = fields.Char(
        string="MES",
        required=True,
        help=(
            "Mês: 01 – Janeiro 02 – Fevereiro 03 – Março 04 – Abril 05 – Maio "
            "06 – Junho 07 – Julho 08 – Agosto 09 – Setembro 10 – Outubro 11 –"
            " Novembro 12 – Dezembro"
        ),
    )

    ACRES_PATR = fields.Monetary(
        string="Acréscimo Patrimonial no Mês",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )


class RegistroY720(models.Model):
    "Informações de Períodos Anteriores"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y720"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY720"

    LUC_LIQ = fields.Monetary(
        string="LIQ",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "O Lucro líquido antes da incidência do imposto sobre a renda e da"
            " contribuição social sobre o lucro líquido do último período de "
            "apuração informado, sem a atualização pela taxa referencial do "
            "Selic, pois o sistema efetuará o cálculo automaticamente. "
            "bservação: De acordo com o § 1o do art. 6o da Instrução Normativa"
            " RFB no 1.422, de 19 de dezembro de 2013, com redação dada pela "
            "Instrução Normativa RFB no 1.574, de 24 de julho de 2014, na "
            "aplicação da multa de que trata o caput, quando não houver lucro "
            "líquido, antes do Imposto de Renda e da Contribuição Social, no "
            "período de apuração a que se refere a escrituração, deverá ser "
            "utilizado o último lucro líquido, antes do Imposto de Renda e da "
            "Contribuição Social informado, atualizado pela taxa referencial "
            "do Sistema Especial de Liquidação e de Custódia - Selic, até o "
            "termo final de encerramento do período a que se refere a "
            "escrituração."
        ),
    )

    DT_LUC_LIQ = fields.Date(
        string="LIQ (DT_LUC_LIQ)",
        required=True,
        help=(
            "Data do final do período de apuração do lucro líquido informado " "acima."
        ),
    )

    REC_BRUT_ANT = fields.Monetary(
        string="Receita bruta do período anterior",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    INTIMACAO = fields.Char(
        string="INTIMACAO",
        required=True,
        help=(
            "Houve termo de intimação pela RFB para a entrega desta ECF? S – "
            "Sim N – Não"
        ),
    )

    INT_ATRASO = fields.Char(
        string="ATRASO",
        help=(
            "A transmissão desta ECF está dentro do prazo previsto na "
            "intimação? S – Sim N – Não"
        ),
    )


class RegistroY800(models.Model):
    "Outras Informações"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.Y800"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "RegistroY800"

    TIPO_DOC = fields.Integer(
        string="Tipo do Documento: 001",
        required=True,
        help=(
            "Tipo do Documento: 001 - Memória de Cálculo - Incoporação 002 - "
            "Laudo de Avaliação a Valor Justo 003 – Outros"
        ),
    )

    DESCRICAO = fields.Char(string="Descrição do Conteúdo do Documento", required=True)

    HASH = fields.Char(
        string="Hash do arquivo incluído na escrituração",
        required=True,
        help=(
            "Hash do arquivo incluído na escrituração. Este campo não deve ser"
            " informado no arquivo de importação pois será calculado pelo "
            "sistema (deve ser informado vazio)."
        ),
    )

    ARQ_RTF = fields.Char(
        string="RTF",
        required=True,
        help=(
            "Sequência de Bytes: Sequência de bytes que representem um único "
            "arquivo no formato RTF (Rich Text Format)."
        ),
    )

    IND_FIM_RTF = fields.Char(
        string="Indicador de Fim do Arquivo RTF",
        required=True,
        help=("Indicador de Fim do Arquivo RTF. Texto fixo contendo “Y800FIM”."),
    )


class Registro9100(models.Model):
    "Avisos da Escrituração"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.9100"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro9100"

    NOM_REGRA = fields.Integer(string="Identificação da regra", required=True)

    MSG_REGRA = fields.Char(string="Mensagem: Mensagem associada ao aviso")

    REGISTRO = fields.Char(
        string="Registro: Registro onde ocorreu o aviso", required=True
    )

    CAMPO = fields.Char(string="Campo: Nome do campo no registro onde ocorreu")

    CONTEÚDO = fields.Char(
        string="CONTEÚDO",
        help="Conteúdo: Conteúdo do campo – Valor preenchido pelo usuário.",
    )

    VALOR_ESPERADO = fields.Char(
        string="ESPERADO",
        help=(
            "Valor Original ou Calculado: Valor original ou calculado que era "
            "esperado como conteúdo do campo."
        ),
    )

    PER_APUR = fields.Char(string="Período de Apuração Fiscal")

    COD_CTA = fields.Char(string="Código da Conta")

    COD_CCUS = fields.Char(string="Centro de Custos")

    COD_CTA_REF = fields.Char(string="Código da Conta Referencial")

    CODIGO = fields.Char(string="Código da linha na tabela dinâmica")

    NUM_ORDEM = fields.Char(string="Número de Ordem (X300)")

    CNPJ_ESTAB = fields.Char(string="CNPJ do Estabelecimento (Y540)")

    CNAE = fields.Integer(string="CNAE (Y540)")

    COD_CTA_B = fields.Char(string="Código da Conta da Parte B")

    COD_TRIBUTO = fields.Char(string="Tributo Relacionado à Conta da Parte B")


class Registro9900(models.Model):
    "Registros do Arquivo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.1.9900"
    _inherit = "l10n_br_sped.mixin"
    _binding_type = "Registro9900"

    REG_BLC = fields.Char(
        string="Registro: Registro que será totalizado em 9900.QTD_REG_BLC",
        required=True,
    )

    QTD_REG_BLC = fields.Integer(
        string="BLC",
        required=True,
        help=(
            "Total de Registros por Tipo: Total de registros do tipo informado"
            " em 9900.REG_BLC."
        ),
    )

    VERSAO = fields.Char(
        string="Versão: Versão da tabela dinâmica utilizada",
        help=(
            "Versão: Versão da tabela dinâmica utilizada. Será preenchido "
            "somente para registros dinâmicos."
        ),
    )

    ID_TAB_DIN = fields.Char(string="Identificação da Tabela Dinâmica Utilizada")
